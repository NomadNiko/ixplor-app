// Files from ./src
----------------------------------------

// ./src/app/[language]/admin-panel/users/queries/users-queries.ts
----------------------------------------
import { useGetUsersService } from "@/services/api/services/users";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import { createQueryKeys } from "@/services/react-query/query-key-factory";
import { useInfiniteQuery } from "@tanstack/react-query";
import { UserFilterType, UserSortType } from "../user-filter-types";
export const usersQueryKeys = createQueryKeys(["users"], {
  list: () => ({
    key: [],
    sub: {
      by: ({
        sort,
        filter,
      }: {
        filter: UserFilterType | undefined;
        sort?: UserSortType | undefined;
      }) => ({
        key: [sort, filter],
      }),
    },
  }),
});
export const useUserListQuery = ({
  sort,
  filter,
}: {
  filter?: UserFilterType | undefined;
  sort?: UserSortType | undefined;
} = {}) => {
  const fetch = useGetUsersService();
  const query = useInfiniteQuery({
    queryKey: usersQueryKeys.list().sub.by({ sort, filter }).key,
    initialPageParam: 1,
    queryFn: async ({ pageParam, signal }) => {
      const { status, data } = await fetch(
        {
          page: pageParam,
          limit: 10,
          filters: filter,
          sort: sort ? [sort] : undefined,
        },
        {
          signal,
        }
      );
      if (status === HTTP_CODES_ENUM.OK) {
        return {
          data: data.data,
          nextPage: data.hasNextPage ? pageParam + 1 : undefined,
        };
      }
    },
    getNextPageParam: (lastPage) => {
      return lastPage?.nextPage;
    },
    gcTime: 0,
  });
  return query;
};
----------------------------------------

// ./src/app/[language]/finance/finance-mock-data.ts
----------------------------------------
import { 
    AggregateFinancialData, 
    ToursFinancialData, 
    TicketsFinancialData, 
    RentalsFinancialData, 
    LessonsFinancialData 
  } from './finance-types';
  
  const generateDailyRevenue = (days: number, baseValue: number) => {
    return Array.from({ length: days }, (_, i) => {
      const date = new Date();
      date.setDate(date.getDate() - (days - i - 1));
      return {
        value: baseValue + Math.random() * 1000,
        date: date.toISOString().split('T')[0]
      };
    });
  };
  
  export const mockToursData: ToursFinancialData = {
    id: "t1",
    vendorId: "1",
    vendorName: "Mountain Edge Tours",
    vendorType: "tours",
    period: "2024-01",
    availableBalance: { value: 25000, change: 12.5, trend: 'up' },
    pendingBalance: { value: 5000, change: -2.3, trend: 'down' },
    lifetimeRevenue: { value: 125000, change: 15.7, trend: 'up' },
    lastUpdated: "2024-01-08T09:00:00Z",
    tourBookings: {
      completed: 145,
      upcoming: 67,
      canceled: 12,
      revenue: generateDailyRevenue(30, 800).map(d => d.value),
      dates: generateDailyRevenue(30, 800).map(d => d.date)
    },
    customerSatisfaction: 4.8,
    averageBookingValue: 299
  };
  
  export const mockTicketsData: TicketsFinancialData = {
    id: "t2",
    vendorId: "2",
    vendorName: "Peak Pass Sales",
    vendorType: "tickets",
    period: "2024-01",
    availableBalance: { value: 45000, change: 23.4, trend: 'up' },
    pendingBalance: { value: 7500, change: 5.6, trend: 'up' },
    lifetimeRevenue: { value: 275000, change: 28.9, trend: 'up' },
    lastUpdated: "2024-01-08T09:00:00Z",
    ticketSales: {
      daily: 234,
      weekly: 1456,
      monthly: 5789,
      revenue: generateDailyRevenue(30, 1200).map(d => d.value),
      dates: generateDailyRevenue(30, 1200).map(d => d.date)
    },
    redemptionRate: 0.87,
    salesByType: [
      { name: 'Day Pass', value: 45 },
      { name: 'Season Pass', value: 30 },
      { name: 'Multi-Day', value: 25 }
    ]
  };
  
  export const mockRentalsData: RentalsFinancialData = {
    id: "r1",
    vendorId: "3",
    vendorName: "Mountain Rentals",
    vendorType: "rentals",
    period: "2024-01",
    availableBalance: { value: 15000, change: 8.9, trend: 'up' },
    pendingBalance: { value: 2500, change: -1.2, trend: 'down' },
    lifetimeRevenue: { value: 89000, change: 12.4, trend: 'up' },
    lastUpdated: "2024-01-08T09:00:00Z",
    rentalMetrics: {
      activeRentals: 78,
      overdueRentals: 3,
      maintenanceCosts: 1200,
      utilization: 0.82,
      revenue: generateDailyRevenue(30, 500).map(d => d.value),
      dates: generateDailyRevenue(30, 500).map(d => d.date)
    },
    equipmentValue: 125000
  };
  
  export const mockLessonsData: LessonsFinancialData = {
    id: "l1",
    vendorId: "4",
    vendorName: "Pro Lessons",
    vendorType: "lessons",
    period: "2024-01",
    availableBalance: { value: 18000, change: 15.7, trend: 'up' },
    pendingBalance: { value: 3500, change: 2.8, trend: 'up' },
    lifetimeRevenue: { value: 95000, change: 18.9, trend: 'up' },
    lastUpdated: "2024-01-08T09:00:00Z",
    lessonMetrics: {
      completedLessons: 89,
      upcomingLessons: 34,
      canceledLessons: 5,
      revenue: generateDailyRevenue(30, 600).map(d => d.value),
      dates: generateDailyRevenue(30, 600).map(d => d.date)
    },
    instructorPayouts: 45000,
    studentRetentionRate: 0.76
  };
  
  export const mockAggregateData: AggregateFinancialData = {
    totalBalance: { value: 103000, change: 15.1, trend: 'up' },
    totalPending: { value: 18500, change: 1.2, trend: 'up' },
    totalRevenue: { value: 584000, change: 18.9, trend: 'up' },
    revenueByType: [
      { name: 'Tours', value: 125000 },
      { name: 'Tickets', value: 275000 },
      { name: 'Rentals', value: 89000 },
      { name: 'Lessons', value: 95000 }
    ],
    dailyRevenue: generateDailyRevenue(30, 3000).map(day => ({
      date: day.date,
      tours: Math.random() * 1000,
      tickets: Math.random() * 1500,
      rentals: Math.random() * 800,
      lessons: Math.random() * 600
    }))
  };
  
  export const mockVendorFinancialData = [
    mockToursData,
    mockTicketsData,
    mockRentalsData,
    mockLessonsData
  ];
----------------------------------------

// ./src/app/[language]/finance/finance-types.ts
----------------------------------------
export interface FinancialMetric {
    value: number;
    change: number;
    trend: 'up' | 'down' | 'neutral';
  }
  
  export interface BaseFinancialData {
    id: string;
    vendorId: string;
    vendorName: string;
    vendorType: 'tours' | 'tickets' | 'rentals' | 'lessons';
    period: string;
    availableBalance: FinancialMetric;
    pendingBalance: FinancialMetric;
    lifetimeRevenue: FinancialMetric;
    lastUpdated: string;
  }
  
  export interface ToursFinancialData extends BaseFinancialData {
    vendorType: 'tours';
    tourBookings: {
      completed: number;
      upcoming: number;
      canceled: number;
      revenue: number[];
      dates: string[];
    };
    customerSatisfaction: number;
    averageBookingValue: number;
  }
  
  export interface TicketsFinancialData extends BaseFinancialData {
    vendorType: 'tickets';
    ticketSales: {
      daily: number;
      weekly: number;
      monthly: number;
      revenue: number[];
      dates: string[];
    };
    redemptionRate: number;
    salesByType: {
      name: string;
      value: number;
    }[];
  }
  
  export interface RentalsFinancialData extends BaseFinancialData {
    vendorType: 'rentals';
    rentalMetrics: {
      activeRentals: number;
      overdueRentals: number;
      maintenanceCosts: number;
      utilization: number;
      revenue: number[];
      dates: string[];
    };
    equipmentValue: number;
  }
  
  export interface LessonsFinancialData extends BaseFinancialData {
    vendorType: 'lessons';
    lessonMetrics: {
      completedLessons: number;
      upcomingLessons: number;
      canceledLessons: number;
      revenue: number[];
      dates: string[];
    };
    instructorPayouts: number;
    studentRetentionRate: number;
  }
  
  export type VendorFinancialData = ToursFinancialData | TicketsFinancialData | RentalsFinancialData | LessonsFinancialData;
  
  export interface AggregateFinancialData {
    totalBalance: FinancialMetric;
    totalPending: FinancialMetric;
    totalRevenue: FinancialMetric;
    revenueByType: {
      name: string;
      value: number;
    }[];
    dailyRevenue: {
      date: string;
      tours: number;
      tickets: number;
      rentals: number;
      lessons: number;
    }[];
  }
----------------------------------------

// ./src/app/[language]/vendor/mock-data.ts
----------------------------------------
import { VendorProfileDetails } from "@/types/vendor-types";
const skiPackageMaintenance = [
  {
    id: "m1",
    startDate: "2024-01-01",
    endDate: "2024-01-02",
    reason: "Weekly edge sharpening and waxing",
    itemCount: 6,
  },
  {
    id: "m2",
    startDate: "2024-01-08",
    endDate: "2024-01-09",
    reason: "Regular maintenance and inspection",
    itemCount: 6,
  },
];
const snowboardMaintenance = [
  {
    id: "m3",
    startDate: "2024-01-03",
    endDate: "2024-01-04",
    reason: "Bi-weekly edge check and waxing",
    itemCount: 4,
  },
  {
    id: "m4",
    startDate: "2024-01-17",
    endDate: "2024-01-18",
    reason: "Regular maintenance and inspection",
    itemCount: 4,
  },
];
export const mockVendorDetails: VendorProfileDetails[] = [
  {
    id: "1",
    name: "Mountain Edge Rentals",
    type: "rentals",
    description:
      "Premium ski and snowboard rental shop with the latest equipment",
    status: "published",
    lastUpdated: "2024-01-07",
    rentals: [
      {
        id: "r1",
        name: "Premium Ski Package",
        category: "Ski Equipment",
        description:
          "High-performance ski set including boots, poles, and helmet",
        images: ["/img/ski-1.jpg", "/img/ski-2.jpg"],
        totalUnits: 6,
        availableUnits: 3,
        bookedUnits: 2,
        dueOut: 1,
        dueIn: 2,
        sizes: [
          {
            id: "ski-150",
            label: "150cm",
            available: 1,
            total: 2,
            pricePerHour: 20,
            pricePerDay: 75,
            pricePerWeek: 400,
          },
          {
            id: "ski-160",
            label: "160cm",
            available: 2,
            total: 2,
            pricePerHour: 20,
            pricePerDay: 75,
            pricePerWeek: 400,
          },
          {
            id: "ski-170",
            label: "170cm",
            available: 0,
            total: 2,
            pricePerHour: 20,
            pricePerDay: 75,
            pricePerWeek: 400,
          },
        ],
        condition: "excellent",
        lastServiced: "2024-01-01",
        maintenanceSchedule: skiPackageMaintenance,
      },
      {
        id: "r2",
        name: "Beginner Ski Package",
        category: "Ski Equipment",
        description: "Mid-Range ski set including boots, poles, and helmet",
        images: ["/img/ski-3.jpg", "/img/ski-4.jpg"],
        totalUnits: 3,
        availableUnits: 2,
        bookedUnits: 1,
        dueOut: 1,
        dueIn: 2,
        sizes: [
          {
            id: "ski-150",
            label: "150cm",
            available: 1,
            total: 2,
            pricePerHour: 20,
            pricePerDay: 75,
            pricePerWeek: 400,
          },
          {
            id: "ski-160",
            label: "160cm",
            available: 2,
            total: 2,
            pricePerHour: 20,
            pricePerDay: 75,
            pricePerWeek: 400,
          },
          {
            id: "ski-170",
            label: "170cm",
            available: 0,
            total: 2,
            pricePerHour: 20,
            pricePerDay: 75,
            pricePerWeek: 400,
          },
        ],
        condition: "excellent",
        lastServiced: "2024-01-01",
        maintenanceSchedule: skiPackageMaintenance,
      },
      {
        id: "r3",
        name: "Beginner Snowboard Package",
        category: "Snowboard Equipment",
        description: "Entry-level snowboard set with boots and helmet",
        images: ["/img/snowboard-1.jpg", "/img/snowboard-2.jpg"],
        totalUnits: 4,
        availableUnits: 2,
        bookedUnits: 1,
        dueOut: 1,
        dueIn: 1,
        sizes: [
          {
            id: "sb-145",
            label: "145cm",
            available: 1,
            total: 2,
            pricePerHour: 18,
            pricePerDay: 65,
            pricePerWeek: 350,
          },
          {
            id: "sb-155",
            label: "155cm",
            available: 1,
            total: 2,
            pricePerHour: 18,
            pricePerDay: 65,
            pricePerWeek: 350,
          },
        ],
        condition: "good",
        lastServiced: "2024-01-03",
        maintenanceSchedule: snowboardMaintenance,
      },
      {
        id: "r4",
        name: "Intermediate Snowboard Package",
        category: "Snowboard Equipment",
        description: "Mid-Range snowboard set with boots and helmet",
        images: ["/img/snowboard-3.jpg", "/img/snowboard-4.jpg"],
        totalUnits: 4,
        availableUnits: 2,
        bookedUnits: 1,
        dueOut: 1,
        dueIn: 1,
        sizes: [
          {
            id: "sb-145",
            label: "145cm",
            available: 1,
            total: 2,
            pricePerHour: 18,
            pricePerDay: 65,
            pricePerWeek: 350,
          },
          {
            id: "sb-155",
            label: "155cm",
            available: 1,
            total: 2,
            pricePerHour: 18,
            pricePerDay: 65,
            pricePerWeek: 350,
          },
        ],
        condition: "good",
        lastServiced: "2024-01-03",
        maintenanceSchedule: snowboardMaintenance,
      },
      {
        id: "r5",
        name: "Premium Snowboard Package",
        category: "Snowboard Equipment",
        description: "High-performance snowboard set with boots and helmet",
        images: ["/img/snowboard-5.jpg", "/img/snowboard-6.jpg"],
        totalUnits: 4,
        availableUnits: 2,
        bookedUnits: 1,
        dueOut: 1,
        dueIn: 1,
        sizes: [
          {
            id: "sb-145",
            label: "145cm",
            available: 1,
            total: 2,
            pricePerHour: 18,
            pricePerDay: 65,
            pricePerWeek: 350,
          },
          {
            id: "sb-155",
            label: "155cm",
            available: 1,
            total: 2,
            pricePerHour: 18,
            pricePerDay: 65,
            pricePerWeek: 350,
          },
        ],
        condition: "good",
        lastServiced: "2024-01-03",
        maintenanceSchedule: snowboardMaintenance,
      },
    ],
  },
  {
    id: "2",
    name: "Peak Pass Sales",
    type: "tickets",
    description:
      "Official vendor for seasonal and daily ski passes to Mountain Resort",
    status: "published",
    lastUpdated: "2024-01-06",
    tickets: [
      {
        id: "t1",
        name: "Full Season Pass 2024",
        type: "season-pass",
        description: "Unlimited access for the entire 2024 winter season",
        price: 899,
        validFrom: "2024-11-15",
        validTo: "2025-04-15",
        soldCount: 45,
        availableCount: 55,
        benefits: [
          "Priority lift access",
          "10% off rentals",
          "Free parking",
          "Bring a friend tickets (3x)",
        ],
        restrictions: "Non-transferable, photo ID required",
      },
      {
        id: "t2",
        name: "Weekend Day Pass",
        type: "day-pass",
        description: "Full day access to all lifts and facilities",
        price: 89,
        validFrom: "2024-01-01",
        validTo: "2024-04-15",
        soldCount: 34,
        availableCount: 40,
        benefits: ["Same-day lift access", "Basic insurance coverage"],
        restrictions: "Valid only for date of purchase",
      },
      {
        id: "t3",
        name: "Weekday Afternoon Pass",
        type: "half-day",
        description: "Access from 12:30 PM until closing",
        price: 59,
        validFrom: "2024-01-01",
        validTo: "2024-04-15",
        soldCount: 22,
        availableCount: 30,
        benefits: ["Afternoon lift access", "Basic insurance coverage"],
        restrictions: "Valid Monday-Friday only, excluding holidays",
      },
    ],
  },
  {
    id: "3",
    name: "Pro Snowboarding Lessons",
    type: "lessons",
    description:
      "Professional snowboarding instruction from certified instructors",
    status: "published",
    lastUpdated: "2024-01-05",
    lessons: [
      {
        id: "l1",
        name: "Private Beginner Lesson",
        instructor: "Jake Burton",
        duration: "2 hours",
        price: 150,
        status: "available",
        expertise: "Level 3 Certified Instructor",
        languages: ["English", "Spanish"],
        maxStudents: 1,
        includes: [
          "Basic technique",
          "Safety instruction",
          "Equipment guidance",
        ],
        requirements: "No prior experience needed",
      },
      {
        id: "l2",
        name: "Group Intermediate Session",
        instructor: "Sarah Palmer",
        duration: "3 hours",
        price: 89,
        status: "booked",
        scheduledDate: "2024-01-15",
        expertise: "Level 2 Certified Instructor",
        languages: ["English"],
        maxStudents: 4,
        includes: ["Advanced turning", "Speed control", "Terrain adaptation"],
        requirements: "Must be comfortable on blue runs",
      },
      {
        id: "l3",
        name: "Advanced Terrain Park",
        instructor: "Tom Ridge",
        duration: "4 hours",
        price: 199,
        status: "requested",
        expertise: "Freestyle Specialist Level 2",
        languages: ["English", "French"],
        maxStudents: 2,
        includes: ["Jump techniques", "Rail safety", "Trick progression"],
        requirements:
          "Must be proficient on black runs and basic park features",
      },
    ],
  },
  {
    id: "4",
    name: "Alpine Adventure Tours",
    type: "tours" as const,
    description:
      "Professional guided tours through the most scenic mountain trails and adventures",
    status: "published" as const,
    lastUpdated: "2024-01-04",
    tours: [
      {
        id: "tr1",
        name: "Backcountry Powder Adventure",
        description:
          "Expert-led backcountry tour to pristine powder locations with stunning views",
        duration: "6 hours",
        price: 299,
        maxParticipants: 4,
        difficulty: "advanced",
        rating: 4.8,
        totalReviews: 24,
        seasonalAvailability: {
          startDate: "2024-11-15",
          endDate: "2025-04-15",
        },
        requirements: [
          "Advanced skiing/riding ability",
          "Proper winter clothing",
          "Basic avalanche safety knowledge",
        ],
        includes: [
          "Safety equipment rental",
          "Hot lunch",
          "Transportation to/from resort",
          "Professional photos",
        ],
        meetingPoint: {
          name: "Main Lodge",
          coordinates: {
            lat: 39.1911,
            lng: -106.8175,
          },
          description: "Meet at the fireplace in Main Lodge lobby",
        },
        guide: {
          id: "g1",
          name: "Mike Thompson",
          photo: "/img/guides/mike-thompson.jpg",
          certifications: [
            "AMGA Ski Guide",
            "Wilderness First Responder",
            "Avalanche Level 3 Certified",
          ],
          experience: "15 years backcountry guiding",
          languages: ["English", "Spanish"],
          specialties: [
            "Backcountry Skiing",
            "Avalanche Safety",
            "Alpine Climbing",
          ],
          availability: "full-time",
          rating: 4.9,
          totalTours: 156,
        },
        schedule: [
          {
            id: "s1",
            productId: "tr1",
            date: "2024-01-15",
            startTime: "08:00",
            endTime: "14:00",
            status: "available",
            currentBookings: 2,
            meetingPoint: "Main Lodge",
            guideId: "g1",
            weatherForecast: {
              condition: "sunny",
              temperature: 28,
              snowCondition: "powder",
            },
            notes: "Perfect conditions expected",
          },
          {
            id: "s2",
            productId: "tr1",
            date: "2024-01-16",
            startTime: "08:00",
            endTime: "14:00",
            status: "booked",
            currentBookings: 4,
            meetingPoint: "Main Lodge",
            guideId: "g1",
            weatherForecast: {
              condition: "partly cloudy",
              temperature: 25,
              snowCondition: "packed powder",
            },
            notes: "Group booking - Johnson Family",
          },
        ],
      },
      {
        id: "tr2",
        name: "Sunset Mountain Photography Tour",
        description:
          "Capture the magic of mountain sunsets with professional photography instruction",
        duration: "3 hours",
        price: 149,
        maxParticipants: 6,
        difficulty: "beginner",
        rating: 4.9,
        totalReviews: 32,
        seasonalAvailability: {
          startDate: "2024-01-01",
          endDate: "2024-12-31",
        },
        requirements: [
          "Basic fitness level",
          "Warm clothing",
          "Camera (can be provided)",
        ],
        includes: [
          "Professional photography instruction",
          "Hot beverages",
          "Camera rental if needed",
          "Digital photo package",
        ],
        meetingPoint: {
          name: "Photography Center",
          coordinates: {
            lat: 39.1922,
            lng: -106.8183,
          },
          description: "Meet at the Photography Center next to the ski school",
        },
        guide: {
          id: "g2",
          name: "Sarah Chen",
          photo: "/img/guides/sarah-chen.jpg",
          certifications: [
            "Professional Photographer",
            "Wilderness Guide",
            "First Aid Certified",
          ],
          experience: "8 years mountain photography",
          languages: ["English", "Mandarin"],
          specialties: [
            "Landscape Photography",
            "Night Sky Photography",
            "Wildlife Photography",
          ],
          availability: "part-time",
          rating: 4.9,
          totalTours: 245,
        },
        schedule: [
          {
            id: "s3",
            productId: "tr2",
            date: "2024-01-15",
            startTime: "15:00",
            endTime: "18:00",
            status: "available",
            currentBookings: 3,
            meetingPoint: "Photography Center",
            guideId: "g2",
            weatherForecast: {
              condition: "clear",
              temperature: 32,
              sunset: "17:42",
            },
            notes: "Perfect sunset conditions expected",
          },
          {
            id: "s4",
            productId: "tr2",
            date: "2024-01-17",
            startTime: "15:00",
            endTime: "18:00",
            status: "available",
            currentBookings: 2,
            meetingPoint: "Photography Center",
            guideId: "g2",
            weatherForecast: {
              condition: "partly cloudy",
              temperature: 30,
              sunset: "17:43",
            },
            notes: "Dramatic clouds should make for great photos",
          },
        ],
      },
      {
        id: "tr3",
        name: "Family Mountain Discovery Tour",
        description:
          "A fun, educational tour perfect for families to learn about mountain ecosystems",
        duration: "4 hours",
        price: 199,
        maxParticipants: 8,
        difficulty: "beginner",
        rating: 4.7,
        totalReviews: 18,
        seasonalAvailability: {
          startDate: "2024-05-15",
          endDate: "2024-10-15",
        },
        requirements: [
          "Suitable for all ages",
          "Comfortable walking shoes",
          "Water bottle",
        ],
        includes: [
          "Nature guide booklet",
          "Snacks and refreshments",
          "Wildlife spotting equipment",
          "Educational materials",
        ],
        meetingPoint: {
          name: "Nature Center",
          coordinates: {
            lat: 39.19,
            lng: -106.817,
          },
          description: "Meet at the Nature Center main entrance",
        },
        guide: {
          id: "g3",
          name: "David Miller",
          photo: "/img/guides/david-miller.jpg",
          certifications: [
            "Environmental Educator",
            "Wildlife Guide",
            "First Aid Certified",
          ],
          experience: "12 years nature education",
          languages: ["English", "German"],
          specialties: [
            "Family Tours",
            "Wildlife Education",
            "Plant Identification",
          ],
          availability: "full-time",
          rating: 4.8,
          totalTours: 312,
        },
        schedule: [
          {
            id: "s5",
            productId: "tr3",
            date: "2024-06-15",
            startTime: "09:00",
            endTime: "13:00",
            status: "available",
            currentBookings: 4,
            meetingPoint: "Nature Center",
            guideId: "g3",
            weatherForecast: {
              condition: "sunny",
              temperature: 65,
              chanceOfRain: 0,
            },
            notes: "Wildlife activity high in morning hours",
          },
        ],
      },
    ],
  },
];
----------------------------------------

// ./src/app/[language]/admin-panel/page-content.tsx
----------------------------------------
"use client";
import { RoleEnum } from "@/services/api/types/role";
import withPageRequiredAuth from "@/services/auth/with-page-required-auth";
import { useTranslation } from "@/services/i18n/client";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
function AdminPanel() {
  const { t } = useTranslation("admin-panel-home");
  return (
    <Container maxWidth="md">
      <Grid container spacing={3} wrap="nowrap" pt={3}>
        <Grid>
          <Typography variant="h3" gutterBottom>
            {t("title")}
          </Typography>
          <Typography>{t("description")}</Typography>
        </Grid>
      </Grid>
    </Container>
  );
}
export default withPageRequiredAuth(AdminPanel, { roles: [RoleEnum.ADMIN] });
----------------------------------------

// ./src/app/[language]/admin-panel/page.tsx
----------------------------------------
import type { Metadata } from "next";
import { getServerTranslation } from "@/services/i18n";
import AdminPanel from "./page-content";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(params.language, "admin-panel-home");
  return {
    title: t("title"),
  };
}
export default function Page() {
  return <AdminPanel />;
}
----------------------------------------

// ./src/app/[language]/admin-panel/users/create/page-content.tsx
----------------------------------------
"use client";
import Button from "@mui/material/Button";
import { useForm, FormProvider, useFormState } from "react-hook-form";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import FormTextInput from "@/components/form/text-input/form-text-input";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import withPageRequiredAuth from "@/services/auth/with-page-required-auth";
import { useSnackbar } from "@/hooks/use-snackbar";
import Link from "@/components/link";
import FormAvatarInput from "@/components/form/avatar-input/form-avatar-input";
import { FileEntity } from "@/services/api/types/file-entity";
import useLeavePage from "@/services/leave-page/use-leave-page";
import Box from "@mui/material/Box";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import { useTranslation } from "@/services/i18n/client";
import { usePostUserService } from "@/services/api/services/users";
import { useRouter } from "next/navigation";
import { Role, RoleEnum } from "@/services/api/types/role";
import FormSelectInput from "@/components/form/select/form-select";
type CreateUserFormData = {
  email: string;
  firstName: string;
  lastName: string;
  password: string;
  passwordConfirmation: string;
  photo?: FileEntity;
  role: Role;
};
const useValidationSchema = () => {
  const { t } = useTranslation("admin-panel-users-create");
  return yup.object().shape({
    email: yup
      .string()
      .email(t("admin-panel-users-create:inputs.email.validation.invalid"))
      .required(
        t("admin-panel-users-create:inputs.firstName.validation.required")
      ),
    firstName: yup
      .string()
      .required(
        t("admin-panel-users-create:inputs.firstName.validation.required")
      ),
    lastName: yup
      .string()
      .required(
        t("admin-panel-users-create:inputs.lastName.validation.required")
      ),
    password: yup
      .string()
      .min(6, t("admin-panel-users-create:inputs.password.validation.min"))
      .required(
        t("admin-panel-users-create:inputs.password.validation.required")
      ),
    passwordConfirmation: yup
      .string()
      .oneOf(
        [yup.ref("password")],
        t(
          "admin-panel-users-create:inputs.passwordConfirmation.validation.match"
        )
      )
      .required(
        t(
          "admin-panel-users-create:inputs.passwordConfirmation.validation.required"
        )
      ),
    role: yup
      .object()
      .shape({
        id: yup.mixed<string | number>().required(),
        name: yup.string(),
      })
      .required(t("admin-panel-users-create:inputs.role.validation.required")),
  });
};
function CreateUserFormActions() {
  const { t } = useTranslation("admin-panel-users-create");
  const { isSubmitting, isDirty } = useFormState();
  useLeavePage(isDirty);
  return (
    <Button
      variant="contained"
      color="primary"
      type="submit"
      disabled={isSubmitting}
    >
      {t("admin-panel-users-create:actions.submit")}
    </Button>
  );
}
function FormCreateUser() {
  const router = useRouter();
  const fetchPostUser = usePostUserService();
  const { t } = useTranslation("admin-panel-users-create");
  const validationSchema = useValidationSchema();
  const { enqueueSnackbar } = useSnackbar();
  const methods = useForm<CreateUserFormData>({
    resolver: yupResolver(validationSchema),
    defaultValues: {
      email: "",
      firstName: "",
      lastName: "",
      password: "",
      passwordConfirmation: "",
      role: {
        id: RoleEnum.USER,
      },
      photo: undefined,
    },
  });
  const { handleSubmit, setError } = methods;
  const onSubmit = handleSubmit(async (formData) => {
    const { data, status } = await fetchPostUser(formData);
    if (status === HTTP_CODES_ENUM.UNPROCESSABLE_ENTITY) {
      (Object.keys(data.errors) as Array<keyof CreateUserFormData>).forEach(
        (key) => {
          setError(key, {
            type: "manual",
            message: t(
              `admin-panel-users-create:inputs.${key}.validation.server.${data.errors[key]}`
            ),
          });
        }
      );
      return;
    }
    if (status === HTTP_CODES_ENUM.CREATED) {
      enqueueSnackbar(t("admin-panel-users-create:alerts.user.success"), {
        variant: "success",
      });
      router.push("/admin-panel/users");
    }
  });
  return (
    <FormProvider {...methods}>
      <Container maxWidth="xs">
        <form onSubmit={onSubmit} autoComplete="create-new-user">
          <Grid container spacing={2} mb={3} mt={3}>
            <Grid size={{ xs: 12 }}>
              <Typography variant="h6">
                {t("admin-panel-users-create:title")}
              </Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormAvatarInput<CreateUserFormData>
                name="photo"
                testId="photo"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<CreateUserFormData>
                name="email"
                testId="new-user-email"
                autoComplete="new-user-email"
                label={t("admin-panel-users-create:inputs.email.label")}
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<CreateUserFormData>
                name="password"
                type="password"
                testId="new-user-password"
                autoComplete="new-user-password"
                label={t("admin-panel-users-create:inputs.password.label")}
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<CreateUserFormData>
                name="passwordConfirmation"
                testId="new-user-password-confirmation"
                label={t(
                  "admin-panel-users-create:inputs.passwordConfirmation.label"
                )}
                type="password"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<CreateUserFormData>
                name="firstName"
                testId="first-name"
                label={t("admin-panel-users-create:inputs.firstName.label")}
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<CreateUserFormData>
                name="lastName"
                testId="last-name"
                label={t("admin-panel-users-create:inputs.lastName.label")}
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormSelectInput<CreateUserFormData, Pick<Role, "id">>
                name="role"
                testId="role"
                label={t("admin-panel-users-create:inputs.role.label")}
                options={[
                  {
                    id: RoleEnum.ADMIN,
                  },
                  {
                    id: RoleEnum.USER,
                  },
                ]}
                keyValue="id"
                renderOption={(option) =>
                  t(`admin-panel-users-create:inputs.role.options.${option.id}`)
                }
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <CreateUserFormActions />
              <Box ml={1} component="span">
                <Button
                  variant="contained"
                  color="inherit"
                  LinkComponent={Link}
                  href="/admin-panel/users"
                >
                  {t("admin-panel-users-create:actions.cancel")}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Container>
    </FormProvider>
  );
}
function CreateUser() {
  return <FormCreateUser />;
}
export default withPageRequiredAuth(CreateUser);
----------------------------------------

// ./src/app/[language]/admin-panel/users/create/page.tsx
----------------------------------------
import type { Metadata } from "next";
import CreateUser from "./page-content";
import { getServerTranslation } from "@/services/i18n";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(
    params.language,
    "admin-panel-users-create"
  );
  return {
    title: t("title"),
  };
}
export default function Page() {
  return <CreateUser />;
}
----------------------------------------

// ./src/app/[language]/admin-panel/users/edit/[id]/page-content.tsx
----------------------------------------
"use client";
import Button from "@mui/material/Button";
import { useForm, FormProvider, useFormState } from "react-hook-form";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import FormTextInput from "@/components/form/text-input/form-text-input";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import withPageRequiredAuth from "@/services/auth/with-page-required-auth";
import { useEffect } from "react";
import { useSnackbar } from "@/hooks/use-snackbar";
import Link from "@/components/link";
import FormAvatarInput from "@/components/form/avatar-input/form-avatar-input";
import { FileEntity } from "@/services/api/types/file-entity";
import useLeavePage from "@/services/leave-page/use-leave-page";
import Box from "@mui/material/Box";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import { useTranslation } from "@/services/i18n/client";
import {
  useGetUserService,
  usePatchUserService,
} from "@/services/api/services/users";
import { useParams } from "next/navigation";
import { Role, RoleEnum } from "@/services/api/types/role";
import FormSelectInput from "@/components/form/select/form-select";
type EditUserFormData = {
  email: string;
  firstName: string;
  lastName: string;
  photo?: FileEntity;
  role: Role;
};
type ChangeUserPasswordFormData = {
  password: string;
  passwordConfirmation: string;
};
const useValidationEditUserSchema = () => {
  const { t } = useTranslation("admin-panel-users-edit");
  return yup.object().shape({
    email: yup
      .string()
      .email(t("admin-panel-users-edit:inputs.email.validation.invalid"))
      .required(
        t("admin-panel-users-edit:inputs.firstName.validation.required")
      ),
    firstName: yup
      .string()
      .required(
        t("admin-panel-users-edit:inputs.firstName.validation.required")
      ),
    lastName: yup
      .string()
      .required(
        t("admin-panel-users-edit:inputs.lastName.validation.required")
      ),
    role: yup
      .object()
      .shape({
        id: yup.mixed<string | number>().required(),
        name: yup.string(),
      })
      .required(t("admin-panel-users-edit:inputs.role.validation.required")),
  });
};
const useValidationChangePasswordSchema = () => {
  const { t } = useTranslation("admin-panel-users-edit");
  return yup.object().shape({
    password: yup
      .string()
      .min(6, t("admin-panel-users-edit:inputs.password.validation.min"))
      .required(
        t("admin-panel-users-edit:inputs.password.validation.required")
      ),
    passwordConfirmation: yup
      .string()
      .oneOf(
        [yup.ref("password")],
        t("admin-panel-users-edit:inputs.passwordConfirmation.validation.match")
      )
      .required(
        t(
          "admin-panel-users-edit:inputs.passwordConfirmation.validation.required"
        )
      ),
  });
};
function EditUserFormActions() {
  const { t } = useTranslation("admin-panel-users-edit");
  const { isSubmitting, isDirty } = useFormState();
  useLeavePage(isDirty);
  return (
    <Button
      variant="contained"
      color="primary"
      type="submit"
      disabled={isSubmitting}
    >
      {t("admin-panel-users-edit:actions.submit")}
    </Button>
  );
}
function ChangePasswordUserFormActions() {
  const { t } = useTranslation("admin-panel-users-edit");
  const { isSubmitting, isDirty } = useFormState();
  useLeavePage(isDirty);
  return (
    <Button
      variant="contained"
      color="primary"
      type="submit"
      disabled={isSubmitting}
    >
      {t("admin-panel-users-edit:actions.submit")}
    </Button>
  );
}
function FormEditUser() {
  const params = useParams<{ id: string }>();
  const userId = params.id;
  const fetchGetUser = useGetUserService();
  const fetchPatchUser = usePatchUserService();
  const { t } = useTranslation("admin-panel-users-edit");
  const validationSchema = useValidationEditUserSchema();
  const { enqueueSnackbar } = useSnackbar();
  const methods = useForm<EditUserFormData>({
    resolver: yupResolver(validationSchema),
    defaultValues: {
      email: "",
      firstName: "",
      lastName: "",
      role: undefined,
      photo: undefined,
    },
  });
  const { handleSubmit, setError, reset } = methods;
  const onSubmit = handleSubmit(async (formData) => {
    const isEmailDirty = methods.getFieldState("email").isDirty;
    const { data, status } = await fetchPatchUser({
      id: userId,
      data: {
        ...formData,
        email: isEmailDirty ? formData.email : undefined,
      },
    });
    if (status === HTTP_CODES_ENUM.UNPROCESSABLE_ENTITY) {
      (Object.keys(data.errors) as Array<keyof EditUserFormData>).forEach(
        (key) => {
          setError(key, {
            type: "manual",
            message: t(
              `admin-panel-users-edit:inputs.${key}.validation.server.${data.errors[key]}`
            ),
          });
        }
      );
      return;
    }
    if (status === HTTP_CODES_ENUM.OK) {
      reset(formData);
      enqueueSnackbar(t("admin-panel-users-edit:alerts.user.success"), {
        variant: "success",
      });
    }
  });
  useEffect(() => {
    const getInitialDataForEdit = async () => {
      const { status, data: user } = await fetchGetUser({ id: userId });
      if (status === HTTP_CODES_ENUM.OK) {
        reset({
          email: user?.email ?? "",
          firstName: user?.firstName ?? "",
          lastName: user?.lastName ?? "",
          role: {
            id: Number(user?.role?.id),
          },
          photo: user?.photo,
        });
      }
    };
    getInitialDataForEdit();
  }, [userId, reset, fetchGetUser]);
  return (
    <FormProvider {...methods}>
      <Container maxWidth="xs">
        <form onSubmit={onSubmit}>
          <Grid container spacing={2} mb={3} mt={3}>
            <Grid size={{ xs: 12 }}>
              <Typography variant="h6">
                {t("admin-panel-users-edit:title1")}
              </Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormAvatarInput<EditUserFormData> name="photo" testId="photo" />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<EditUserFormData>
                name="email"
                testId="email"
                label={t("admin-panel-users-edit:inputs.email.label")}
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<EditUserFormData>
                name="firstName"
                testId="first-name"
                label={t("admin-panel-users-edit:inputs.firstName.label")}
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<EditUserFormData>
                name="lastName"
                testId="last-name"
                label={t("admin-panel-users-edit:inputs.lastName.label")}
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormSelectInput<EditUserFormData, Pick<Role, "id">>
                name="role"
                testId="role"
                label={t("admin-panel-users-edit:inputs.role.label")}
                options={[
                  {
                    id: RoleEnum.ADMIN,
                  },
                  {
                    id: RoleEnum.USER,
                  },
                ]}
                keyValue="id"
                renderOption={(option) =>
                  t(`admin-panel-users-edit:inputs.role.options.${option.id}`)
                }
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <EditUserFormActions />
              <Box ml={1} component="span">
                <Button
                  variant="contained"
                  color="inherit"
                  LinkComponent={Link}
                  href="/admin-panel/users"
                >
                  {t("admin-panel-users-edit:actions.cancel")}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Container>
    </FormProvider>
  );
}
function FormChangePasswordUser() {
  const params = useParams<{ id: string }>();
  const userId = params.id;
  const fetchPatchUser = usePatchUserService();
  const { t } = useTranslation("admin-panel-users-edit");
  const validationSchema = useValidationChangePasswordSchema();
  const { enqueueSnackbar } = useSnackbar();
  const methods = useForm<ChangeUserPasswordFormData>({
    resolver: yupResolver(validationSchema),
    defaultValues: {
      password: "",
      passwordConfirmation: "",
    },
  });
  const { handleSubmit, setError, reset } = methods;
  const onSubmit = handleSubmit(async (formData) => {
    const { data, status } = await fetchPatchUser({
      id: userId,
      data: formData,
    });
    if (status === HTTP_CODES_ENUM.UNPROCESSABLE_ENTITY) {
      (
        Object.keys(data.errors) as Array<keyof ChangeUserPasswordFormData>
      ).forEach((key) => {
        setError(key, {
          type: "manual",
          message: t(
            `admin-panel-users-edit:inputs.${key}.validation.server.${data.errors[key]}`
          ),
        });
      });
      return;
    }
    if (status === HTTP_CODES_ENUM.OK) {
      reset();
      enqueueSnackbar(t("admin-panel-users-edit:alerts.password.success"), {
        variant: "success",
      });
    }
  });
  return (
    <FormProvider {...methods}>
      <Container maxWidth="xs">
        <form onSubmit={onSubmit}>
          <Grid container spacing={2} mb={3} mt={3}>
            <Grid size={{ xs: 12 }}>
              <Typography variant="h6">
                {t("admin-panel-users-edit:title2")}
              </Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<ChangeUserPasswordFormData>
                name="password"
                type="password"
                label={t("admin-panel-users-edit:inputs.password.label")}
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<ChangeUserPasswordFormData>
                name="passwordConfirmation"
                label={t(
                  "admin-panel-users-edit:inputs.passwordConfirmation.label"
                )}
                type="password"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <ChangePasswordUserFormActions />
              <Box ml={1} component="span">
                <Button
                  variant="contained"
                  color="inherit"
                  LinkComponent={Link}
                  href="/admin-panel/users"
                >
                  {t("admin-panel-users-edit:actions.cancel")}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Container>
    </FormProvider>
  );
}
function EditUser() {
  return (
    <>
      <FormEditUser />
      <FormChangePasswordUser />
    </>
  );
}
export default withPageRequiredAuth(EditUser);
----------------------------------------

// ./src/app/[language]/admin-panel/users/edit/[id]/page.tsx
----------------------------------------
import type { Metadata } from "next";
import EditUser from "./page-content";
import { getServerTranslation } from "@/services/i18n";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(
    params.language,
    "admin-panel-users-edit"
  );
  return {
    title: t("title1"),
  };
}
export default function Page() {
  return <EditUser />;
}
----------------------------------------

// ./src/app/[language]/admin-panel/users/page-content.tsx
----------------------------------------
"use client";
import { RoleEnum } from "@/services/api/types/role";
import withPageRequiredAuth from "@/services/auth/with-page-required-auth";
import { useTranslation } from "@/services/i18n/client";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import {
  PropsWithChildren,
  useCallback,
  useMemo,
  useRef,
  useState,
} from "react";
import { useUserListQuery, usersQueryKeys } from "./queries/users-queries";
import { TableVirtuoso } from "react-virtuoso";
import TableCell from "@mui/material/TableCell";
import TableRow from "@mui/material/TableRow";
import Avatar from "@mui/material/Avatar";
import LinearProgress from "@mui/material/LinearProgress";
import { styled } from "@mui/material/styles";
import TableComponents from "@/components/table/table-components";
import ButtonGroup from "@mui/material/ButtonGroup";
import Button from "@mui/material/Button";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import ClickAwayListener from "@mui/material/ClickAwayListener";
import Grow from "@mui/material/Grow";
import Paper from "@mui/material/Paper";
import Popper from "@mui/material/Popper";
import MenuItem from "@mui/material/MenuItem";
import MenuList from "@mui/material/MenuList";
import { User } from "@/services/api/types/user";
import Link from "@/components/link";
import useAuth from "@/services/auth/use-auth";
import useConfirmDialog from "@/components/confirm-dialog/use-confirm-dialog";
import { useDeleteUsersService } from "@/services/api/services/users";
import removeDuplicatesFromArrayObjects from "@/services/helpers/remove-duplicates-from-array-of-objects";
import { InfiniteData, useQueryClient } from "@tanstack/react-query";
import UserFilter from "./user-filter";
import { useRouter, useSearchParams } from "next/navigation";
import TableSortLabel from "@mui/material/TableSortLabel";
import { UserFilterType, UserSortType } from "./user-filter-types";
import { SortEnum } from "@/services/api/types/sort-type";
type UsersKeys = keyof User;
const TableCellLoadingContainer = styled(TableCell)(() => ({
  padding: 0,
}));
function TableSortCellWrapper(
  props: PropsWithChildren<{
    width?: number;
    orderBy: UsersKeys;
    order: SortEnum;
    column: UsersKeys;
    handleRequestSort: (
      event: React.MouseEvent<unknown>,
      property: UsersKeys
    ) => void;
  }>
) {
  return (
    <TableCell
      style={{ width: props.width }}
      sortDirection={props.orderBy === props.column ? props.order : false}
    >
      <TableSortLabel
        active={props.orderBy === props.column}
        direction={props.orderBy === props.column ? props.order : SortEnum.ASC}
        onClick={(event) => props.handleRequestSort(event, props.column)}
      >
        {props.children}
      </TableSortLabel>
    </TableCell>
  );
}
function Actions({ user }: { user: User }) {
  const [open, setOpen] = useState(false);
  const { user: authUser } = useAuth();
  const { confirmDialog } = useConfirmDialog();
  const fetchUserDelete = useDeleteUsersService();
  const queryClient = useQueryClient();
  const anchorRef = useRef<HTMLDivElement>(null);
  const canDelete = user.id !== authUser?.id;
  const { t: tUsers } = useTranslation("admin-panel-users");
  const handleToggle = () => {
    setOpen((prevOpen) => !prevOpen);
  };
  const handleClose = (event: Event) => {
    if (
      anchorRef.current &&
      anchorRef.current.contains(event.target as HTMLElement)
    ) {
      return;
    }
    setOpen(false);
  };
  const handleDelete = async () => {
    const isConfirmed = await confirmDialog({
      title: tUsers("admin-panel-users:confirm.delete.title"),
      message: tUsers("admin-panel-users:confirm.delete.message"),
    });
    if (isConfirmed) {
      setOpen(false);
      const searchParams = new URLSearchParams(window.location.search);
      const searchParamsFilter = searchParams.get("filter");
      const searchParamsSort = searchParams.get("sort");
      let filter: UserFilterType | undefined = undefined;
      let sort: UserSortType | undefined = {
        order: SortEnum.DESC,
        orderBy: "id",
      };
      if (searchParamsFilter) {
        filter = JSON.parse(searchParamsFilter);
      }
      if (searchParamsSort) {
        sort = JSON.parse(searchParamsSort);
      }
      const previousData = queryClient.getQueryData<
        InfiniteData<{ nextPage: number; data: User[] }>
      >(usersQueryKeys.list().sub.by({ sort, filter }).key);
      await queryClient.cancelQueries({ queryKey: usersQueryKeys.list().key });
      const newData = {
        ...previousData,
        pages: previousData?.pages.map((page) => ({
          ...page,
          data: page?.data.filter((item) => item.id !== user.id),
        })),
      };
      queryClient.setQueryData(
        usersQueryKeys.list().sub.by({ sort, filter }).key,
        newData
      );
      await fetchUserDelete({
        id: user.id,
      });
    }
  };
  const mainButton = (
    <Button
      size="small"
      variant="contained"
      LinkComponent={Link}
      href={`/admin-panel/users/edit/${user.id}`}
    >
      {tUsers("admin-panel-users:actions.edit")}
    </Button>
  );
  return (
    <>
      {[!canDelete].every(Boolean) ? (
        mainButton
      ) : (
        <ButtonGroup
          variant="contained"
          ref={anchorRef}
          aria-label="split button"
          size="small"
        >
          {mainButton}
          <Button
            size="small"
            aria-controls={open ? "split-button-menu" : undefined}
            aria-expanded={open ? "true" : undefined}
            aria-label="select merge strategy"
            aria-haspopup="menu"
            onClick={handleToggle}
          >
            <ArrowDropDownIcon />
          </Button>
        </ButtonGroup>
      )}
      <Popper
        sx={{
          zIndex: 1,
        }}
        open={open}
        anchorEl={anchorRef.current}
        role={undefined}
        transition
        disablePortal
      >
        {({ TransitionProps, placement }) => (
          <Grow
            {...TransitionProps}
            style={{
              transformOrigin:
                placement === "bottom" ? "center top" : "center bottom",
            }}
          >
            <Paper>
              <ClickAwayListener onClickAway={handleClose}>
                <MenuList id="split-button-menu" autoFocusItem>
                  {canDelete && (
                    <MenuItem
                      sx={{
                        bgcolor: "error.main",
                        color: `var(--mui-palette-common-white)`,
                        "&:hover": {
                          bgcolor: "error.light",
                        },
                      }}
                      onClick={handleDelete}
                    >
                      {tUsers("admin-panel-users:actions.delete")}
                    </MenuItem>
                  )}
                </MenuList>
              </ClickAwayListener>
            </Paper>
          </Grow>
        )}
      </Popper>
    </>
  );
}
function Users() {
  const { t: tUsers } = useTranslation("admin-panel-users");
  const { t: tRoles } = useTranslation("admin-panel-roles");
  const searchParams = useSearchParams();
  const router = useRouter();
  const [{ order, orderBy }, setSort] = useState<{
    order: SortEnum;
    orderBy: UsersKeys;
  }>(() => {
    const searchParamsSort = searchParams.get("sort");
    if (searchParamsSort) {
      return JSON.parse(searchParamsSort);
    }
    return { order: SortEnum.DESC, orderBy: "id" };
  });
  const handleRequestSort = (
    event: React.MouseEvent<unknown>,
    property: UsersKeys
  ) => {
    const isAsc = orderBy === property && order === SortEnum.ASC;
    const searchParams = new URLSearchParams(window.location.search);
    const newOrder = isAsc ? SortEnum.DESC : SortEnum.ASC;
    const newOrderBy = property;
    searchParams.set(
      "sort",
      JSON.stringify({ order: newOrder, orderBy: newOrderBy })
    );
    setSort({
      order: newOrder,
      orderBy: newOrderBy,
    });
    router.push(window.location.pathname + "?" + searchParams.toString());
  };
  const filter = useMemo(() => {
    const searchParamsFilter = searchParams.get("filter");
    if (searchParamsFilter) {
      return JSON.parse(searchParamsFilter) as UserFilterType;
    }
    return undefined;
  }, [searchParams]);
  const { data, hasNextPage, isFetchingNextPage, fetchNextPage } =
    useUserListQuery({ filter, sort: { order, orderBy } });
  const handleScroll = useCallback(() => {
    if (!hasNextPage || isFetchingNextPage) return;
    fetchNextPage();
  }, [hasNextPage, isFetchingNextPage, fetchNextPage]);
  const result = useMemo(() => {
    const result =
      (data?.pages.flatMap((page) => page?.data) as User[]) ?? ([] as User[]);
    return removeDuplicatesFromArrayObjects(result, "id");
  }, [data]);
  return (
    <Container maxWidth="xl">
      <Grid container spacing={3} pt={3}>
        <Grid container spacing={3} size={{ xs: 12 }}>
          <Grid size="grow">
            <Typography variant="h3">
              {tUsers("admin-panel-users:title")}
            </Typography>
          </Grid>
          <Grid container size="auto" wrap="nowrap" spacing={2}>
            <Grid size="auto">
              <UserFilter />
            </Grid>
            <Grid size="auto">
              <Button
                variant="contained"
                LinkComponent={Link}
                href="/admin-panel/users/create"
                color="success"
              >
                {tUsers("admin-panel-users:actions.create")}
              </Button>
            </Grid>
          </Grid>
        </Grid>
        <Grid size={{ xs: 12 }} mb={2}>
          <TableVirtuoso
            style={{ height: 500 }}
            data={result}
            components={TableComponents}
            endReached={handleScroll}
            overscan={20}
            useWindowScroll
            increaseViewportBy={400}
            fixedHeaderContent={() => (
              <>
                <TableRow>
                  <TableCell style={{ width: 50 }}></TableCell>
                  <TableSortCellWrapper
                    width={100}
                    orderBy={orderBy}
                    order={order}
                    column="id"
                    handleRequestSort={handleRequestSort}
                  >
                    {tUsers("admin-panel-users:table.column1")}
                  </TableSortCellWrapper>
                  <TableCell style={{ width: 200 }}>
                    {tUsers("admin-panel-users:table.column2")}
                  </TableCell>
                  <TableSortCellWrapper
                    orderBy={orderBy}
                    order={order}
                    column="email"
                    handleRequestSort={handleRequestSort}
                  >
                    {tUsers("admin-panel-users:table.column3")}
                  </TableSortCellWrapper>
                  <TableCell style={{ width: 80 }}>
                    {tUsers("admin-panel-users:table.column4")}
                  </TableCell>
                  <TableCell style={{ width: 130 }}></TableCell>
                </TableRow>
                {isFetchingNextPage && (
                  <TableRow>
                    <TableCellLoadingContainer colSpan={6}>
                      <LinearProgress />
                    </TableCellLoadingContainer>
                  </TableRow>
                )}
              </>
            )}
            itemContent={(index, user) => (
              <>
                <TableCell style={{ width: 50 }}>
                  <Avatar
                    alt={user?.firstName + " " + user?.lastName}
                    src={user?.photo?.path}
                  />
                </TableCell>
                <TableCell style={{ width: 100 }}>{user?.id}</TableCell>
                <TableCell style={{ width: 200 }}>
                  {user?.firstName} {user?.lastName}
                </TableCell>
                <TableCell>{user?.email}</TableCell>
                <TableCell style={{ width: 80 }}>
                  {tRoles(`role.${user?.role?.id}`)}
                </TableCell>
                <TableCell style={{ width: 130 }}>
                  {!!user && <Actions user={user} />}
                </TableCell>
              </>
            )}
          />
        </Grid>
      </Grid>
    </Container>
  );
}
export default withPageRequiredAuth(Users, { roles: [RoleEnum.ADMIN] });
----------------------------------------

// ./src/app/[language]/admin-panel/users/page.tsx
----------------------------------------
import type { Metadata } from "next";
import { getServerTranslation } from "@/services/i18n";
import Users from "./page-content";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(
    params.language,
    "admin-panel-users"
  );
  return {
    title: t("title"),
  };
}
export default function Page() {
  return <Users />;
}
----------------------------------------

// ./src/app/[language]/admin-panel/users/user-filter-types.tsx
----------------------------------------
import { Role } from "@/services/api/types/role";
import { SortEnum } from "@/services/api/types/sort-type";
import { User } from "@/services/api/types/user";
export type UserFilterType = {
  roles?: Role[];
};
export type UserSortType = {
  orderBy: keyof User;
  order: SortEnum;
};
----------------------------------------

// ./src/app/[language]/admin-panel/users/user-filter.tsx
----------------------------------------
"use client";
import FormMultipleSelectInput from "@/components/form/multiple-select/form-multiple-select";
import { Role, RoleEnum } from "@/services/api/types/role";
import { useTranslation } from "@/services/i18n/client";
import Button from "@mui/material/Button";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Popover from "@mui/material/Popover";
import { useRouter, useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import { FormProvider, useForm } from "react-hook-form";
import { UserFilterType } from "./user-filter-types";
type UserFilterFormData = UserFilterType;
function UserFilter() {
  const { t } = useTranslation("admin-panel-users");
  const router = useRouter();
  const searchParams = useSearchParams();
  const methods = useForm<UserFilterFormData>({
    defaultValues: {
      roles: [],
    },
  });
  const { handleSubmit, reset } = methods;
  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);
  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const open = Boolean(anchorEl);
  const id = open ? "user-filter-popover" : undefined;
  useEffect(() => {
    const filter = searchParams.get("filter");
    if (filter) {
      handleClose();
      const filterParsed = JSON.parse(filter);
      reset(filterParsed);
    }
  }, [searchParams, reset]);
  return (
    <FormProvider {...methods}>
      <Popover
        id={id}
        open={open}
        anchorEl={anchorEl}
        onClose={handleClose}
        anchorOrigin={{
          vertical: "bottom",
          horizontal: "left",
        }}
      >
        <Container
          sx={{
            minWidth: 300,
          }}
        >
          <form
            onSubmit={handleSubmit((data) => {
              const searchParams = new URLSearchParams(window.location.search);
              searchParams.set("filter", JSON.stringify(data));
              router.push(
                window.location.pathname + "?" + searchParams.toString()
              );
            })}
          >
            <Grid container spacing={2} mb={3} mt={3}>
              <Grid size={{ xs: 12 }}>
                <FormMultipleSelectInput<UserFilterFormData, Pick<Role, "id">>
                  name="roles"
                  testId="roles"
                  label={t("admin-panel-users:filter.inputs.role.label")}
                  options={[
                    {
                      id: RoleEnum.ADMIN,
                    },
                    {
                      id: RoleEnum.USER,
                    },
                  ]}
                  keyValue="id"
                  renderOption={(option) =>
                    t(
                      `admin-panel-users:filter.inputs.role.options.${option.id}`
                    )
                  }
                  renderValue={(values) =>
                    values
                      .map((value) =>
                        t(
                          `admin-panel-users:filter.inputs.role.options.${value.id}`
                        )
                      )
                      .join(", ")
                  }
                />
              </Grid>
              <Grid size={{ xs: 12 }}>
                <Button variant="contained" type="submit">
                  {t("admin-panel-users:filter.actions.apply")}
                </Button>
              </Grid>
            </Grid>
          </form>
        </Container>
      </Popover>
      <Button aria-describedby={id} variant="contained" onClick={handleClick}>
        {t("admin-panel-users:filter.actions.filter")}
      </Button>
    </FormProvider>
  );
}
export default UserFilter;
----------------------------------------

// ./src/app/[language]/basecamp/BaseCampDashboard.tsx
----------------------------------------
"use client";
import { useRouter } from 'next/navigation';
import Box from '@mui/material/Box';
import Container from '@mui/material/Container';
import Grid from '@mui/material/Grid';
import Card from '@mui/material/Card';
import Typography from '@mui/material/Typography';
import FooterLink from "@/components/footer-link";
import { 
  Store, 
  DollarSign, 
  TrendingUp, 
  Users
} from 'lucide-react';
import { mockVendorDetails } from '../vendor/mock-data';
import { mockVendorFinancialData } from '../finance/finance-mock-data';
import WeeklyCalendar from './WeeklyCalendar';
const QuickStatsWidget = () => {
  const router = useRouter();
  const totalVendors = mockVendorDetails.length;
  const activeVendors = mockVendorDetails.filter(v => v.status === 'published').length;
  const totalRevenue = mockVendorFinancialData.reduce(
    (sum, v) => sum + v.lifetimeRevenue.value, 0
  );
  return (
    <Grid container spacing={2} className="mb-8">
      <Grid item xs={3}>
        <Card 
          className="p-4 hover:scale-105 transition-transform cursor-pointer"
          onClick={() => router.push('/vendor')}
        >
          <Box className="flex items-center gap-3">
            <Store className="text-primary" />
            <div>
              <Typography variant="h4">{totalVendors}</Typography>
              <Typography variant="body2" color="text.secondary">Total Vendors</Typography>
            </div>
          </Box>
        </Card>
      </Grid>
      <Grid item xs={3}>
        <Card 
          className="p-4 hover:scale-105 transition-transform cursor-pointer"
          onClick={() => router.push('/finance')}
        >
          <Box className="flex items-center gap-3">
            <DollarSign className="text-success" />
            <div>
              <Typography variant="h4">
                ${(totalRevenue / 1000).toFixed(1)}k
              </Typography>
              <Typography variant="body2" color="text.secondary">Total Revenue</Typography>
            </div>
          </Box>
        </Card>
      </Grid>
      <Grid item xs={3}>
        <Card 
          className="p-4 hover:scale-105 transition-transform cursor-pointer"
          onClick={() => router.push('/vendor')}
        >
          <Box className="flex items-center gap-3">
            <TrendingUp className="text-info" />
            <div>
              <Typography variant="h4">{activeVendors}</Typography>
              <Typography variant="body2" color="text.secondary">Active Vendors</Typography>
            </div>
          </Box>
        </Card>
      </Grid>
      <Grid item xs={3}>
        <Card 
          className="p-4 hover:scale-105 transition-transform cursor-pointer"
          onClick={() => router.push('/onboard')}
        >
          <Box className="flex items-center gap-3">
            <Users className="text-warning" />
            <div>
              <Typography variant="h4">New</Typography>
              <Typography variant="body2" color="text.secondary">Add Vendor</Typography>
            </div>
          </Box>
        </Card>
      </Grid>
    </Grid>
  );
};
export default function BaseCampDashboard() {
  return (
    <Container maxWidth="xl" className="py-8">
      <Typography variant="h3" gutterBottom>BaseCamp</Typography>
      <Typography variant="body1" color="text.secondary" className="mb-8">
        Your business command center. Manage your vendors, track performance, and grow your business.
      </Typography>
      <QuickStatsWidget />
      <WeeklyCalendar />
      <FooterLink />
    </Container>
  );
}
----------------------------------------

// ./src/app/[language]/basecamp/WeeklyCalendar.tsx
----------------------------------------
"use client";
import { useState, useMemo } from "react";
import Box from "@mui/material/Box";
import Typography from "@mui/material/Typography";
import Card from "@mui/material/Card";
import Chip from "@mui/material/Chip";
import IconButton from "@mui/material/IconButton";
import { ChevronLeft, ChevronRight, Calendar } from "lucide-react";
import { addDays, format, startOfWeek, isSameDay } from "date-fns";
import { mockVendorDetails } from "../vendor/mock-data";
import { useRouter } from "next/navigation";
interface CalendarEvent {
  id: string;
  title: string;
  time: string;
  type: "tour" | "lesson" | "rental" | "ticket";
  status: string;
  vendorName: string;
}
function WeeklyCalendar() {
  const [weekStart, setWeekStart] = useState(() =>
    startOfWeek(new Date(), { weekStartsOn: 1 })
  );
  const router = useRouter();
  const days = useMemo(
    () => Array.from({ length: 7 }, (_, i) => addDays(weekStart, i)),
    [weekStart]
  );
  const events = useMemo(() => {
    const allEvents: CalendarEvent[] = [];
    mockVendorDetails.forEach((vendor) => {
      if (vendor.tours) {
        vendor.tours.forEach((tour) => {
          tour.schedule.forEach((event) => {
            allEvents.push({
              id: `tour-${event.id}`,
              title: tour.name,
              time: `${event.startTime} - ${event.endTime}`,
              type: "tour",
              status: event.status,
              vendorName: vendor.name,
            });
          });
        });
      }
      if (vendor.lessons) {
        vendor.lessons.forEach((lesson) => {
          if (lesson.scheduledDate) {
            allEvents.push({
              id: `lesson-${lesson.id}`,
              title: lesson.name,
              time: lesson.duration,
              type: "lesson",
              status: lesson.status,
              vendorName: vendor.name,
            });
          }
        });
      }
      if (vendor.rentals) {
        vendor.rentals.forEach((rental) => {
          if (rental.dueIn > 0) {
            allEvents.push({
              id: `rental-in-${rental.id}`,
              title: `${rental.name} Return`,
              time: "Due Today",
              type: "rental",
              status: "due-in",
              vendorName: vendor.name,
            });
          }
          if (rental.dueOut > 0) {
            allEvents.push({
              id: `rental-out-${rental.id}`,
              title: `${rental.name} Pickup`,
              time: "Pickup Today",
              type: "rental",
              status: "due-out",
              vendorName: vendor.name,
            });
          }
        });
      }
    });
    return allEvents;
  }, []);
  const getEventsForDay = (date: Date) => {
    const minEvents = 4; 
    const maxEvents = 12;
    const numberOfEvents = Math.floor(Math.random() * (maxEvents - minEvents + 1)) + minEvents;
  
    return Array.from({ length: numberOfEvents }).map(() => {
      console.log(date);
      const randomIndex = Math.floor(Math.random() * events.length);
      return events[randomIndex];
    });
  };
  const nextWeek = () => setWeekStart((date) => addDays(date, 7));
  const prevWeek = () => setWeekStart((date) => addDays(date, -7));
  const getEventColor = (type: string) => {
    switch (type) {
      case "tour":
        return "primary.main";
      case "lesson":
        return "success.main";
      case "rental":
        return "warning.main";
      case "ticket":
        return "info.main";
      default:
        return "text.primary";
    }
  };
  return (
    <Box className="mt-8">
      <Box
        display="flex"
        justifyContent="space-between"
        alignItems="center"
        mb={3}
      >
        <Typography variant="h6" display="flex" alignItems="center" gap={1}>
          <Calendar size={24} />
          Scheduled Activities
        </Typography>
        <Box display="flex" alignItems="center">
          <IconButton
            onClick={prevWeek}
            sx={{ padding: (theme) => theme.spacing(3) }}
          >
            <ChevronLeft size={18} />
          </IconButton>
          <Typography variant="subtitle1" component="span" mx={1}>
            {format(weekStart, "MMM d")} -{" "}
            {format(addDays(weekStart, 6), "MMM d, yyyy")}
          </Typography>
          <IconButton
            onClick={nextWeek}
            sx={{ padding: (theme) => theme.spacing(3) }}
          >
            <ChevronRight size={18} />
          </IconButton>
        </Box>
      </Box>
      <Box
        display="flex"
        gap={2}
        sx={{
          overflowX: "auto",
          flexWrap: "nowrap",
          "-webkit-overflow-scrolling": "touch",
        }}
      >
        {days.map((day) => (
          <Card
            key={day.toISOString()}
            className="p-3"
            sx={{
              minWidth: "250px",
              flex: "0 0 auto",
              backgroundColor: isSameDay(day, new Date())
                ? "action.hover"
                : "background.paper",
            }}
          >
            <Typography variant="subtitle2" gutterBottom align="center">
              {format(day, "EEE")}
            </Typography>
            <Typography
              variant="h6"
              align="center"
              gutterBottom
              color={
                isSameDay(day, new Date()) ? "primary.main" : "text.primary"
              }
            >
              {format(day, "d")}
            </Typography>
            <Box>
              {getEventsForDay(day).map((event) => (
                <Card
                  key={event.id}
                  variant="outlined"
                  className="mb-2 p-2 cursor-pointer hover:shadow-md transition-shadow"
                  onClick={() => router.push(`/vendor`)}
                >
                  <Typography
                    variant="caption"
                    color={getEventColor(event.type)}
                  >
                    {event.type.toUpperCase()}
                  </Typography>
                  <Typography variant="body2" noWrap>
                    {event.title}
                  </Typography>
                  <Box
                    display="flex"
                    justifyContent="space-between"
                    alignItems="center"
                  >
                    <Typography variant="caption" color="text.secondary">
                      {event.time}
                    </Typography>
                    <Chip
                      label={event.status}
                      size="small"
                      color={
                        event.status === "available"
                          ? "success"
                          : event.status === "booked"
                          ? "primary"
                          : "warning"
                      }
                    />
                  </Box>
                </Card>
              ))}
            </Box>
          </Card>
        ))}
      </Box>
    </Box>
  );
}
export default WeeklyCalendar;
----------------------------------------

// ./src/app/[language]/confirm-email/page-content.tsx
----------------------------------------
"use client";
import { useEffect } from "react";
import CircularProgress from "@mui/material/CircularProgress";
import Box from "@mui/material/Box";
import { useAuthConfirmEmailService } from "@/services/api/services/auth";
import { useRouter } from "next/navigation";
import { useSnackbar } from "@/hooks/use-snackbar";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import { useTranslation } from "@/services/i18n/client";
export default function ConfirmEmail() {
  const { enqueueSnackbar } = useSnackbar();
  const fetchConfirmEmail = useAuthConfirmEmailService();
  const router = useRouter();
  const { t } = useTranslation("confirm-email");
  useEffect(() => {
    const confirm = async () => {
      const params = new URLSearchParams(window.location.search);
      const hash = params.get("hash");
      if (hash) {
        const { status } = await fetchConfirmEmail({
          hash,
        });
        if (status === HTTP_CODES_ENUM.NO_CONTENT) {
          enqueueSnackbar(t("confirm-email:emailConfirmed"), {
            variant: "success",
          });
          router.replace("/profile");
        } else {
          enqueueSnackbar(t("confirm-email:emailConfirmFailed"), {
            variant: "error",
          });
          router.replace("/");
        }
      }
    };
    confirm();
  }, [fetchConfirmEmail, router, enqueueSnackbar, t]);
  return (
    <Container maxWidth="sm">
      <Grid container>
        <Grid size={{ xs: 12 }}>
          <Box
            sx={{
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              p: 2,
            }}
          >
            <CircularProgress />
          </Box>
        </Grid>
      </Grid>
    </Container>
  );
}
----------------------------------------

// ./src/app/[language]/confirm-email/page.tsx
----------------------------------------
import type { Metadata } from "next";
import ConfirmEmail from "./page-content";
import { getServerTranslation } from "@/services/i18n";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(params.language, "confirm-email");
  return {
    title: t("title"),
  };
}
export default function Page() {
  return <ConfirmEmail />;
}
----------------------------------------

// ./src/app/[language]/confirm-new-email/page-content.tsx
----------------------------------------
"use client";
import { useEffect } from "react";
import CircularProgress from "@mui/material/CircularProgress";
import Box from "@mui/material/Box";
import {
  useAuthConfirmNewEmailService,
  useAuthGetMeService,
} from "@/services/api/services/auth";
import { useRouter } from "next/navigation";
import { useSnackbar } from "@/hooks/use-snackbar";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import { useTranslation } from "@/services/i18n/client";
import useAuthActions from "@/services/auth/use-auth-actions";
import useAuth from "@/services/auth/use-auth";
export default function ConfirmNewEmail() {
  const { enqueueSnackbar } = useSnackbar();
  const fetchConfirmNewEmail = useAuthConfirmNewEmailService();
  const fetchAuthGetMe = useAuthGetMeService();
  const router = useRouter();
  const { t } = useTranslation("confirm-new-email");
  const { setUser } = useAuthActions();
  const { user, isLoaded } = useAuth();
  useEffect(() => {
    const confirm = async () => {
      if (!isLoaded) return;
      const params = new URLSearchParams(window.location.search);
      const hash = params.get("hash");
      if (!hash) return;
      const { status } = await fetchConfirmNewEmail({
        hash,
      });
      if (status === HTTP_CODES_ENUM.NO_CONTENT) {
        enqueueSnackbar(t("confirm-new-email:emailConfirmed"), {
          variant: "success",
        });
        if (user) {
          const { data, status: statusGetMe } = await fetchAuthGetMe();
          if (statusGetMe === HTTP_CODES_ENUM.OK) {
            setUser(data);
          }
          router.replace("/profile");
        } else {
          router.replace("/");
        }
      } else {
        enqueueSnackbar(t("confirm-new-email:emailConfirmFailed"), {
          variant: "error",
        });
        router.replace("/");
      }
    };
    confirm();
  }, [
    fetchConfirmNewEmail,
    router,
    enqueueSnackbar,
    t,
    isLoaded,
    setUser,
    fetchAuthGetMe,
    user
  ]);
  return (
    <Container maxWidth="sm">
      <Grid container>
        <Grid size={{ xs: 12 }}>
          <Box
            sx={{
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              p: 2,
            }}
          >
            <CircularProgress />
          </Box>
        </Grid>
      </Grid>
    </Container>
  );
}
----------------------------------------

// ./src/app/[language]/confirm-new-email/page.tsx
----------------------------------------
import type { Metadata } from "next";
import ConfirmNewEmail from "./page-content";
import { getServerTranslation } from "@/services/i18n";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(
    params.language,
    "confirm-new-email"
  );
  return {
    title: t("title"),
  };
}
export default function Page() {
  return <ConfirmNewEmail />;
}
----------------------------------------

// ./src/app/[language]/finance/components/FinanceDashboard/FinanceMetricCard.tsx
----------------------------------------
"use client";
import Card from '@mui/material/Card';
import Typography from '@mui/material/Typography';
import Stack from '@mui/material/Stack';
import { ArrowUp, ArrowDown } from 'lucide-react';
interface FinanceMetricCardProps {
  label: string;
  value: number;
  change: number;
  changeColor: string;
}
export default function FinanceMetricCard({ 
  label, 
  value, 
  change, 
  changeColor 
}: FinanceMetricCardProps) {
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0
    }).format(value);
  };
  return (
    <Card className="p-4">
      <Typography variant="subtitle2" color="text.secondary">
        {label}
      </Typography>
      <Typography variant="h4" className="mt-1">
        {formatCurrency(value)}
      </Typography>
      <Stack direction="row" spacing={1} alignItems="center" className="mt-2">
        {change > 0 ? <ArrowUp size={16} /> : <ArrowDown size={16} />}
        <Typography 
          variant="body2"
          color={changeColor}
        >
          {Math.abs(change)}% from last month
        </Typography>
      </Stack>
    </Card>
  );
}
----------------------------------------

// ./src/app/[language]/finance/components/FinanceDashboard/FinanceOverview.tsx
----------------------------------------
import Grid from '@mui/material/Grid';
import FinanceMetricCard from './FinanceMetricCard';
import { mockAggregateData, mockVendorFinancialData } from '../../finance-mock-data';
export default function FinanceOverview() {
  const totalAvailableBalance = mockVendorFinancialData.reduce(
    (sum, vendor) => sum + vendor.availableBalance.value, 0
  );
  
  const totalPendingBalance = mockVendorFinancialData.reduce(
    (sum, vendor) => sum + vendor.pendingBalance.value, 0
  );
  return (
    <Grid container spacing={3} className="mb-6">
      <Grid item xs={4}>
        <FinanceMetricCard
          label="Total Available Balance"
          value={totalAvailableBalance}
          change={mockAggregateData.totalBalance.change}
          changeColor="success.main"
        />
      </Grid>
      <Grid item xs={4}>
        <FinanceMetricCard
          label="Total Pending Balance"
          value={totalPendingBalance}
          change={mockAggregateData.totalPending.change}
          changeColor="warning.main"
        />
      </Grid>
      <Grid item xs={4}>
        <FinanceMetricCard
          label="Total Revenue (30 Days)"
          value={mockAggregateData.totalRevenue.value}
          change={mockAggregateData.totalRevenue.change}
          changeColor="info.main"
        />
      </Grid>
    </Grid>
  );
}
----------------------------------------

// ./src/app/[language]/finance/components/FinanceDashboard/index.tsx
----------------------------------------
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import FinanceOverview from './FinanceOverview';
import VendorFinanceList from './VendorFinanceList';
import VendorDetailView from './VendorDetailView';
import FooterLink from '@/components/footer-link';
import { useState } from 'react';
import { VendorFinancialData } from '../../finance-types';
export default function FinanceDashboard() {
  const [selectedVendor, setSelectedVendor] = useState<VendorFinancialData | null>(null);
  if (selectedVendor) {
    return (
      <VendorDetailView 
        data={selectedVendor} 
        onBack={() => setSelectedVendor(null)} 
      />
    );
  }
  return (
    <Box className="p-6">
      <Typography variant="h4" gutterBottom>Financial Overview</Typography>
      <FinanceOverview />
      <Typography variant="h5" gutterBottom className="mt-6">Vendor Financial Status</Typography>
      <VendorFinanceList onVendorSelect={setSelectedVendor} />
      <FooterLink />
    </Box>
  );
}
----------------------------------------

// ./src/app/[language]/finance/components/FinanceDashboard/VendorDetailView.tsx
----------------------------------------
"use client";
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Grid from '@mui/material/Grid';
import Card from '@mui/material/Card';
import Typography from '@mui/material/Typography';
import Stack from '@mui/material/Stack';
import { FileDown, Printer, Mail } from 'lucide-react';
import { VendorFinancialData } from '../../finance-types';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
interface VendorDetailViewProps {
  data: VendorFinancialData;
  onBack: () => void;
}
export default function VendorDetailView({ data, onBack }: VendorDetailViewProps) {
  const getRevenueData = () => {
    switch (data.vendorType) {
      case 'tours':
        return data.tourBookings.dates.map((date, index) => ({
          date,
          revenue: data.tourBookings.revenue[index],
        }));
      case 'tickets':
        return data.ticketSales.dates.map((date, index) => ({
          date,
          revenue: data.ticketSales.revenue[index],
        }));
      case 'rentals':
        return data.rentalMetrics.dates.map((date, index) => ({
          date,
          revenue: data.rentalMetrics.revenue[index],
        }));
      case 'lessons':
        return data.lessonMetrics.dates.map((date, index) => ({
          date,
          revenue: data.lessonMetrics.revenue[index],
        }));
    }
  };
  return (
    <Box className="p-6">
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Button onClick={onBack}>Back to Overview</Button>
        <Stack direction="row" spacing={2}>
          <Button startIcon={<FileDown />} variant="outlined">
            Export
          </Button>
          <Button startIcon={<Printer />} variant="outlined">
            Print
          </Button>
          <Button startIcon={<Mail />} variant="outlined">
            Email
          </Button>
        </Stack>
      </Box>
      <Card className="p-4 mb-4">
        <Typography variant="h5" gutterBottom>
          {data.vendorName} - Revenue Overview
        </Typography>
        <Box height={300}>
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={getRevenueData()}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Line type="monotone" dataKey="revenue" stroke="#8884d8" />
            </LineChart>
          </ResponsiveContainer>
        </Box>
      </Card>
      <Grid container spacing={3}>
        <Grid item xs={4}>
          <Card className="p-4">
            <Typography variant="subtitle2" color="text.secondary">
              Available Balance
            </Typography>
            <Typography variant="h4">
              ${data.availableBalance.value.toLocaleString()}
            </Typography>
          </Card>
        </Grid>
        <Grid item xs={4}>
          <Card className="p-4">
            <Typography variant="subtitle2" color="text.secondary">
              Pending Balance
            </Typography>
            <Typography variant="h4">
              ${data.pendingBalance.value.toLocaleString()}
            </Typography>
          </Card>
        </Grid>
        <Grid item xs={4}>
          <Card className="p-4">
            <Typography variant="subtitle2" color="text.secondary">
              30-Day Revenue
            </Typography>
            <Typography variant="h4">
              ${data.lifetimeRevenue.value.toLocaleString()}
            </Typography>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
}
----------------------------------------

// ./src/app/[language]/finance/components/FinanceDashboard/VendorFinanceCard.tsx
----------------------------------------
"use client";
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Grid from '@mui/material/Grid';
import Card from '@mui/material/Card';
import Typography from '@mui/material/Typography';
import Chip from '@mui/material/Chip';
import { VendorFinancialData } from '../../finance-types';
interface VendorFinanceCardProps {
  data: VendorFinancialData;
  onViewDetails: (vendor: VendorFinancialData) => void;
}
export default function VendorFinanceCard({ data, onViewDetails }: VendorFinanceCardProps) {
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(value);
  };
  return (
    <Card className="p-4 mb-4">
      <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={2}>
        <div>
          <Typography variant="h6">{data.vendorName}</Typography>
          <Chip 
            label={data.vendorType.toUpperCase()} 
            size="small" 
            className="mt-1"
          />
        </div>
        <Button 
          variant="outlined" 
          onClick={() => onViewDetails(data)}
        >
          View Details
        </Button>
      </Box>
      <Grid container spacing={2}>
        <Grid item xs={4}>
          <Typography variant="subtitle2" color="text.secondary">
            Available Balance
          </Typography>
          <Typography variant="h6">
            {formatCurrency(data.availableBalance.value)}
          </Typography>
        </Grid>
        <Grid item xs={4}>
          <Typography variant="subtitle2" color="text.secondary">
            Pending Balance
          </Typography>
          <Typography variant="h6">
            {formatCurrency(data.pendingBalance.value)}
          </Typography>
        </Grid>
        <Grid item xs={4}>
          <Typography variant="subtitle2" color="text.secondary">
            Revenue (30 days)
          </Typography>
          <Typography variant="h6">
            {formatCurrency(data.lifetimeRevenue.value)}
          </Typography>
        </Grid>
      </Grid>
    </Card>
  );
}
----------------------------------------

// ./src/app/[language]/finance/components/FinanceDashboard/VendorFinanceList.tsx
----------------------------------------
"use client";
import { VendorFinancialData } from '../../finance-types';
import { mockVendorFinancialData } from '../../finance-mock-data';
import VendorFinanceCard from './VendorFinanceCard';
interface VendorFinanceListProps {
  onVendorSelect: (vendor: VendorFinancialData) => void;
}
export default function VendorFinanceList({ onVendorSelect }: VendorFinanceListProps) {
  return (
    <>
      {mockVendorFinancialData.map((vendor) => (
        <VendorFinanceCard 
          key={vendor.id}
          data={vendor}
          onViewDetails={onVendorSelect}
        />
      ))}
    </>
  );
}
----------------------------------------

// ./src/app/[language]/finance/page-content.tsx
----------------------------------------
"use client";
import { Suspense } from 'react';
import dynamic from 'next/dynamic';
import CircularProgress from "@mui/material/CircularProgress";
import Box from "@mui/material/Box";
import withPageRequiredAuth from "@/services/auth/with-page-required-auth";
const LoadingSpinner = () => (
  <Box 
    display="flex" 
    justifyContent="center" 
    alignItems="center" 
    minHeight="60vh"
  >
    <CircularProgress />
  </Box>
);
const FinanceDashboard = dynamic(
  () => import('./components/FinanceDashboard'),
  {
    loading: () => <LoadingSpinner />,
    ssr: false
  }
);
function FinanceContent() {
  return (
    <Suspense fallback={<LoadingSpinner />}>
      <FinanceDashboard />
    </Suspense>
  );
}
export default withPageRequiredAuth(FinanceContent);
----------------------------------------

// ./src/app/[language]/finance/page.tsx
----------------------------------------
import type { Metadata } from "next";
import { getServerTranslation } from "@/services/i18n";
import FinanceContent from "./page-content";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const resolvedParams = await params;
  const { t } = await getServerTranslation(resolvedParams.language, "finance");
  
  return {
    title: t("finance:title"),
    description: t("finance:description"),
    openGraph: {
      title: t("finance:title"),
      description: t("finance:description"),
      type: "website",
    },
  };
}
export default function FinancePage() {
  return <FinanceContent />;
}
----------------------------------------

// ./src/app/[language]/forgot-password/page-content.tsx
----------------------------------------
"use client";
import Button from "@mui/material/Button";
import withPageRequiredGuest from "@/services/auth/with-page-required-guest";
import { useForm, FormProvider, useFormState } from "react-hook-form";
import { useAuthForgotPasswordService } from "@/services/api/services/auth";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import FormTextInput from "@/components/form/text-input/form-text-input";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { useSnackbar } from "@/hooks/use-snackbar";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import { useTranslation } from "@/services/i18n/client";
type ForgotPasswordFormData = {
  email: string;
};
const useValidationSchema = () => {
  const { t } = useTranslation("forgot-password");
  return yup.object().shape({
    email: yup
      .string()
      .email(t("forgot-password:inputs.email.validation.invalid"))
      .required(t("forgot-password:inputs.email.validation.required")),
  });
};
function FormActions() {
  const { t } = useTranslation("forgot-password");
  const { isSubmitting } = useFormState();
  return (
    <Button
      variant="contained"
      color="primary"
      type="submit"
      disabled={isSubmitting}
      data-testid="send-email"
    >
      {t("forgot-password:actions.submit")}
    </Button>
  );
}
function Form() {
  const { enqueueSnackbar } = useSnackbar();
  const fetchAuthForgotPassword = useAuthForgotPasswordService();
  const { t } = useTranslation("forgot-password");
  const validationSchema = useValidationSchema();
  const methods = useForm<ForgotPasswordFormData>({
    resolver: yupResolver(validationSchema),
    defaultValues: {
      email: "",
    },
  });
  const { handleSubmit, setError } = methods;
  const onSubmit = handleSubmit(async (formData) => {
    const { data, status } = await fetchAuthForgotPassword(formData);
    if (status === HTTP_CODES_ENUM.UNPROCESSABLE_ENTITY) {
      (Object.keys(data.errors) as Array<keyof ForgotPasswordFormData>).forEach(
        (key) => {
          setError(key, {
            type: "manual",
            message: t(
              `forgot-password:inputs.${key}.validation.server.${data.errors[key]}`
            ),
          });
        }
      );
      return;
    }
    if (status === HTTP_CODES_ENUM.NO_CONTENT) {
      enqueueSnackbar(t("forgot-password:alerts.success"), {
        variant: "success",
      });
    }
  });
  return (
    <FormProvider {...methods}>
      <Container maxWidth="xs">
        <form onSubmit={onSubmit}>
          <Grid container spacing={2} mb={2}>
            <Grid size={{ xs: 12 }} mt={3}>
              <Typography variant="h6">{t("forgot-password:title")}</Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<ForgotPasswordFormData>
                name="email"
                label={t("forgot-password:inputs.email.label")}
                type="email"
                testId="email"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormActions />
            </Grid>
          </Grid>
        </form>
      </Container>
    </FormProvider>
  );
}
function ForgotPassword() {
  return <Form />;
}
export default withPageRequiredGuest(ForgotPassword);
----------------------------------------

// ./src/app/[language]/forgot-password/page.tsx
----------------------------------------
import type { Metadata } from "next";
import ForgotPassword from "./page-content";
import { getServerTranslation } from "@/services/i18n";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(params.language, "forgot-password");
  return {
    title: t("title"),
  };
}
export default function Page() {
  return <ForgotPassword />;
}
----------------------------------------

// ./src/app/[language]/layout.tsx
----------------------------------------
import ResponsiveAppBar from "@/components/app-bar";
import AuthProvider from "@/services/auth/auth-provider";
import "../globals.css";
import "@fontsource/roboto/300.css";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";
import CssBaseline from "@mui/material/CssBaseline";
import { dir } from "i18next";
import "@/services/i18n/config";
import { languages } from "@/services/i18n/config";
import type { Metadata } from "next";
import ToastContainer from "@/components/snackbar-provider";
import { getServerTranslation } from "@/services/i18n";
import StoreLanguageProvider from "@/services/i18n/store-language-provider";
import ThemeProvider from "@/components/theme/theme-provider";
import LeavePageProvider from "@/services/leave-page/leave-page-provider";
import QueryClientProvider from "@/services/react-query/query-client-provider";
import queryClient from "@/services/react-query/query-client";
import ReactQueryDevtools from "@/services/react-query/react-query-devtools";
import GoogleAuthProvider from "@/services/social-auth/google/google-auth-provider";
import FacebookAuthProvider from "@/services/social-auth/facebook/facebook-auth-provider";
import ConfirmDialogProvider from "@/components/confirm-dialog/confirm-dialog-provider";
import InitColorSchemeScript from "@/components/theme/init-color-scheme-script";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(params.language, "common");
  return {
    title: t("title"),
  };
}
export function generateStaticParams() {
  return languages.map((language) => ({ language }));
}
export default async function RootLayout(props: {
  children: React.ReactNode;
  params: Promise<{ language: string }>;
}) {
  const params = await props.params;
  const { language } = params;
  const { children } = props;
  return (
    <html lang={language} dir={dir(language)} suppressHydrationWarning>
      <body suppressHydrationWarning>
        <InitColorSchemeScript />
        <QueryClientProvider client={queryClient}>
          <ReactQueryDevtools initialIsOpen={false} />
          <ThemeProvider>
            <CssBaseline />
            <StoreLanguageProvider>
              <ConfirmDialogProvider>
                <AuthProvider>
                  <GoogleAuthProvider>
                    <FacebookAuthProvider>
                      <LeavePageProvider>
                        <ResponsiveAppBar />
                        {children}
                        <ToastContainer
                          position="bottom-left"
                          hideProgressBar
                        />
                      </LeavePageProvider>
                    </FacebookAuthProvider>
                  </GoogleAuthProvider>
                </AuthProvider>
              </ConfirmDialogProvider>
            </StoreLanguageProvider>
          </ThemeProvider>
        </QueryClientProvider>
      </body>
    </html>
  );
}
----------------------------------------

// ./src/app/[language]/loading.tsx
----------------------------------------
import Box from "@mui/material/Box";
import LinearProgress from "@mui/material/LinearProgress";
function Loading() {
  return (
    <Box sx={{ width: "100%" }}>
      <LinearProgress />
    </Box>
  );
}
export default Loading;
----------------------------------------

// ./src/app/[language]/onboard/page-content.tsx
----------------------------------------
"use client";
import { useSnackbar } from "@/hooks/use-snackbar";
import useAuth from "@/services/auth/use-auth";
import { useTranslation } from "@/services/i18n/client";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import { useForm, FormProvider } from "react-hook-form";
import FormTextInput from "@/components/form/text-input/form-text-input";
import FormSelectInput from "@/components/form/select/form-select";
import Button from "@mui/material/Button";
import Avatar from "@mui/material/Avatar";
import Box from "@mui/material/Box";
import FooterLink from "@/components/footer-link";
import { styled } from "@mui/material/styles";
const StyledAvatar = styled(Avatar)(({ theme }) => ({
  width: theme.spacing(20),
  height: theme.spacing(20),
}));
type VendorType = {
  id: string;
  name: string;
};
type OnboardFormData = {
  vendorName: string;
  vendorDescription: string;
  vendorType: VendorType;
  vendorEmail: string;
  vendorPhone: string;
  vendorWebsite: string;
  address: string;
  facebook: string;
  twitter: string;
  instagram: string;
};
const vendorTypes = [
  { id: "tours", name: "Tours" },
  { id: "tickets", name: "Tickets" },
  { id: "rentals", name: "Rentals" },
  { id: "lessons", name: "Lessons" },
];
export default function OnboardContent() {
  const { user } = useAuth();
  const { enqueueSnackbar } = useSnackbar();
  const { t } = useTranslation("onboard");
  const methods = useForm<OnboardFormData>({
    defaultValues: {
      vendorName: "",
      vendorDescription: "",
      vendorType: undefined,
      vendorEmail: "",
      vendorPhone: "",
      vendorWebsite: "",
      address: "",
      facebook: "",
      twitter: "",
      instagram: "",
    },
  });
  const { handleSubmit } = methods;
  const onSubmit = handleSubmit(async (formData) => {
    try {
      console.log("Form data to be sent:", formData);
      enqueueSnackbar(
        "Vendor profile saved successfully! The actual registration will be implemented soon.",
        {
          variant: "success",
        }
      );
    } catch (error) {
      enqueueSnackbar("An error occurred while saving the vendor profile.", {
        variant: "error",
      });
    }
  });
  return (
    <FormProvider {...methods}>
      <Container maxWidth="md">
        <form onSubmit={onSubmit}>
          <Grid container spacing={3} pt={3}>
            {/* User Profile Section */}
            <Grid container spacing={3} size={{ xs: 12 }} mb={4}>
              <Grid size="auto">
                <StyledAvatar
                  alt={user?.firstName + " " + user?.lastName}
                  data-testid="user-icon"
                  src={user?.photo?.path}
                />
              </Grid>
              <Grid size="grow">
                <Typography variant="h3" gutterBottom data-testid="user-name">
                  {user?.firstName} {user?.lastName}
                </Typography>
                <Typography variant="h5" gutterBottom data-testid="user-email">
                  {user?.email}
                </Typography>
              </Grid>
            </Grid>
            {/* Vendor Basic Info */}
            <Grid size={{ xs: 12 }}>
              <Typography variant="h4" gutterBottom>
                {t("sections.basicInfo")}
              </Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<OnboardFormData>
                name="vendorName"
                label={t("inputs.vendorName.label")}
                testId="vendor-name"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<OnboardFormData>
                name="vendorDescription"
                label={t("inputs.vendorDescription.label")}
                multiline
                minRows={3}
                testId="vendor-description"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormSelectInput<OnboardFormData, VendorType>
                name="vendorType"
                label={t("inputs.vendorType.label")}
                options={vendorTypes}
                keyValue="id"
                renderOption={(option) => option.name}
                testId="vendor-type"
              />
            </Grid>
            {/* Contact Information */}
            <Grid size={{ xs: 12 }}>
              <Typography variant="h4" gutterBottom>
                {t("sections.contactInfo")}
              </Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<OnboardFormData>
                name="vendorEmail"
                label={t("inputs.vendorEmail.label")}
                type="email"
                testId="vendor-email"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<OnboardFormData>
                name="vendorPhone"
                label={t("inputs.vendorPhone.label")}
                testId="vendor-phone"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<OnboardFormData>
                name="vendorWebsite"
                label={t("inputs.vendorWebsite.label")}
                testId="vendor-website"
              />
            </Grid>
            {/* Address Section */}
            <Grid size={{ xs: 12 }}>
              <Typography variant="h4" gutterBottom>
                {t("sections.location")}
              </Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<OnboardFormData>
                name="address"
                label={t("inputs.address.label")}
                testId="vendor-address"
              />
              <Typography variant="caption" color="textSecondary">
                {t("inputs.address.hint")}
              </Typography>
            </Grid>
            {/* Social Media */}
            <Grid size={{ xs: 12 }}>
              <Typography variant="h4" gutterBottom>
                {t("sections.social")}
              </Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<OnboardFormData>
                name="facebook"
                label={t("inputs.facebook.label")}
                testId="vendor-facebook"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<OnboardFormData>
                name="twitter"
                label={t("inputs.twitter.label")}
                testId="vendor-twitter"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<OnboardFormData>
                name="instagram"
                label={t("inputs.instagram.label")}
                testId="vendor-instagram"
              />
            </Grid>
            {/* Submit Button */}
            <Grid size={{ xs: 12 }} mb={4}>
              <Box sx={{ mt: 2 }}>
                <Button
                  variant="contained"
                  color="primary"
                  size="large"
                  type="submit"
                >
                  {t("actions.submit")}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Container>
      <FooterLink />
    </FormProvider>
  );
}
----------------------------------------

// ./src/app/[language]/onboard/page.tsx
----------------------------------------
import type { Metadata } from "next";
import { getServerTranslation } from "@/services/i18n";
import OnboardContent from "./page-content";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(params.language, "onboard");
  return {
    title: t("title"),
  };
}
export default function Page() {
  return <OnboardContent />;
}
----------------------------------------

// ./src/app/[language]/page.tsx
----------------------------------------
import type { Metadata } from "next";
import { getServerTranslation } from "@/services/i18n";
import BaseCampDashboard from "./basecamp/BaseCampDashboard";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const resolvedParams = await params;
  const { t } = await getServerTranslation(resolvedParams.language, "basecamp");
  
  return {
    title: t("basecamp:title"),
    description: t("basecamp:description")
  };
}
export default function BaseCampPage() {
  return <BaseCampDashboard />;
}
----------------------------------------

// ./src/app/[language]/password-change/page-content.tsx
----------------------------------------
"use client";
import Button from "@mui/material/Button";
import withPageRequiredGuest from "@/services/auth/with-page-required-guest";
import { useForm, FormProvider, useFormState } from "react-hook-form";
import { useAuthResetPasswordService } from "@/services/api/services/auth";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import FormTextInput from "@/components/form/text-input/form-text-input";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { useSnackbar } from "@/hooks/use-snackbar";
import { useRouter } from "next/navigation";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import { useTranslation } from "@/services/i18n/client";
import { useEffect, useMemo, useState } from "react";
import Alert from "@mui/material/Alert";
type PasswordChangeFormData = {
  password: string;
  passwordConfirmation: string;
};
const useValidationSchema = () => {
  const { t } = useTranslation("password-change");
  return yup.object().shape({
    password: yup
      .string()
      .min(6, t("password-change:inputs.password.validation.min"))
      .required(t("password-change:inputs.password.validation.required")),
    passwordConfirmation: yup
      .string()
      .oneOf(
        [yup.ref("password")],
        t("password-change:inputs.passwordConfirmation.validation.match")
      )
      .required(
        t("password-change:inputs.passwordConfirmation.validation.required")
      ),
  });
};
function FormActions() {
  const { t } = useTranslation("password-change");
  const { isSubmitting } = useFormState();
  return (
    <Button
      variant="contained"
      color="primary"
      type="submit"
      disabled={isSubmitting}
      data-testid="set-password"
    >
      {t("password-change:actions.submit")}
    </Button>
  );
}
function ExpiresAlert() {
  const { t } = useTranslation("password-change");
  const [currentTime, setCurrentTime] = useState(() => Date.now());
  const expires = useMemo(() => {
    const params = new URLSearchParams(window.location.search);
    return Number(params.get("expires"));
  }, []);
  useEffect(() => {
    const interval = setInterval(() => {
      const now = Date.now();
      setCurrentTime(now);
      if (expires < now) {
        clearInterval(interval);
      }
    }, 1000);
    return () => clearInterval(interval);
  }, [expires]);
  const isExpired = expires < currentTime;
  return (
    isExpired && (
      <Grid size={{ xs: 12 }}>
        <Alert severity="error" data-testid="reset-link-expired-alert">
          {t("password-change:alerts.expired")}
        </Alert>
      </Grid>
    )
  );
}
function Form() {
  const { enqueueSnackbar } = useSnackbar();
  const fetchAuthResetPassword = useAuthResetPasswordService();
  const { t } = useTranslation("password-change");
  const validationSchema = useValidationSchema();
  const router = useRouter();
  const methods = useForm<PasswordChangeFormData>({
    resolver: yupResolver(validationSchema),
    defaultValues: {
      password: "",
      passwordConfirmation: "",
    },
  });
  const { handleSubmit, setError } = methods;
  const onSubmit = handleSubmit(async (formData) => {
    const params = new URLSearchParams(window.location.search);
    const hash = params.get("hash");
    if (!hash) return;
    const { data, status } = await fetchAuthResetPassword({
      password: formData.password,
      hash,
    });
    if (status === HTTP_CODES_ENUM.UNPROCESSABLE_ENTITY) {
      (Object.keys(data.errors) as Array<keyof PasswordChangeFormData>).forEach(
        (key) => {
          setError(key, {
            type: "manual",
            message: t(
              `password-change:inputs.${key}.validation.server.${data.errors[key]}`
            ),
          });
        }
      );
      return;
    }
    if (status === HTTP_CODES_ENUM.NO_CONTENT) {
      enqueueSnackbar(t("password-change:alerts.success"), {
        variant: "success",
      });
      router.replace("/sign-in");
    }
  });
  return (
    <FormProvider {...methods}>
      <Container maxWidth="xs">
        <form onSubmit={onSubmit}>
          <Grid container spacing={2} mb={2}>
            <Grid size={{ xs: 12 }} mt={3}>
              <Typography variant="h6">{t("password-change:title")}</Typography>
            </Grid>
            <ExpiresAlert />
            <Grid size={{ xs: 12 }}>
              <FormTextInput<PasswordChangeFormData>
                name="password"
                label={t("password-change:inputs.password.label")}
                type="password"
                testId="password"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<PasswordChangeFormData>
                name="passwordConfirmation"
                label={t("password-change:inputs.passwordConfirmation.label")}
                type="password"
                testId="password-confirmation"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormActions />
            </Grid>
          </Grid>
        </form>
      </Container>
    </FormProvider>
  );
}
function PasswordChange() {
  return <Form />;
}
export default withPageRequiredGuest(PasswordChange);
----------------------------------------

// ./src/app/[language]/password-change/page.tsx
----------------------------------------
import type { Metadata } from "next";
import PasswordChange from "./page-content";
import { getServerTranslation } from "@/services/i18n";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(params.language, "password-change");
  return {
    title: t("title"),
  };
}
export default function Page() {
  return <PasswordChange />;
}
----------------------------------------

// ./src/app/[language]/profile/edit/page-content.tsx
----------------------------------------
"use client";
import Button from "@mui/material/Button";
import { useForm, FormProvider, useFormState } from "react-hook-form";
import { useAuthPatchMeService } from "@/services/api/services/auth";
import useAuthActions from "@/services/auth/use-auth-actions";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import FormTextInput from "@/components/form/text-input/form-text-input";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import withPageRequiredAuth from "@/services/auth/with-page-required-auth";
import { useEffect } from "react";
import useAuth from "@/services/auth/use-auth";
import { useSnackbar } from "@/hooks/use-snackbar";
import Link from "@/components/link";
import FormAvatarInput from "@/components/form/avatar-input/form-avatar-input";
import { FileEntity } from "@/services/api/types/file-entity";
import useLeavePage from "@/services/leave-page/use-leave-page";
import Box from "@mui/material/Box";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import { useTranslation } from "@/services/i18n/client";
import { UserProviderEnum } from "@/services/api/types/user";
type EditProfileBasicInfoFormData = {
  firstName: string;
  lastName: string;
  photo?: FileEntity;
};
type EditProfileChangePasswordFormData = {
  oldPassword: string;
  password: string;
  passwordConfirmation: string;
};
type EditProfileChangeEmailFormData = {
  email: string;
  emailConfirmation: string;
};
const useValidationBasicInfoSchema = () => {
  const { t } = useTranslation("profile");
  return yup.object().shape({
    firstName: yup
      .string()
      .required(t("profile:inputs.firstName.validation.required")),
    lastName: yup
      .string()
      .required(t("profile:inputs.lastName.validation.required")),
  });
};
const useValidationChangeEmailSchema = () => {
  const { t } = useTranslation("profile");
  const { user } = useAuth();
  return yup.object().shape({
    email: yup
      .string()
      .notOneOf(
        [user?.email],
        t("profile:inputs.email.validation.currentEmail")
      )
      .email(t("profile:inputs.email.validation.email"))
      .required(t("profile:inputs.email.validation.required")),
    emailConfirmation: yup
      .string()
      .oneOf(
        [yup.ref("email")],
        t("profile:inputs.emailConfirmation.validation.match")
      )
      .required(t("profile:inputs.emailConfirmation.validation.required")),
  });
};
const useValidationChangePasswordSchema = () => {
  const { t } = useTranslation("profile");
  return yup.object().shape({
    oldPassword: yup
      .string()
      .min(6, t("profile:inputs.password.validation.min"))
      .required(t("profile:inputs.password.validation.required")),
    password: yup
      .string()
      .min(6, t("profile:inputs.password.validation.min"))
      .required(t("profile:inputs.password.validation.required")),
    passwordConfirmation: yup
      .string()
      .oneOf(
        [yup.ref("password")],
        t("profile:inputs.passwordConfirmation.validation.match")
      )
      .required(t("profile:inputs.passwordConfirmation.validation.required")),
  });
};
function BasicInfoFormActions() {
  const { t } = useTranslation("profile");
  const { isSubmitting, isDirty } = useFormState();
  useLeavePage(isDirty);
  return (
    <Button
      variant="contained"
      color="primary"
      type="submit"
      disabled={isSubmitting}
      data-testid="save-profile"
    >
      {t("profile:actions.submit")}
    </Button>
  );
}
function ChangeEmailFormActions() {
  const { t } = useTranslation("profile");
  const { isSubmitting, isDirty } = useFormState();
  useLeavePage(isDirty);
  return (
    <Button
      variant="contained"
      color="primary"
      type="submit"
      disabled={isSubmitting}
      data-testid="save-email"
    >
      {t("profile:actions.submit")}
    </Button>
  );
}
function ChangePasswordFormActions() {
  const { t } = useTranslation("profile");
  const { isSubmitting, isDirty } = useFormState();
  useLeavePage(isDirty);
  return (
    <Button
      variant="contained"
      color="primary"
      type="submit"
      disabled={isSubmitting}
      data-testid="save-password"
    >
      {t("profile:actions.submit")}
    </Button>
  );
}
function FormBasicInfo() {
  const { setUser } = useAuthActions();
  const { user } = useAuth();
  const fetchAuthPatchMe = useAuthPatchMeService();
  const { t } = useTranslation("profile");
  const validationSchema = useValidationBasicInfoSchema();
  const { enqueueSnackbar } = useSnackbar();
  const methods = useForm<EditProfileBasicInfoFormData>({
    resolver: yupResolver(validationSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      photo: undefined,
    },
  });
  const { handleSubmit, setError, reset } = methods;
  const onSubmit = handleSubmit(async (formData) => {
    const { data, status } = await fetchAuthPatchMe(formData);
    if (status === HTTP_CODES_ENUM.UNPROCESSABLE_ENTITY) {
      (
        Object.keys(data.errors) as Array<keyof EditProfileBasicInfoFormData>
      ).forEach((key) => {
        setError(key, {
          type: "manual",
          message: t(
            `profile:inputs.${key}.validation.server.${data.errors[key]}`
          ),
        });
      });
      return;
    }
    if (status === HTTP_CODES_ENUM.OK) {
      setUser(data);
      enqueueSnackbar(t("profile:alerts.profile.success"), {
        variant: "success",
      });
    }
  });
  useEffect(() => {
    reset({
      firstName: user?.firstName ?? "",
      lastName: user?.lastName ?? "",
      photo: user?.photo,
    });
  }, [user, reset]);
  return (
    <FormProvider {...methods}>
      <Container maxWidth="xs">
        <form onSubmit={onSubmit}>
          <Grid container spacing={2} mb={3} mt={3}>
            <Grid size={{ xs: 12 }}>
              <Typography variant="h6">{t("profile:title1")}</Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormAvatarInput<EditProfileBasicInfoFormData>
                name="photo"
                testId="photo"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<EditProfileBasicInfoFormData>
                name="firstName"
                label={t("profile:inputs.firstName.label")}
                testId="first-name"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<EditProfileBasicInfoFormData>
                name="lastName"
                label={t("profile:inputs.lastName.label")}
                testId="last-name"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <BasicInfoFormActions />
              <Box ml={1} component="span">
                <Button
                  variant="contained"
                  color="inherit"
                  LinkComponent={Link}
                  href="/profile"
                  data-testid="cancel-edit-profile"
                >
                  {t("profile:actions.cancel")}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Container>
    </FormProvider>
  );
}
function FormChangeEmail() {
  const fetchAuthPatchMe = useAuthPatchMeService();
  const { enqueueSnackbar } = useSnackbar();
  const { t } = useTranslation("profile");
  const validationSchema = useValidationChangeEmailSchema();
  const { user } = useAuth();
  const methods = useForm<EditProfileChangeEmailFormData>({
    resolver: yupResolver(validationSchema),
    defaultValues: {
      email: "",
      emailConfirmation: "",
    },
  });
  const { handleSubmit, reset, setError } = methods;
  const onSubmit = handleSubmit(async (formData) => {
    const { data, status } = await fetchAuthPatchMe({
      email: formData.email,
    });
    if (status === HTTP_CODES_ENUM.UNPROCESSABLE_ENTITY) {
      (
        Object.keys(data.errors) as Array<keyof EditProfileChangeEmailFormData>
      ).forEach((key) => {
        setError(key, {
          type: "manual",
          message: t(
            `profile:inputs.${key}.validation.server.${data.errors[key]}`
          ),
        });
      });
      return;
    }
    if (status === HTTP_CODES_ENUM.OK) {
      reset();
      enqueueSnackbar(t("profile:alerts.email.success"), {
        variant: "success",
        autoHideDuration: 15000,
      });
    }
  });
  return (
    <FormProvider {...methods}>
      <Container maxWidth="xs">
        <form onSubmit={onSubmit}>
          <Grid container spacing={2} mb={3}>
            <Grid size={{ xs: 12 }}>
              <Typography variant="h6">{t("profile:title2")}</Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <Typography variant="body1">{user?.email}</Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<EditProfileChangeEmailFormData>
                name="email"
                label={t("profile:inputs.email.label")}
                type="email"
                testId="email"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<EditProfileChangeEmailFormData>
                name="emailConfirmation"
                label={t("profile:inputs.emailConfirmation.label")}
                type="email"
                testId="email-confirmation"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <ChangeEmailFormActions />
              <Box ml={1} component="span">
                <Button
                  variant="contained"
                  color="inherit"
                  LinkComponent={Link}
                  href="/profile"
                  data-testid="cancel-edit-email"
                >
                  {t("profile:actions.cancel")}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Container>
    </FormProvider>
  );
}
function FormChangePassword() {
  const fetchAuthPatchMe = useAuthPatchMeService();
  const { t } = useTranslation("profile");
  const validationSchema = useValidationChangePasswordSchema();
  const { enqueueSnackbar } = useSnackbar();
  const methods = useForm<EditProfileChangePasswordFormData>({
    resolver: yupResolver(validationSchema),
    defaultValues: {
      oldPassword: "",
      password: "",
      passwordConfirmation: "",
    },
  });
  const { handleSubmit, setError, reset } = methods;
  const onSubmit = handleSubmit(async (formData) => {
    const { data, status } = await fetchAuthPatchMe({
      password: formData.password,
      oldPassword: formData.oldPassword,
    });
    if (status === HTTP_CODES_ENUM.UNPROCESSABLE_ENTITY) {
      (
        Object.keys(data.errors) as Array<
          keyof EditProfileChangePasswordFormData
        >
      ).forEach((key) => {
        setError(key, {
          type: "manual",
          message: t(
            `profile:inputs.${key}.validation.server.${data.errors[key]}`
          ),
        });
      });
      return;
    }
    if (status === HTTP_CODES_ENUM.OK) {
      reset();
      enqueueSnackbar(t("profile:alerts.password.success"), {
        variant: "success",
      });
    }
  });
  return (
    <FormProvider {...methods}>
      <Container maxWidth="xs">
        <form onSubmit={onSubmit}>
          <Grid container spacing={2} mb={2}>
            <Grid size={{ xs: 12 }}>
              <Typography variant="h6">{t("profile:title3")}</Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<EditProfileChangePasswordFormData>
                name="oldPassword"
                label={t("profile:inputs.oldPassword.label")}
                type="password"
                testId="old-password"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<EditProfileChangePasswordFormData>
                name="password"
                label={t("profile:inputs.password.label")}
                type="password"
                testId="new-password"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<EditProfileChangePasswordFormData>
                name="passwordConfirmation"
                label={t("profile:inputs.passwordConfirmation.label")}
                type="password"
                testId="password-confirmation"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <ChangePasswordFormActions />
              <Box ml={1} component="span">
                <Button
                  variant="contained"
                  color="inherit"
                  LinkComponent={Link}
                  href="/profile"
                  data-testid="cancel-edit-password"
                >
                  {t("profile:actions.cancel")}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Container>
    </FormProvider>
  );
}
function FormChangeEmailWrapper() {
  const { user } = useAuth();
  return user?.provider === UserProviderEnum.EMAIL ? <FormChangeEmail /> : null;
}
function FormChangePasswordWrapper() {
  const { user } = useAuth();
  return user?.provider === UserProviderEnum.EMAIL ? (
    <FormChangePassword />
  ) : null;
}
function EditProfile() {
  return (
    <>
      <FormBasicInfo />
      <FormChangeEmailWrapper />
      <FormChangePasswordWrapper />
    </>
  );
}
export default withPageRequiredAuth(EditProfile);
----------------------------------------

// ./src/app/[language]/profile/edit/page.tsx
----------------------------------------
import type { Metadata } from "next";
import EditProfile from "./page-content";
import { getServerTranslation } from "@/services/i18n";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(params.language, "profile");
  return {
    title: t("title1"),
  };
}
export default function Page() {
  return <EditProfile />;
}
----------------------------------------

// ./src/app/[language]/profile/page-content.tsx
----------------------------------------
"use client";
import useAuth from "@/services/auth/use-auth";
import withPageRequiredAuth from "@/services/auth/with-page-required-auth";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import Avatar from "@mui/material/Avatar";
import { styled } from "@mui/material/styles";
import Button from "@mui/material/Button";
import Link from "@/components/link";
import { useTranslation } from "@/services/i18n/client";
const StyledAvatar = styled(Avatar)(({ theme }) => ({
  width: theme.spacing(20),
  height: theme.spacing(20),
}));
function Profile() {
  const { user } = useAuth();
  const { t } = useTranslation("profile");
  return (
    <Container maxWidth="sm">
      <Grid container spacing={3} wrap="nowrap" pt={3}>
        <Grid size="auto">
          <StyledAvatar
            alt={user?.firstName + " " + user?.lastName}
            data-testid="user-icon"
            src={user?.photo?.path}
          />
        </Grid>
        <Grid size="grow">
          <Typography variant="h3" gutterBottom data-testid="user-name">
            {user?.firstName} {user?.lastName}
          </Typography>
          <Typography variant="h5" gutterBottom data-testid="user-email">
            {user?.email}
          </Typography>
          <Grid container>
            <Grid>
              <Button
                variant="contained"
                color="primary"
                LinkComponent={Link}
                href="/profile/edit"
                data-testid="edit-profile"
              >
                {t("profile:actions.edit")}
              </Button>
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </Container>
  );
}
export default withPageRequiredAuth(Profile);
----------------------------------------

// ./src/app/[language]/profile/page.tsx
----------------------------------------
import type { Metadata } from "next";
import Profile from "./page-content";
import { getServerTranslation } from "@/services/i18n";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(params.language, "profile");
  return {
    title: t("title"),
  };
}
export default function Page() {
  return <Profile />;
}
----------------------------------------

// ./src/app/[language]/sign-in/page-content.tsx
----------------------------------------
"use client";
import Button from "@mui/material/Button";
import LinkItem from "@mui/material/Link";
import withPageRequiredGuest from "@/services/auth/with-page-required-guest";
import { useForm, FormProvider, useFormState } from "react-hook-form";
import { useAuthLoginService } from "@/services/api/services/auth";
import useAuthActions from "@/services/auth/use-auth-actions";
import useAuthTokens from "@/services/auth/use-auth-tokens";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import FormTextInput from "@/components/form/text-input/form-text-input";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import Link from "@/components/link";
import Box from "@mui/material/Box";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import { useTranslation } from "@/services/i18n/client";
import SocialAuth from "@/services/social-auth/social-auth";
import Divider from "@mui/material/Divider";
import Chip from "@mui/material/Chip";
import { isGoogleAuthEnabled } from "@/services/social-auth/google/google-config";
import { isFacebookAuthEnabled } from "@/services/social-auth/facebook/facebook-config";
import { IS_SIGN_UP_ENABLED } from "@/services/auth/config";
type SignInFormData = {
  email: string;
  password: string;
};
const useValidationSchema = () => {
  const { t } = useTranslation("sign-in");
  return yup.object().shape({
    email: yup
      .string()
      .email(t("sign-in:inputs.email.validation.invalid"))
      .required(t("sign-in:inputs.email.validation.required")),
    password: yup
      .string()
      .min(6, t("sign-in:inputs.password.validation.min"))
      .required(t("sign-in:inputs.password.validation.required")),
  });
};
function FormActions() {
  const { t } = useTranslation("sign-in");
  const { isSubmitting } = useFormState();
  return (
    <Button
      variant="contained"
      color="primary"
      type="submit"
      disabled={isSubmitting}
      data-testid="sign-in-submit"
    >
      {t("sign-in:actions.submit")}
    </Button>
  );
}
function Form() {
  const { setUser } = useAuthActions();
  const { setTokensInfo } = useAuthTokens();
  const fetchAuthLogin = useAuthLoginService();
  const { t } = useTranslation("sign-in");
  const validationSchema = useValidationSchema();
  const methods = useForm<SignInFormData>({
    resolver: yupResolver(validationSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });
  const { handleSubmit, setError } = methods;
  const onSubmit = handleSubmit(async (formData) => {
    const { data, status } = await fetchAuthLogin(formData);
    if (status === HTTP_CODES_ENUM.UNPROCESSABLE_ENTITY) {
      (Object.keys(data.errors) as Array<keyof SignInFormData>).forEach(
        (key) => {
          setError(key, {
            type: "manual",
            message: t(
              `sign-in:inputs.${key}.validation.server.${data.errors[key]}`
            ),
          });
        }
      );
      return;
    }
    if (status === HTTP_CODES_ENUM.OK) {
      setTokensInfo({
        token: data.token,
        refreshToken: data.refreshToken,
        tokenExpires: data.tokenExpires,
      });
      setUser(data.user);
    }
  });
  return (
    <FormProvider {...methods}>
      <Container maxWidth="xs">
        <form onSubmit={onSubmit}>
          <Grid container spacing={2} mb={2}>
            <Grid size={{ xs: 12 }} mt={3}>
              <Typography variant="h6">{t("sign-in:title")}</Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<SignInFormData>
                name="email"
                label={t("sign-in:inputs.email.label")}
                type="email"
                testId="email"
                autoFocus
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<SignInFormData>
                name="password"
                label={t("sign-in:inputs.password.label")}
                type="password"
                testId="password"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <LinkItem
                component={Link}
                href="/forgot-password"
                data-testid="forgot-password"
              >
                {t("sign-in:actions.forgotPassword")}
              </LinkItem>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormActions />
              {IS_SIGN_UP_ENABLED && (
                <Box ml={1} component="span">
                  <Button
                    variant="contained"
                    color="inherit"
                    LinkComponent={Link}
                    href="/sign-up"
                    data-testid="create-account"
                  >
                    {t("sign-in:actions.createAccount")}
                  </Button>
                </Box>
              )}
            </Grid>
            {[isGoogleAuthEnabled, isFacebookAuthEnabled].some(Boolean) && (
              <Grid size={{ xs: 12 }}>
                <Divider sx={{ mb: 2 }}>
                  <Chip label={t("sign-in:or")} />
                </Divider>
                <SocialAuth />
              </Grid>
            )}
          </Grid>
        </form>
      </Container>
    </FormProvider>
  );
}
function SignIn() {
  return <Form />;
}
export default withPageRequiredGuest(SignIn);
----------------------------------------

// ./src/app/[language]/sign-in/page.tsx
----------------------------------------
import type { Metadata } from "next";
import SignIn from "./page-content";
import { getServerTranslation } from "@/services/i18n";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(params.language, "sign-in");
  return {
    title: t("title"),
  };
}
export default function Page() {
  return <SignIn />;
}
----------------------------------------

// ./src/app/[language]/sign-up/page-content.tsx
----------------------------------------
"use client";
import Button from "@mui/material/Button";
import withPageRequiredGuest from "@/services/auth/with-page-required-guest";
import { useForm, FormProvider, useFormState } from "react-hook-form";
import {
  useAuthLoginService,
  useAuthSignUpService,
} from "@/services/api/services/auth";
import useAuthActions from "@/services/auth/use-auth-actions";
import useAuthTokens from "@/services/auth/use-auth-tokens";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import FormTextInput from "@/components/form/text-input/form-text-input";
import FormCheckboxInput from "@/components/form/checkbox/form-checkbox";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import Link from "@/components/link";
import Box from "@mui/material/Box";
import MuiLink from "@mui/material/Link";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import { useTranslation } from "@/services/i18n/client";
import Divider from "@mui/material/Divider";
import Chip from "@mui/material/Chip";
import SocialAuth from "@/services/social-auth/social-auth";
import { isGoogleAuthEnabled } from "@/services/social-auth/google/google-config";
import { isFacebookAuthEnabled } from "@/services/social-auth/facebook/facebook-config";
type TPolicy = {
  id: string;
  name: string;
};
type SignUpFormData = {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  policy: TPolicy[];
};
const useValidationSchema = () => {
  const { t } = useTranslation("sign-up");
  return yup.object().shape({
    firstName: yup
      .string()
      .required(t("sign-up:inputs.firstName.validation.required")),
    lastName: yup
      .string()
      .required(t("sign-up:inputs.lastName.validation.required")),
    email: yup
      .string()
      .email(t("sign-up:inputs.email.validation.invalid"))
      .required(t("sign-up:inputs.email.validation.required")),
    password: yup
      .string()
      .min(6, t("sign-up:inputs.password.validation.min"))
      .required(t("sign-up:inputs.password.validation.required")),
    policy: yup
      .array()
      .min(1, t("sign-up:inputs.policy.validation.required"))
      .required(),
  });
};
function FormActions() {
  const { t } = useTranslation("sign-up");
  const { isSubmitting } = useFormState();
  return (
    <Button
      variant="contained"
      color="primary"
      type="submit"
      disabled={isSubmitting}
      data-testid="sign-up-submit"
    >
      {t("sign-up:actions.submit")}
    </Button>
  );
}
function Form() {
  const { setUser } = useAuthActions();
  const { setTokensInfo } = useAuthTokens();
  const fetchAuthLogin = useAuthLoginService();
  const fetchAuthSignUp = useAuthSignUpService();
  const { t } = useTranslation("sign-up");
  const validationSchema = useValidationSchema();
  const policyOptions = [
    { id: "policy", name: t("sign-up:inputs.policy.agreement") },
  ];
  const methods = useForm<SignUpFormData>({
    resolver: yupResolver(validationSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      password: "",
      policy: [],
    },
  });
  const { handleSubmit, setError } = methods;
  const onSubmit = handleSubmit(async (formData) => {
    const { data: dataSignUp, status: statusSignUp } =
      await fetchAuthSignUp(formData);
    if (statusSignUp === HTTP_CODES_ENUM.UNPROCESSABLE_ENTITY) {
      (Object.keys(dataSignUp.errors) as Array<keyof SignUpFormData>).forEach(
        (key) => {
          setError(key, {
            type: "manual",
            message: t(
              `sign-up:inputs.${key}.validation.server.${dataSignUp.errors[key]}`
            ),
          });
        }
      );
      return;
    }
    const { data: dataSignIn, status: statusSignIn } = await fetchAuthLogin({
      email: formData.email,
      password: formData.password,
    });
    if (statusSignIn === HTTP_CODES_ENUM.OK) {
      setTokensInfo({
        token: dataSignIn.token,
        refreshToken: dataSignIn.refreshToken,
        tokenExpires: dataSignIn.tokenExpires,
      });
      setUser(dataSignIn.user);
    }
  });
  return (
    <FormProvider {...methods}>
      <Container maxWidth="xs">
        <form onSubmit={onSubmit}>
          <Grid container spacing={2} mb={2}>
            <Grid size={{ xs: 12 }} mt={3}>
              <Typography variant="h6">{t("sign-up:title")}</Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<SignUpFormData>
                name="firstName"
                label={t("sign-up:inputs.firstName.label")}
                type="text"
                autoFocus
                testId="first-name"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<SignUpFormData>
                name="lastName"
                label={t("sign-up:inputs.lastName.label")}
                type="text"
                testId="last-name"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<SignUpFormData>
                name="email"
                label={t("sign-up:inputs.email.label")}
                type="email"
                testId="email"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormTextInput<SignUpFormData>
                name="password"
                label={t("sign-up:inputs.password.label")}
                type="password"
                testId="password"
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormCheckboxInput
                name="policy"
                label=""
                testId="privacy"
                options={policyOptions}
                keyValue="id"
                keyExtractor={(option) => option.id.toString()}
                renderOption={(option) => (
                  <span>
                    {option.name}
                    <MuiLink href="/privacy-policy" target="_blank">
                      {t("sign-up:inputs.policy.label")}
                    </MuiLink>
                  </span>
                )}
              />
            </Grid>
            <Grid size={{ xs: 12 }}>
              <FormActions />
              <Box ml={1} component="span">
                <Button
                  variant="contained"
                  color="inherit"
                  LinkComponent={Link}
                  data-testid="login"
                  href="/sign-in"
                >
                  {t("sign-up:actions.accountAlreadyExists")}
                </Button>
              </Box>
            </Grid>
            {[isGoogleAuthEnabled, isFacebookAuthEnabled].some(Boolean) && (
              <Grid size={{ xs: 12 }}>
                <Divider sx={{ mb: 2 }}>
                  <Chip label={t("sign-up:or")} />
                </Divider>
                <SocialAuth />
              </Grid>
            )}
          </Grid>
        </form>
      </Container>
    </FormProvider>
  );
}
function SignUp() {
  return <Form />;
}
export default withPageRequiredGuest(SignUp);
----------------------------------------

// ./src/app/[language]/sign-up/page.tsx
----------------------------------------
import type { Metadata } from "next";
import SignUp from "./page-content";
import { getServerTranslation } from "@/services/i18n";
import { redirect } from "next/navigation";
import { IS_SIGN_UP_ENABLED } from "@/services/auth/config";
type Props = {
  params: Promise<{ language: string; slug: string }>;
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(params.language, "sign-up");
  return {
    title: t("title"),
  };
}
export default function SignUpPage() {
  if (!IS_SIGN_UP_ENABLED) {
    return redirect("/");
  }
  return <SignUp />;
}
----------------------------------------

// ./src/app/[language]/utils/formatters.tsx
----------------------------------------
export const formatCurrency = (value: number): string => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(value);
  };
----------------------------------------

// ./src/app/[language]/vendor/components/vender-edit.tsx
----------------------------------------
"use client";
import { useState } from "react";
import { useTranslation } from "@/services/i18n/client";
import { useSnackbar } from "@/hooks/use-snackbar";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import Button from "@mui/material/Button";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Box from "@mui/material/Box";
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import ListAltIcon from '@mui/icons-material/ListAlt';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import { mockVendorDetails } from "../mock-data";
import { InventorySection } from './VendorEditView/InventorySection';
import { CalendarSection } from './VendorEditView/CalendarSection';
import FormTextInput from "@/components/form/text-input/form-text-input";
import FormSelectInput from "@/components/form/select/form-select";
import { FormProvider, useForm } from "react-hook-form";
interface VendorEditProps {
  vendorId: string;
  onBackClick: () => void;
}
interface BaseForm {
  name: string;
  description?: string;
  price?: string;
}
interface TourForm extends BaseForm {
  duration: string;
  maxParticipants: string;
}
interface TicketForm extends BaseForm {
  type: string;
  validFrom: string;
  validTo: string;
  availableCount: string;
}
interface RentalForm extends BaseForm {
  category: string;
  totalUnits: string;
}
interface LessonForm extends BaseForm {
  instructor: string;
  duration: string;
}
type TabValue = "details" | "calendar" | "inventory";
export default function VendorEdit({ vendorId, onBackClick }: VendorEditProps) {
  const { t } = useTranslation("vendor");
  const { enqueueSnackbar } = useSnackbar();
  const vendor = mockVendorDetails.find((v) => v.id === vendorId);
  const [activeTab, setActiveTab] = useState<TabValue>("details");
  const methods = useForm<TourForm | TicketForm | RentalForm | LessonForm>({
    defaultValues: {
      name: "",
      description: "",
      ...(vendor?.type === 'tours' && {
        duration: "",
        maxParticipants: "",
      }),
      ...(vendor?.type === 'tickets' && {
        type: "",
        validFrom: "",
        validTo: "",
        availableCount: "",
      }),
      ...(vendor?.type === 'rentals' && {
        category: "",
        totalUnits: "",
      }),
      ...(vendor?.type === 'lessons' && {
        instructor: "",
        duration: "",
      }),
    },
  });
  const handleTabChange = (_event: React.SyntheticEvent, newValue: TabValue) => {
    setActiveTab(newValue);
  };
  const handleSave = async (formData: TourForm | TicketForm | RentalForm | LessonForm) => {
    console.log('Saving product:', formData);
    enqueueSnackbar("Changes saved successfully!", { variant: "success" });
  };
  if (!vendor) return null;
  const renderProductForm = () => {
    if (!vendor) return null;
    switch (vendor.type) {
      case "tours":
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              Add New Tour
            </Typography>
            <Grid container spacing={3}>
              <Grid size={{ xs: 12 }}>
                <FormTextInput
                  name="name"
                  label="Tour Name"
                  testId="tour-name"
                />
              </Grid>
              <Grid size={{ xs: 12 }}>
                <FormTextInput
                  name="description"
                  label="Description"
                  multiline
                  minRows={3}
                  testId="tour-description"
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <FormTextInput
                  name="duration"
                  label="Duration"
                  testId="tour-duration"
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <FormTextInput
                  name="price"
                  label="Price"
                  type="number"
                  testId="tour-price"
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <FormTextInput
                  name="maxParticipants"
                  label="Max Participants"
                  type="number"
                  testId="tour-max-participants"
                />
              </Grid>
            </Grid>
          </Box>
        );
      case "tickets":
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              Add New Ticket Type
            </Typography>
            <Grid container spacing={3}>
              <Grid size={{ xs: 12 }}>
                <FormTextInput
                  name="name"
                  label="Ticket Name"
                  testId="ticket-name"
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <FormSelectInput
                  name="type"
                  label="Ticket Type"
                  options={[
                    { id: "day-pass", name: "Day Pass" },
                    { id: "season-pass", name: "Season Pass" },
                    { id: "multi-day", name: "Multi-Day Pass" },
                  ]}
                  keyValue="id"
                  renderOption={(option) => option.name}
                  testId="ticket-type"
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <FormTextInput
                  name="price"
                  label="Price"
                  type="number"
                  testId="ticket-price"
                />
              </Grid>
            </Grid>
          </Box>
        );
      case "rentals":
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              Add Rental Equipment
            </Typography>
            <Grid container spacing={3}>
              <Grid size={{ xs: 12 }}>
                <FormTextInput
                  name="name"
                  label="Equipment Name"
                  testId="rental-name"
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <FormTextInput
                  name="category"
                  label="Category"
                  testId="rental-category"
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <FormTextInput
                  name="totalUnits"
                  label="Total Units"
                  type="number"
                  testId="rental-units"
                />
              </Grid>
            </Grid>
          </Box>
        );
      case "lessons":
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              Add New Lesson
            </Typography>
            <Grid container spacing={3}>
              <Grid size={{ xs: 12 }}>
                <FormTextInput
                  name="name"
                  label="Lesson Name"
                  testId="lesson-name"
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <FormTextInput
                  name="instructor"
                  label="Instructor"
                  testId="lesson-instructor"
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <FormTextInput
                  name="duration"
                  label="Duration"
                  testId="lesson-duration"
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <FormTextInput
                  name="price"
                  label="Price"
                  type="number"
                  testId="lesson-price"
                />
              </Grid>
            </Grid>
          </Box>
        );
    }
  };
  return (
    <FormProvider {...methods}>
      <Container maxWidth="lg">
        <form onSubmit={methods.handleSubmit(handleSave)}>
          <Grid container spacing={3} pt={3}>
            <Grid
              size={{ xs: 12 }}
              display="flex"
              alignItems="center"
              justifyContent="space-between"
            >
              <Button startIcon={<ArrowBackIcon />} onClick={onBackClick}>
                {t("vendorEdit.actions.cancel")}
              </Button>
              <Button
                variant="contained"
                color="primary"
                type="submit"
              >
                {t("vendorEdit.actions.save")}
              </Button>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <Typography variant="h4" gutterBottom>
                {vendor.name}
              </Typography>
              <Typography variant="body1" color="textSecondary" gutterBottom>
                {vendor.description}
              </Typography>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 3 }}>
                <Tab
                  icon={<AddCircleIcon />}
                  label="Add Product"
                  value="details"
                />
                <Tab
                  icon={<CalendarMonthIcon />}
                  label="Schedule"
                  value="calendar"
                />
                <Tab 
                  icon={<ListAltIcon />} 
                  label="Inventory" 
                  value="inventory" 
                />
              </Tabs>
            </Grid>
            <Grid size={{ xs: 12 }}>
              <Card>
                <CardContent>
                  {activeTab === "calendar" && (
                    <CalendarSection vendor={vendor} />
                  )}
                  {activeTab === "inventory" && (
                    <InventorySection 
                    vendor={vendor}
                    onEditClick={() => setActiveTab("details")}
                    />
                  )}
                  {activeTab === "details" && renderProductForm()}
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </form>
      </Container>
    </FormProvider>
  );
}
----------------------------------------

// ./src/app/[language]/vendor/components/vender-list.tsx
----------------------------------------
"use client";
import { useTranslation } from "@/services/i18n/client";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Box from "@mui/material/Box";
import Chip from "@mui/material/Chip";
import { styled } from "@mui/material/styles";
import { mockVendorDetails } from "../mock-data";
import { VendorStatus } from "@/types/vendor-types";
import FooterLink from "@/components/footer-link";
interface VendorListProps {
  onVendorSelect: (vendorId: string) => void;
}
const StatusChip = styled(Chip, {
  shouldForwardProp: (prop) => prop !== "status",
})<{ status: VendorStatus }>(({ theme, status }) => ({
  fontWeight: 500,
  backgroundColor:
    status === "published"
      ? theme.palette.success.main
      : status === "pending"
      ? theme.palette.warning.main
      : theme.palette.error.main,
  color: theme.palette.common.white,
}));
const VendorCard = styled(Card)(({ theme }) => ({
  cursor: "pointer",
  transition: "transform 0.2s",
  "&:hover": {
    transform: "translateY(-4px)",
    boxShadow: theme.shadows[4],
  },
}));
export default function VendorList({ onVendorSelect }: VendorListProps) {
  const { t } = useTranslation("vendor");
  return (
    <Container maxWidth="md">
      <Grid container spacing={3} pt={3}>
        <Grid size={{ xs: 12 }} mb={4}>
          <Typography variant="h3" gutterBottom>
            {t("vendorList.title")}
          </Typography>
          <Typography variant="body1" color="textSecondary">
            {t("vendorList.description")}
          </Typography>
        </Grid>
        {mockVendorDetails.map((profile) => (
          <Grid key={profile.id} size={{ xs: 12 }}>
            <VendorCard onClick={() => onVendorSelect(profile.id)}>
              <CardContent>
                <Box
                  display="flex"
                  alignItems="flex-start"
                  justifyContent="space-between"
                >
                  <Box flex={1}>
                    <Box display="flex" alignItems="center" mb={1}>
                      <Typography variant="h5" component="h2">
                        {profile.name}
                      </Typography>
                      <Box ml={2}>
                        <StatusChip
                          label={
                            profile.status.charAt(0).toUpperCase() +
                            profile.status.slice(1)
                          }
                          status={profile.status}
                          size="small"
                        />
                      </Box>
                    </Box>
                    <Typography
                      variant="body1"
                      color="textSecondary"
                      gutterBottom
                    >
                      {profile.description}
                    </Typography>
                    {profile.actionRequired && (
                      <Typography color="error" variant="body2">
                        {profile.actionRequired}
                      </Typography>
                    )}
                    <Typography variant="caption" color="textSecondary">
                      {t("vendorList.labels.lastUpdated")}:{" "}
                      {profile.lastUpdated}
                    </Typography>
                  </Box>
                </Box>
              </CardContent>
            </VendorCard>
          </Grid>
        ))}
      </Grid>
      <FooterLink />
    </Container>
  );
}
----------------------------------------

// ./src/app/[language]/vendor/components/vender-view.tsx
----------------------------------------
"use client";
import { useTranslation } from "@/services/i18n/client";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import Button from "@mui/material/Button";
import Divider from "@mui/material/Divider";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import EditIcon from "@mui/icons-material/Edit";
import { mockVendorDetails } from "../mock-data";
import FooterLink from "@/components/footer-link";
import ToursView from "./VendorView/ToursView";
import TicketsView from "./VendorView/TicketsView";
import RentalsView from "./VendorView/RentalsView";
import LessonsView from "./VendorView/LessonsView";
interface VendorViewProps {
  vendorId: string;
  onBackClick: () => void;
  onEditClick: () => void;
}
export default function VendorView({
  vendorId,
  onBackClick,
  onEditClick,
}: VendorViewProps) {
  const { t } = useTranslation("vendor");
  const vendor = mockVendorDetails.find((v) => v.id === vendorId);
  if (!vendor) return null;
  const renderContent = () => {
    switch (vendor.type) {
      case "tours":
        return vendor.tours ? <ToursView tours={vendor.tours} /> : null;
        case "tickets":
          return vendor.tickets ? <TicketsView tickets={vendor.tickets} onEditClick={onEditClick} /> : null;
        case "rentals":
          return vendor.rentals ? (
            <RentalsView 
              rentals={vendor.rentals} 
              onEditClick={onEditClick}  // Pass the onEditClick method here
            /> 
          ) : null;
        case "lessons":
        return vendor.lessons ? <LessonsView lessons={vendor.lessons} /> : null;
      default:
        return null;
    }
  };
  return (
    <Container maxWidth="md">
      <Grid container spacing={3} pt={3}>
        {/* Header with navigation */}
        <Grid
          size={{ xs: 12 }}
          display="flex"
          alignItems="center"
          justifyContent="space-between"
        >
          <Button startIcon={<ArrowBackIcon />} onClick={onBackClick}>
            {t("vendorView.actions.back")}
          </Button>
          <Button
            variant="contained"
            startIcon={<EditIcon />}
            onClick={onEditClick}
          >
            {t("vendorView.actions.edit")}
          </Button>
        </Grid>
        {/* Vendor header information */}
        <Grid size={{ xs: 12 }}>
          <Typography variant="h4" gutterBottom>
            {vendor.name}
          </Typography>
          <Typography variant="body1" paragraph>
            {vendor.description}
          </Typography>
          <Divider sx={{ my: 2 }} />
        </Grid>
        {/* Type-specific content */}
        <Grid size={{ xs: 12 }}>{renderContent()}</Grid>
      </Grid>
      <FooterLink />
    </Container>
  );
}
----------------------------------------

// ./src/app/[language]/vendor/components/VendorEditView/CalendarSection.tsx
----------------------------------------
import { useState } from "react";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import ButtonGroup from "@mui/material/ButtonGroup";
import Typography from "@mui/material/Typography";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import { Calendar } from "@/components/calendar";
import { Calendar as CalendarIcon } from "lucide-react";
import { VendorProfileDetails, RentalProduct } from "@/types/vendor-types";
import { CalendarView, CalendarEvent } from "@/components/calendar/types";
const createRentalEvents = (rentals: RentalProduct[]): CalendarEvent[] => {
  return rentals.flatMap(rental => {
    const events: CalendarEvent[] = [];
    if (rental.dueIn > 0) {
      events.push({
        id: `return-${rental.id}`,
        title: `${rental.name} Return`,
        start: new Date(), 
        type: 'rental',
        status: 'booked',
        metadata: {
          type: 'rental',
          data: {
            itemName: rental.name,
            condition: rental.condition,
            pickupLocation: 'Main Store',
            price: rental.sizes[0]?.pricePerDay || 0,
            notes: `${rental.dueIn} units due`
          }
        }
      });
    }
    if (rental.dueOut > 0) {
      events.push({
        id: `pickup-${rental.id}`,
        title: `${rental.name} Pickup`,
        start: new Date(), 
        type: 'rental',
        status: 'booked',
        metadata: {
          type: 'rental',
          data: {
            itemName: rental.name,
            condition: rental.condition,
            pickupLocation: 'Main Store',
            price: rental.sizes[0]?.pricePerDay || 0,
            notes: `${rental.dueOut} units to pickup`
          }
        }
      });
    }
    rental.maintenanceSchedule.forEach((maintenance) => {
      events.push({
        id: `maintenance-${maintenance.id}`,
        title: `Maintenance: ${rental.name}`,
        start: new Date(maintenance.startDate),
        end: new Date(maintenance.endDate),
        type: 'rental',
        status: 'booked',
        metadata: {
          type: 'rental',
          data: {
            itemName: rental.name,
            condition: rental.condition,
            pickupLocation: 'Maintenance Area',
            price: 0,
            notes: maintenance.reason
          }
        }
      });
    });
    return events;
  });
};
export function CalendarSection({ vendor }: { vendor: VendorProfileDetails }) {
  const [view, setView] = useState<CalendarView>("week");
  const events = vendor.rentals ? createRentalEvents(vendor.rentals) : [];
  if (!vendor.rentals || vendor.rentals.length === 0) {
    return (
      <Card>
        <CardContent>
          <Typography variant="body2" color="textSecondary">
            No rental items available for calendar view
          </Typography>
        </CardContent>
      </Card>
    );
  }
  return (
    <Card>
      <CardContent>
        <Box className="flex justify-between items-center mb-4">
          <Box className="flex items-center gap-2">
            <CalendarIcon className="text-primary" size={24} />
            <Typography variant="h6">Rental Calendar</Typography>
          </Box>
          <Box className="flex items-center gap-4">
            <ButtonGroup>
              {(["week", "month"] as CalendarView[]).map((viewOption) => (
                <Button
                  key={viewOption}
                  variant={view === viewOption ? "contained" : "outlined"}
                  onClick={() => setView(viewOption)}
                >
                  {viewOption.charAt(0).toUpperCase() + viewOption.slice(1)}
                </Button>
              ))}
            </ButtonGroup>
          </Box>
        </Box>
        <Calendar events={events} initialView={view} height="600px" />
      </CardContent>
    </Card>
  );
}
----------------------------------------

// ./src/app/[language]/vendor/components/VendorEditView/InventorySection.tsx
----------------------------------------
"use client";
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import Grid from '@mui/material/Grid';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import Chip from '@mui/material/Chip';
import { Plus, Edit2, AlertTriangle } from 'lucide-react';
import { VendorProfileDetails } from '@/types/vendor-types';
import { RentalEditSection } from './RentalEditSection';
interface InventorySectionProps {
  vendor: VendorProfileDetails;
  onEditClick: () => void;
}
export function InventorySection({ vendor, onEditClick }: InventorySectionProps) {
  if (vendor.type === 'rentals') {
    return <RentalEditSection vendor={vendor} onEditClick={onEditClick} />;
  }
  const getInventoryItems = () => {
    if (vendor.rentals) {
      return vendor.rentals;
    }
    return [];
  };
  const items = getInventoryItems();
  return (
    <Box>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Box display="flex" justifyContent="space-between" mb={3}>
            <Typography variant="h6">Inventory Management</Typography>
            <Button startIcon={<Plus />} variant="contained">
              Add New Item
            </Button>
          </Box>
        </Grid>
        <Grid item xs={12}>
          <Card>
            <CardContent>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Item Name</TableCell>
                    <TableCell>Category</TableCell>
                    <TableCell align="center">Total Units</TableCell>
                    <TableCell align="center">Available</TableCell>
                    <TableCell align="center">In Use</TableCell>
                    <TableCell align="center">Status</TableCell>
                    <TableCell align="right">Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {items.map((item) => (
                    <TableRow key={item.id}>
                      <TableCell>{item.name}</TableCell>
                      <TableCell>{item.category}</TableCell>
                      <TableCell align="center">{item.totalUnits}</TableCell>
                      <TableCell align="center">{item.availableUnits}</TableCell>
                      <TableCell align="center">{item.bookedUnits}</TableCell>
                      <TableCell align="center">
                        <Chip
                          label={item.availableUnits < item.totalUnits * 0.2 ? 'Low Stock' : 'In Stock'}
                          color={item.availableUnits < item.totalUnits * 0.2 ? 'warning' : 'success'}
                          size="small"
                        />
                      </TableCell>
                      <TableCell align="right">
                        <IconButton size="small" sx={{ mr: 1 }}>
                          <Edit2 size={16} />
                        </IconButton>
                        {item.availableUnits < item.totalUnits * 0.2 && (
                          <IconButton size="small" color="warning">
                            <AlertTriangle size={16} />
                          </IconButton>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
}
----------------------------------------

// ./src/app/[language]/vendor/components/VendorEditView/RentalEditSection.tsx
----------------------------------------
import { useState } from 'react';
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import Typography from '@mui/material/Typography';
import Grid from '@mui/material/Grid';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Badge from '@mui/material/Badge'
import { Package, Calendar, BarChart3, Edit, Trash2, Plus } from 'lucide-react';
import { VendorProfileDetails } from '@/types/vendor-types';
interface RentalEditSectionProps {
  vendor: VendorProfileDetails;
  onEditClick: () => void; 
}
export function RentalEditSection({ vendor, onEditClick }: RentalEditSectionProps) {
  const [activeTab, setActiveTab] = useState('inventory');
  if (vendor.type !== 'rentals' || !vendor.rentals) return null;
  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h5">Rental Management</Typography>
        <Button 
          variant="contained" 
          startIcon={<Plus size={18} />}
          onClick={() => onEditClick()} 
        >
          Add New Item
        </Button>
      </Box>
      <Tabs 
        value={activeTab}
        onChange={(_e, v) => setActiveTab(v)}
        sx={{ mb: 3 }}
      >
        <Tab 
          icon={<Package className="w-4 h-4" />}
          label="Inventory"
          value="inventory"
        />
        <Tab 
          icon={<Calendar className="w-4 h-4" />}
          label="Calendar"
          value="calendar"
        />
        <Tab 
          icon={<BarChart3 className="w-4 h-4" />}
          label="Analytics"
          value="analytics"
        />
      </Tabs>
      {activeTab === 'inventory' && (
        <Grid container spacing={3}>
          {vendor.rentals.map(item => (
            <Grid item xs={12} md={6} key={item.id}>
              <Card>
                <Box sx={{ p: 3 }}>
                  <Box display="flex" justifyContent="space-between" mb={2}>
                    <div>
                      <Typography variant="h6">{item.name}</Typography>
                      <Typography variant="body2" color="text.secondary">
                        {item.category}
                      </Typography>
                    </div>
                    <Box>
                      <IconButton size="small" sx={{ mr: 1 }}>
                        <Edit size={16} />
                      </IconButton>
                      <IconButton size="small">
                        <Trash2 size={16} />
                      </IconButton>
                    </Box>
                  </Box>
                  {item.sizes && (
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>Size</TableCell>
                          <TableCell align="center">Available</TableCell>
                          <TableCell align="right">Price/Day</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {item.sizes.map(size => (
                          <TableRow key={size.id}>
                            <TableCell>{size.label}</TableCell>
                            <TableCell align="center">
                              <Badge
                                color={size.available < 2 ? 'error' : 'success'}
                                badgeContent={size.available}
                              >
                                <Box component="span">/{size.total}</Box>
                              </Badge>
                            </TableCell>
                            <TableCell align="right">
                              ${size.pricePerDay}
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  )}
                </Box>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}
      {activeTab === 'calendar' && (
        <Card>
          <Box sx={{ p: 3 }}>
            <Typography>Calendar view coming soon...</Typography>
          </Box>
        </Card>
      )}
      {activeTab === 'analytics' && (
        <Card>
          <Box sx={{ p: 3 }}>
            <Typography>Analytics view coming soon...</Typography>
          </Box>
        </Card>
      )}
    </Box>
  );
}
----------------------------------------

// ./src/app/[language]/vendor/components/VendorView/LessonsView.tsx
----------------------------------------
import { useState } from 'react';
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import Grid from '@mui/material/Grid';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Button from '@mui/material/Button';
import Chip from '@mui/material/Chip';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import { Calendar, Users, Award, Book, DollarSign, Star, Plus } from 'lucide-react';
import { LessonProduct } from '@/types/vendor-types';
import { ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';
const COLORS = ['#3B82F6', '#8B5CF6', '#10B981', '#F59E0B'];
interface LessonsViewProps {
  lessons: LessonProduct[];
  onEditClick?: () => void;
}
export default function LessonsView({ lessons, onEditClick }: LessonsViewProps) {
  const [activeTab, setActiveTab] = useState('dashboard');
  const totalBookings = lessons.reduce((sum, lesson) => 
    lesson.status === 'booked' ? sum + 1 : sum, 0);
  const averagePrice = lessons.reduce((sum, lesson) => 
    sum + lesson.price, 0) / lessons.length;
  const totalRevenue = lessons.reduce((sum, lesson) => 
    lesson.status === 'booked' ? sum + lesson.price : sum, 0);
  const bookedLessons = lessons.filter(l => l.status === 'booked').length;
  const lessonsByType = [
    { name: 'Private', value: lessons.filter(l => l.maxStudents === 1).length },
    { name: 'Small Group', value: lessons.filter(l => l.maxStudents > 1 && l.maxStudents <= 4).length },
    { name: 'Group', value: lessons.filter(l => l.maxStudents > 4).length }
  ];
  const bookingData = Array.from({ length: 7 }, (_, i) => ({
    date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toLocaleDateString(),
    bookings: Math.floor(Math.random() * 10),
  })).reverse();
  return (
    <Box>
      {/* Quick Stats Section */}
      <Grid container spacing={2} mb={3}>
        <Grid item xs={3}>
          <Card>
            <CardContent>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <Book className="text-primary" size={20} />
                <Typography variant="h4">{totalBookings}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Active Bookings
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={3}>
          <Card>
            <CardContent>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <Award className="text-success" size={20} />
                <Typography variant="h4">{bookedLessons}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Booked Lessons
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={3}>
          <Card>
            <CardContent>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <DollarSign className="text-warning" size={20} />
                <Typography variant="h4">${averagePrice.toFixed(0)}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Average Lesson Price
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={3}>
          <Card>
            <CardContent>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <Star className="text-info" size={20} />
                <Typography variant="h4">${totalRevenue.toLocaleString()}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Total Revenue
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
      {/* Main Content */}
      <Box sx={{ width: '100%', mb: 3 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Tabs 
            value={activeTab} 
            onChange={(_e, v) => setActiveTab(v)}
          >
            <Tab 
              value="dashboard" 
              label="Dashboard" 
              icon={<Award className="w-4 h-4" />}
              iconPosition="start"
            />
            <Tab 
              value="schedule" 
              label="Schedule" 
              icon={<Calendar className="w-4 h-4" />}
              iconPosition="start"
            />
            <Tab 
              value="instructors" 
              label="Instructors" 
              icon={<Users className="w-4 h-4" />}
              iconPosition="start"
            />
          </Tabs>
          <Button 
            variant="contained" 
            startIcon={<Plus size={20} />}
            onClick={onEditClick}
          >
            Add New Lesson
          </Button>
        </Box>
        {activeTab === 'dashboard' && (
          <Grid container spacing={3}>
            {/* Lesson Distribution Chart */}
            <Grid item xs={12} md={6}>
              <Card>
                <Box p={3}>
                  <Typography variant="h6" gutterBottom>
                    Lesson Type Distribution
                  </Typography>
                  <Box height={300}>
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={lessonsByType}
                          dataKey="value"
                          nameKey="name"
                          cx="50%"
                          cy="50%"
                          outerRadius={100}
                          label
                        >
                          {lessonsByType.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip />
                      </PieChart>
                    </ResponsiveContainer>
                  </Box>
                </Box>
              </Card>
            </Grid>
            {/* Booking Timeline Chart */}
            <Grid item xs={12} md={6}>
              <Card>
                <Box p={3}>
                  <Typography variant="h6" gutterBottom>
                    Recent Booking Activity
                  </Typography>
                  <Box height={300}>
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={bookingData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="date" />
                        <YAxis />
                        <Tooltip />
                        <Line type="monotone" dataKey="bookings" stroke="#3B82F6" />
                      </LineChart>
                    </ResponsiveContainer>
                  </Box>
                </Box>
              </Card>
            </Grid>
          </Grid>
        )}
        {activeTab === 'schedule' && (
          <Card>
            <CardContent>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Lesson</TableCell>
                    <TableCell>Instructor</TableCell>
                    <TableCell>Date & Time</TableCell>
                    <TableCell>Duration</TableCell>
                    <TableCell>Students</TableCell>
                    <TableCell>Status</TableCell>
                    <TableCell align="right">Price</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {lessons.map((lesson) => (
                    <TableRow key={lesson.id}>
                      <TableCell>{lesson.name}</TableCell>
                      <TableCell>{lesson.instructor}</TableCell>
                      <TableCell>
                        {lesson.scheduledDate || 'Flexible'}
                      </TableCell>
                      <TableCell>{lesson.duration}</TableCell>
                      <TableCell>
                        {lesson.maxStudents === 1 ? 'Private' : `Up to ${lesson.maxStudents}`}
                      </TableCell>
                      <TableCell>
                        <Chip 
                          label={lesson.status}
                          color={
                            lesson.status === 'available' ? 'success' :
                            lesson.status === 'booked' ? 'primary' : 'warning'
                          }
                          size="small"
                        />
                      </TableCell>
                      <TableCell align="right">
                        ${lesson.price}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        )}
        {activeTab === 'instructors' && (
          <Grid container spacing={2}>
            {lessons.reduce((acc, lesson) => {
              const existingInstructor = acc.find(i => i.name === lesson.instructor);
              if (!existingInstructor) {
                acc.push({
                  name: lesson.instructor,
                  expertise: lesson.expertise,
                  languages: lesson.languages,
                  totalLessons: 1,
                  rating: 4.5 + Math.random() * 0.5, // Sample rating
                });
              } else {
                existingInstructor.totalLessons++;
              }
              return acc;
            }, [] as Array<{
              name: string;
              expertise: string;
              languages: string[];
              totalLessons: number;
              rating: number;
            }>).map((instructor, index) => (
              <Grid item xs={12} md={4} key={index}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      {instructor.name}
                    </Typography>
                    <Box display="flex" flexDirection="column" gap={1}>
                      <Typography variant="body2" color="text.secondary">
                        Expertise: {instructor.expertise}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        Languages: {instructor.languages.join(', ')}
                      </Typography>
                      <Box display="flex" alignItems="center" gap={1}>
                        <Star className="text-warning" size={16} />
                        <Typography variant="body2">
                          {instructor.rating.toFixed(1)} Rating
                        </Typography>
                      </Box>
                      <Typography variant="body2">
                        {instructor.totalLessons} Lessons
                      </Typography>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        )}
      </Box>
    </Box>
  );
}
----------------------------------------

// ./src/app/[language]/vendor/components/VendorView/RentalsView.tsx
----------------------------------------
import { useState } from "react";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import Tabs from "@mui/material/Tabs";
import Tab from "@mui/material/Tab";
import IconButton from "@mui/material/IconButton";
import Chip from "@mui/material/Chip";
import Dialog from "@mui/material/Dialog";
import DialogTitle from "@mui/material/DialogTitle";
import DialogContent from "@mui/material/DialogContent";
import DialogActions from "@mui/material/DialogActions";
import {
  Package,
  Calendar,
  Settings,
  Edit,
  Plus,
  AlertTriangle,
} from "lucide-react";
import { RentalProduct, Size } from "@/types/vendor-types";
import { StatCard } from "./styled/vendor-view-styled";
import { CalendarSection } from "../VendorEditView/CalendarSection";
interface RentalsViewProps {
  rentals: RentalProduct[];
  onEditClick: () => void;
}
export default function RentalsView({
  rentals,
  onEditClick,
}: RentalsViewProps) {
  const [activeTab, setActiveTab] = useState("inventory");
  const [selectedProduct, setSelectedProduct] = useState<RentalProduct | null>(
    null
  );
  const totalAvailable = rentals.reduce(
    (acc, rental) => acc + rental.availableUnits,
    0
  );
  const totalBooked = rentals.reduce(
    (acc, rental) => acc + rental.bookedUnits,
    0
  );
  const totalDueToday = rentals.reduce((acc, rental) => acc + rental.dueIn, 0);
  const totalDueOut = rentals.reduce((acc, rental) => acc + rental.dueOut, 0);
  const lowStockItems = rentals.filter(
    (rental) => rental.availableUnits < rental.totalUnits * 0.2
  );
  const handleCloseEditModal = () => {
    setSelectedProduct(null);
  };
  return (
    <>
      <Grid container spacing={3}>
        {/* Quick Stats */}
        <Grid size={{ xs: 12 }} container spacing={2}>
          <Grid size={{ xs: 3 }}>
            <StatCard>
              <CardContent>
                <Typography variant="h4">{totalAvailable}</Typography>
                <Typography variant="body2" color="text.secondary">
                  Available Items
                </Typography>
              </CardContent>
            </StatCard>
          </Grid>
          <Grid size={{ xs: 3 }}>
            <StatCard>
              <CardContent>
                <Typography variant="h4">{totalBooked}</Typography>
                <Typography variant="body2" color="text.secondary">
                  Currently Rented
                </Typography>
              </CardContent>
            </StatCard>
          </Grid>
          <Grid size={{ xs: 3 }}>
            <StatCard>
              <CardContent>
                <Typography variant="h4">{totalDueToday}</Typography>
                <Typography variant="body2" color="text.secondary">
                  Due Today
                </Typography>
              </CardContent>
            </StatCard>
          </Grid>
          <Grid size={{ xs: 3 }}>
            <StatCard>
              <CardContent>
                <Typography variant="h4">{totalDueOut}</Typography>
                <Typography variant="body2" color="text.secondary">
                  Pickups Today
                </Typography>
              </CardContent>
            </StatCard>
          </Grid>
        </Grid>
        {/* Main Content Area */}
        <Grid size={{ xs: 12 }}>
          <Box sx={{ borderBottom: 1, borderColor: "divider", mb: 3 }}>
            <Tabs value={activeTab} onChange={(_e, v) => setActiveTab(v)}>
              <Tab
                icon={<Package className="w-4 h-4" />}
                label="Inventory"
                value="inventory"
              />
              <Tab
                icon={<Calendar className="w-4 h-4" />}
                label="Calendar"
                value="calendar"
              />
              <Tab
                icon={<Settings className="w-4 h-4" />}
                label="Maintenance"
                value="maintenance"
              />
            </Tabs>
          </Box>
          {/* Alerts Section */}
          {lowStockItems.length > 0 && (
            <Box mb={3}>
              <Typography variant="h6" color="error" gutterBottom>
                Low Stock Alerts
              </Typography>
              <Grid container spacing={2}>
                {lowStockItems.map((item) => (
                  <Grid size={{ xs: 12, md: 4 }} key={item.id}>
                    <Card>
                      <CardContent>
                        <Box display="flex" alignItems="center" gap={1}>
                          <AlertTriangle color="red" size={20} />
                          <Typography variant="body1">
                            {item.name} - Only {item.availableUnits} units
                            available
                          </Typography>
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </Box>
          )}
          {/* Inventory Tab Content */}
          {activeTab === "inventory" && (
            <>
              <Box
                display="flex"
                justifyContent="space-between"
                alignItems="center"
                mb={2}
              >
                <Typography variant="h6">Inventory Items</Typography>
                <Button
                  startIcon={<Plus size={20} />}
                  variant="contained"
                  onClick={() => onEditClick()} // Add this prop to trigger edit navigation
                >
                  Add New Item
                </Button>
              </Box>
              <Grid container spacing={2}>
                {rentals.map((rental) => (
                  <Grid size={{ xs: 12, md: 6 }} key={rental.id}>
                    <Card>
                      <CardContent>
                        <Box
                          display="flex"
                          justifyContent="space-between"
                          mb={2}
                        >
                          <Typography variant="h6">{rental.name}</Typography>
                          <IconButton
                            onClick={() => setSelectedProduct(rental)}
                          >
                            <Edit size={20} />
                          </IconButton>
                        </Box>
                        <Typography
                          variant="body2"
                          color="text.secondary"
                          gutterBottom
                        >
                          {rental.category}
                        </Typography>
                        <Box display="flex" gap={1} mb={2}>
                          <Chip
                            label={`${rental.availableUnits} Available`}
                            color={
                              rental.availableUnits < rental.totalUnits * 0.2
                                ? "error"
                                : "success"
                            }
                            size="small"
                          />
                          <Chip
                            label={`${rental.bookedUnits} Rented`}
                            color="primary"
                            size="small"
                          />
                        </Box>
                        <Typography variant="subtitle2" gutterBottom>
                          Available Sizes:
                        </Typography>
                        <Box display="flex" gap={1} flexWrap="wrap">
                          {rental.sizes.map((size: Size) => (
                            <Chip
                              key={size.id}
                              label={`${size.label} (${size.available}/${size.total})`}
                              size="small"
                              color={size.available === 0 ? "error" : "default"}
                            />
                          ))}
                        </Box>
                        <Box mt={2}>
                          <Typography variant="subtitle2" gutterBottom>
                            Maintenance Status:
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            Last serviced: {rental.lastServiced}
                          </Typography>
                          {rental.maintenanceSchedule?.[0] && (
                            <Typography variant="body2" color="warning.main">
                              Next maintenance:{" "}
                              {rental.maintenanceSchedule[0].startDate}
                            </Typography>
                          )}
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </>
          )}
          {/* Calendar Tab Content */}
          {activeTab === "calendar" && (
            <CalendarSection
              vendor={{
                id: "vendor-id",
                name: "Vendor Name",
                type: "rentals",
                description: "",
                status: "published",
                lastUpdated: new Date().toISOString(),
                rentals: rentals,
              }}
            />
          )}
          {/* Maintenance Tab Content */}
          {activeTab === "maintenance" && (
            <Card>
              <CardContent>
                <Box
                  display="flex"
                  justifyContent="space-between"
                  alignItems="center"
                  mb={3}
                >
                  <Typography variant="h6">Maintenance Schedule</Typography>
                  <Button
                    startIcon={<Plus size={20} />}
                    variant="contained"
                    onClick={() => {
                    }}
                  >
                    Schedule Maintenance
                  </Button>
                </Box>
                {rentals.map(
                  (rental) =>
                    rental.maintenanceSchedule &&
                    rental.maintenanceSchedule.length > 0 && (
                      <Box key={rental.id} mb={3}>
                        <Typography variant="subtitle1" gutterBottom>
                          {rental.name}
                        </Typography>
                        <Grid container spacing={2}>
                          {rental.maintenanceSchedule.map((schedule) => (
                            <Grid size={{ xs: 12, md: 4 }} key={schedule.id}>
                              <Card variant="outlined">
                                <CardContent>
                                  <Typography
                                    variant="body2"
                                    color="text.secondary"
                                  >
                                    {schedule.startDate} - {schedule.endDate}
                                  </Typography>
                                  <Typography variant="body1">
                                    {schedule.reason}
                                  </Typography>
                                  <Typography variant="body2" color="primary">
                                    {schedule.itemCount} items affected
                                  </Typography>
                                </CardContent>
                              </Card>
                            </Grid>
                          ))}
                        </Grid>
                      </Box>
                    )
                )}
              </CardContent>
            </Card>
          )}
        </Grid>
      </Grid>
      {/* Edit Product Modal */}
      <Dialog
        open={!!selectedProduct}
        onClose={handleCloseEditModal}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>Edit {selectedProduct?.name}</DialogTitle>
        <DialogContent>
          <Box py={2}>
            <Typography variant="subtitle1" gutterBottom>
              Category: {selectedProduct?.category}
            </Typography>
            <Typography variant="body1" gutterBottom>
              Total Units: {selectedProduct?.totalUnits}
            </Typography>
            <Typography variant="body1" gutterBottom>
              Available Units: {selectedProduct?.availableUnits}
            </Typography>
            <Typography variant="subtitle1" gutterBottom>
              Sizes Available:
            </Typography>
            <Box display="flex" gap={1} flexWrap="wrap">
              {selectedProduct?.sizes.map((size) => (
                <Chip
                  key={size.id}
                  label={`${size.label} (${size.available}/${size.total})`}
                  size="small"
                />
              ))}
            </Box>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseEditModal}>Cancel</Button>
          <Button variant="contained" onClick={handleCloseEditModal}>
            Save Changes
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
}
----------------------------------------

// ./src/app/[language]/vendor/components/VendorView/styled/vendor-view-styled.tsx
----------------------------------------
import Card from '@mui/material/Card';
import Chip from '@mui/material/Chip';
import { styled } from '@mui/material/styles';
export const StatusChip = styled(Chip, {
  shouldForwardProp: (prop) => prop !== "status",
})<{ status: "available" | "booked" | "cancelled" }>(({ theme, status }) => ({
  backgroundColor:
    status === "available"
      ? theme.palette.success.main
      : status === "booked"
      ? theme.palette.warning.main
      : theme.palette.error.main,
  color: theme.palette.common.white,
}));
export const StatCard = styled(Card)(({ theme }) => ({
  height: "100%",
  backgroundColor: theme.palette.background.default,
}));
----------------------------------------

// ./src/app/[language]/vendor/components/VendorView/TicketsView.tsx
----------------------------------------
"use client";
import { useState } from 'react';
import IconButton  from '@mui/material/IconButton';
import Grid from '@mui/material/Grid';
import Typography from '@mui/material/Typography';
import Card from '@mui/material/Card';
import Box from '@mui/material/Box';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Button from '@mui/material/Button';
import Chip from '@mui/material/Chip';
import {
  Ticket,
  Calendar,
  BarChart3,
  Plus,
  Edit,
  AlertTriangle
} from 'lucide-react';
import { TicketProduct } from '@/types/vendor-types';
import { StatCard } from './styled/vendor-view-styled';
import { ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';
interface TicketsViewProps {
  tickets: TicketProduct[];
  onEditClick?: () => void;
}
const COLORS = ['#3B82F6', '#8B5CF6', '#10B981', '#F59E0B'];
export default function TicketsView({ tickets, onEditClick }: TicketsViewProps) {
  const [activeTab, setActiveTab] = useState('dashboard');
  const totalAvailable = tickets.reduce((sum, ticket) => sum + ticket.availableCount, 0);
  const totalSold = tickets.reduce((sum, ticket) => sum + ticket.soldCount, 0);
  const totalRevenue = tickets.reduce((sum, ticket) => sum + (ticket.price * ticket.soldCount), 0);
  const averagePrice = tickets.reduce((sum, ticket) => sum + ticket.price, 0) / tickets.length;
  const salesByType = tickets.map(ticket => ({
    name: ticket.name,
    value: ticket.soldCount,
  }));
  const timelineData = Array.from({ length: 7 }, (_, i) => ({
    date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toLocaleDateString(),
    sales: Math.floor(Math.random() * 100),
  })).reverse();
  return (
    <Box>
      {/* Quick Stats Section */}
      <Grid container spacing={2} mb={3}>
        <Grid item xs={3}>
          <StatCard>
            <Box p={2}>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <Ticket className="text-primary" size={20} />
                <Typography variant="h4">{totalAvailable}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Available Tickets
              </Typography>
            </Box>
          </StatCard>
        </Grid>
        <Grid item xs={3}>
          <StatCard>
            <Box p={2}>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <BarChart3 className="text-success" size={20} />
                <Typography variant="h4">{totalSold}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Total Tickets Sold
              </Typography>
            </Box>
          </StatCard>
        </Grid>
        <Grid item xs={3}>
          <StatCard>
            <Box p={2}>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <Calendar className="text-warning" size={20} />
                <Typography variant="h4">${averagePrice.toFixed(0)}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Average Ticket Price
              </Typography>
            </Box>
          </StatCard>
        </Grid>
        <Grid item xs={3}>
          <StatCard>
            <Box p={2}>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <BarChart3 className="text-info" size={20} />
                <Typography variant="h4">${totalRevenue.toLocaleString()}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Total Revenue
              </Typography>
            </Box>
          </StatCard>
        </Grid>
      </Grid>
      {/* Main Content */}
      <Box sx={{ width: '100%', mb: 3 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Tabs 
            value={activeTab} 
            onChange={(_e, v) => setActiveTab(v)}
          >
            <Tab 
              value="dashboard" 
              label="Dashboard" 
              icon={<BarChart3 className="w-4 h-4" />}
              iconPosition="start"
            />
            <Tab 
              value="tickets" 
              label="Ticket Types" 
              icon={<Ticket className="w-4 h-4" />}
              iconPosition="start"
            />
            <Tab 
              value="calendar" 
              label="Calendar" 
              icon={<Calendar className="w-4 h-4" />}
              iconPosition="start"
            />
          </Tabs>
          <Button 
            variant="contained" 
            startIcon={<Plus size={20} />}
            onClick={onEditClick}
          >
            Add New Ticket
          </Button>
        </Box>
        {activeTab === 'dashboard' && (
          <Grid container spacing={3}>
            {/* Sales Distribution Chart */}
            <Grid item xs={12} md={6}>
              <Card>
                <Box p={3}>
                  <Typography variant="h6" gutterBottom>
                    Sales Distribution by Ticket Type
                  </Typography>
                  <Box height={300}>
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={salesByType}
                          dataKey="value"
                          nameKey="name"
                          cx="50%"
                          cy="50%"
                          outerRadius={100}
                          label
                        >
                          {salesByType.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip />
                      </PieChart>
                    </ResponsiveContainer>
                  </Box>
                </Box>
              </Card>
            </Grid>
            {/* Sales Timeline Chart */}
            <Grid item xs={12} md={6}>
              <Card>
                <Box p={3}>
                  <Typography variant="h6" gutterBottom>
                    Sales Timeline
                  </Typography>
                  <Box height={300}>
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={timelineData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="date" />
                        <YAxis />
                        <Tooltip />
                        <Line type="monotone" dataKey="sales" stroke="#3B82F6" />
                      </LineChart>
                    </ResponsiveContainer>
                  </Box>
                </Box>
              </Card>
            </Grid>
          </Grid>
        )}
        {activeTab === 'tickets' && (
          <Grid container spacing={2}>
            {tickets.map(ticket => (
              <Grid item xs={12} md={6} key={ticket.id}>
                <Card>
                  <Box sx={{ p: 3 }}>
                    <Box display="flex" justifyContent="space-between" mb={2}>
                      <div>
                        <Typography variant="h6">{ticket.name}</Typography>
                        <Chip 
                          label={ticket.type.toUpperCase()} 
                          size="small" 
                          color="primary"
                          sx={{ mt: 1 }}
                        />
                      </div>
                      <IconButton onClick={() => onEditClick?.()} size="small">
                        <Edit size={16} />
                      </IconButton>
                    </Box>
                    <Grid container spacing={2}>
                      <Grid item xs={6}>
                        <Typography variant="body2" color="text.secondary">
                          Price
                        </Typography>
                        <Typography variant="h6">
                          ${ticket.price}
                        </Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="body2" color="text.secondary">
                          Available
                        </Typography>
                        <Typography variant="h6">
                          {ticket.availableCount}
                        </Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="body2" color="text.secondary">
                          Sold
                        </Typography>
                        <Typography variant="h6">
                          {ticket.soldCount}
                        </Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="body2" color="text.secondary">
                          Valid Period
                        </Typography>
                        <Typography variant="body2">
                          {new Date(ticket.validFrom).toLocaleDateString()} - 
                          {new Date(ticket.validTo).toLocaleDateString()}
                        </Typography>
                      </Grid>
                    </Grid>
                    {ticket.availableCount < 10 && (
                      <Box display="flex" alignItems="center" gap={1} mt={2}>
                        <AlertTriangle size={16} className="text-warning" />
                        <Typography variant="body2" color="warning.main">
                          Low inventory alert
                        </Typography>
                      </Box>
                    )}
                    {ticket.benefits && ticket.benefits.length > 0 && (
                      <Box mt={2}>
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          Benefits:
                        </Typography>
                        <Box display="flex" gap={1} flexWrap="wrap">
                          {ticket.benefits.map((benefit, index) => (
                            <Chip 
                              key={index} 
                              label={benefit} 
                              size="small" 
                              variant="outlined"
                            />
                          ))}
                        </Box>
                      </Box>
                    )}
                  </Box>
                </Card>
              </Grid>
            ))}
          </Grid>
        )}
        {activeTab === 'calendar' && (
          <Card>
            <Box p={3}>
              <Typography variant="h6" gutterBottom>
                Upcoming Events & Valid Dates
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Calendar view for managing ticket validity periods and special events coming soon...
              </Typography>
            </Box>
          </Card>
        )}
      </Box>
    </Box>
  );
}
----------------------------------------

// ./src/app/[language]/vendor/components/VendorView/ToursView.tsx
----------------------------------------
import { useState } from 'react';
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import Typography from '@mui/material/Typography';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Chip from '@mui/material/Chip';
import { Calendar, Users, Clock, MapPin, DollarSign, Plus } from 'lucide-react';
import { TourProduct } from '@/types/vendor-types';
import { StatCard } from './styled/vendor-view-styled';
interface ToursViewProps {
  tours: TourProduct[];
  onEditClick?: () => void;
}
export default function ToursView({ tours, onEditClick }: ToursViewProps) {
  const [activeTab, setActiveTab] = useState('upcoming');
  const totalTours = tours.length;
  const upcomingTours = tours.reduce((acc, tour) => 
    acc + (tour.schedule?.filter(s => new Date(s.date) > new Date()).length || 0), 0);
  const totalCapacity = tours.reduce((acc, tour) => acc + tour.maxParticipants, 0);
  const totalRevenue = tours.reduce((acc, tour) => acc + tour.price, 0);
  return (
    <Box>
      {/* Quick Stats */}
      <Grid container spacing={2} mb={3}>
        <Grid item xs={3}>
          <StatCard>
            <Box p={2}>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <Calendar className="text-primary" size={20} />
                <Typography variant="h4">{upcomingTours}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Upcoming Tours
              </Typography>
            </Box>
          </StatCard>
        </Grid>
        <Grid item xs={3}>
          <StatCard>
            <Box p={2}>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <Users className="text-success" size={20} />
                <Typography variant="h4">{totalCapacity}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Total Capacity
              </Typography>
            </Box>
          </StatCard>
        </Grid>
        <Grid item xs={3}>
          <StatCard>
            <Box p={2}>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <Clock className="text-warning" size={20} />
                <Typography variant="h4">{totalTours}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Active Tours
              </Typography>
            </Box>
          </StatCard>
        </Grid>
        <Grid item xs={3}>
          <StatCard>
            <Box p={2}>
              <Box display="flex" alignItems="center" gap={1} mb={1}>
                <DollarSign className="text-info" size={20} />
                <Typography variant="h4">${totalRevenue}</Typography>
              </Box>
              <Typography variant="body2" color="text.secondary">
                Revenue (Expected)
              </Typography>
            </Box>
          </StatCard>
        </Grid>
      </Grid>
      {/* Main Content */}
      <Box sx={{ width: '100%', mb: 3 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Tabs 
            value={activeTab} 
            onChange={(_e, v) => setActiveTab(v)}
          >
            <Tab 
              value="upcoming" 
              label="Upcoming Tours" 
              icon={<Calendar className="w-4 h-4" />}
              iconPosition="start"
            />
            <Tab 
              value="tours" 
              label="Tour Catalog" 
              icon={<MapPin className="w-4 h-4" />}
              iconPosition="start"
            />
            <Tab 
              value="guides" 
              label="Tour Guides" 
              icon={<Users className="w-4 h-4" />}
              iconPosition="start"
            />
          </Tabs>
          <Button 
            variant="contained" 
            startIcon={<Plus size={20} />}
            onClick={onEditClick}
          >
            Add New Tour
          </Button>
        </Box>
        {activeTab === 'upcoming' && (
          <Grid container spacing={2}>
            {tours.map(tour => (
              tour.schedule?.map(event => (
                <Grid item xs={12} md={6} key={`${tour.id}-${event.id}`}>
                  <Card>
                    <Box sx={{ p: 2 }}>
                      <Box display="flex" justifyContent="space-between" mb={2}>
                        <Typography variant="h6">{tour.name}</Typography>
                        <Chip 
                          label={event.status}
                          color={
                            event.status === 'available' ? 'success' :
                            event.status === 'booked' ? 'primary' : 'error'
                          }
                          size="small"
                        />
                      </Box>
                      <Grid container spacing={2}>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            Date:
                          </Typography>
                          <Typography>{event.date}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            Time:
                          </Typography>
                          <Typography>
                            {event.startTime} - {event.endTime}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            Guide:
                          </Typography>
                          <Typography>{tour.guide.name}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            Bookings:
                          </Typography>
                          <Typography>
                            {event.currentBookings}/{tour.maxParticipants}
                          </Typography>
                        </Grid>
                        <Grid item xs={12}>
                          <Typography variant="body2" color="text.secondary">
                            Meeting Point:
                          </Typography>
                          <Typography>{event.meetingPoint}</Typography>
                        </Grid>
                      </Grid>
                    </Box>
                  </Card>
                </Grid>
              ))
            ))}
          </Grid>
        )}
        {activeTab === 'tours' && (
          <Grid container spacing={2}>
            {tours.map(tour => (
              <Grid item xs={12} key={tour.id}>
                <Card>
                  <Box sx={{ p: 2 }}>
                    <Typography variant="h6" gutterBottom>
                      {tour.name}
                    </Typography>
                    <Typography variant="body2" color="text.secondary" paragraph>
                      {tour.description}
                    </Typography>
                    <Grid container spacing={2}>
                      <Grid item xs={3}>
                        <Typography variant="body2" color="text.secondary">
                          Duration:
                        </Typography>
                        <Typography>{tour.duration}</Typography>
                      </Grid>
                      <Grid item xs={3}>
                        <Typography variant="body2" color="text.secondary">
                          Price:
                        </Typography>
                        <Typography>${tour.price}</Typography>
                      </Grid>
                      <Grid item xs={3}>
                        <Typography variant="body2" color="text.secondary">
                          Max Participants:
                        </Typography>
                        <Typography>{tour.maxParticipants}</Typography>
                      </Grid>
                      <Grid item xs={3}>
                        <Typography variant="body2" color="text.secondary">
                          Active Schedules:
                        </Typography>
                        <Typography>
                          {tour.schedule?.length || 0}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Box>
                </Card>
              </Grid>
            ))}
          </Grid>
        )}
        {activeTab === 'guides' && (
          <Grid container spacing={2}>
            {tours.map(tour => (
              <Grid item xs={12} md={4} key={`guide-${tour.id}`}>
                <Card>
                  <Box sx={{ p: 2 }}>
                    <Typography variant="h6" gutterBottom>
                      {tour.guide.name}
                    </Typography>
                    <Box display="flex" flexDirection="column" gap={1}>
                      <Typography variant="body2" color="text.secondary">
                        Certifications:
                      </Typography>
                      <Box display="flex" gap={1} flexWrap="wrap">
                        {tour.guide.certifications.map((cert, index) => (
                          <Chip 
                            key={index}
                            label={cert}
                            size="small"
                          />
                        ))}
                      </Box>
                      <Typography variant="body2" color="text.secondary" mt={1}>
                        Experience:
                      </Typography>
                      <Typography>
                        {tour.guide.experience}
                      </Typography>
                    </Box>
                  </Box>
                </Card>
              </Grid>
            ))}
          </Grid>
        )}
      </Box>
    </Box>
  );
}
----------------------------------------

// ./src/app/[language]/vendor/page-content.tsx
----------------------------------------
"use client";
import { useState } from "react";
import VendorList from "./components/vender-list";
import VendorView from "./components/vender-view";
import VendorEdit from "./components/vender-edit";
type ViewMode = "list" | "view" | "edit";
interface ViewState {
  mode: ViewMode;
  selectedVendorId?: string;
}
export default function VendorContent() {
  const [viewState, setViewState] = useState<ViewState>({
    mode: "list",
  });
  const handleVendorSelect = (vendorId: string) => {
    setViewState({
      mode: "view",
      selectedVendorId: vendorId,
    });
  };
  const handleBackToList = () => {
    setViewState({
      mode: "list",
    });
  };
  const handleEditClick = () => {
    if (!viewState.selectedVendorId) return;
    setViewState({
      mode: "edit",
      selectedVendorId: viewState.selectedVendorId,
    });
  };
  return (
    <>
      {viewState.mode === "list" && (
        <VendorList onVendorSelect={handleVendorSelect} />
      )}
{viewState.mode === "view" && viewState.selectedVendorId && (
  <VendorView
    vendorId={viewState.selectedVendorId}
    onBackClick={handleBackToList}
    onEditClick={handleEditClick}
  />
)}
      {viewState.mode === "edit" && viewState.selectedVendorId && (
        <VendorEdit
          vendorId={viewState.selectedVendorId}
          onBackClick={() =>
            setViewState({
              mode: "view",
              selectedVendorId: viewState.selectedVendorId,
            }
          )
          }
          
        />
      )}
    </>
  );
}
----------------------------------------

// ./src/app/[language]/vendor/page.tsx
----------------------------------------
import type { Metadata } from "next";
import { getServerTranslation } from "@/services/i18n";
import VendorContent from "./page-content";
type Props = {
  params: Promise<{ language: string }>;
};
export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params;
  const { t } = await getServerTranslation(params.language, "vendor");
  return {
    title: t("vendorList.title"),
    description: t("vendorList.description"),
  };
}
export default function Page() {
  return <VendorContent />;
}
----------------------------------------

// ./src/components/calendar/hooks/useCalendarRange.ts
----------------------------------------
import { useMemo } from 'react';
import { 
  startOfWeek, 
  endOfWeek,
  startOfMonth,
  endOfMonth,
  eachDayOfInterval,
  parseISO
} from 'date-fns';
import type { CalendarView, DateRange, CalendarEvent } from '../types';
export function useCalendarRange(currentDate: Date, view: CalendarView): DateRange {
  return useMemo(() => {
    switch (view) {
      case 'day':
        return {
          start: currentDate,
          end: currentDate,
          days: [currentDate]
        };
      case 'week':
        const weekStart = startOfWeek(currentDate, { weekStartsOn: 1 });
        const weekEnd = endOfWeek(currentDate, { weekStartsOn: 1 });
        return {
          start: weekStart,
          end: weekEnd,
          days: eachDayOfInterval({ start: weekStart, end: weekEnd })
        };
      case 'month':
        const monthStart = startOfMonth(currentDate);
        const monthEnd = endOfMonth(currentDate);
        return {
          start: monthStart,
          end: monthEnd,
          days: eachDayOfInterval({ start: monthStart, end: monthEnd })
        };
    }
  }, [currentDate, view]);
}
export function useVisibleEvents(events: CalendarEvent[], dateRange: DateRange) {
  return useMemo(() => {
    return events.filter(event => {
      const eventStart = typeof event.start === 'string' ? 
        parseISO(event.start) : event.start;
      const eventEnd = event.end ? 
        (typeof event.end === 'string' ? parseISO(event.end) : event.end) 
        : eventStart;
      
      return eventStart >= dateRange.start && eventEnd <= dateRange.end;
    });
  }, [events, dateRange]);
}
----------------------------------------

// ./src/components/calendar/index.ts
----------------------------------------
export { default as Calendar } from './calendar';
export * from './types';
----------------------------------------

// ./src/components/calendar/types.ts
----------------------------------------
export type CalendarView = 'day' | 'week' | 'month';
export interface CalendarEvent {
  id: string;
  title: string;
  start: string | Date;
  end?: string | Date;
  type: 'tour' | 'lesson' | 'rental' | 'ticket';
  status: 'available' | 'booked' | 'requested' | 'cancelled';
  metadata?: EventMetadata;
}
export interface BaseEventMetadata {
  price?: number;
  notes?: string;
  location?: string;
}
export interface TourEventMetadata extends BaseEventMetadata {
  guide?: string;
  capacity?: number;
  current?: number;
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
  meetingPoint?: string;
  includes?: string[];
}
export interface LessonEventMetadata extends BaseEventMetadata {
  instructor: string;
  maxStudents: number;
  currentStudents?: number;
  expertise: string;
  languages: string[];
  requirements?: string;
}
export interface RentalEventMetadata extends BaseEventMetadata {
  itemName: string;
  size?: string;
  condition?: string;
  pickupLocation?: string;
  returnLocation?: string;
  maintenanceNotes?: string;
}
export interface TicketEventMetadata extends BaseEventMetadata {
  type: 'season-pass' | 'day-pass' | 'multi-day' | 'half-day';
  validity: {
    start: string;
    end: string;
  };
  benefits?: string[];
  restrictions?: string;
}
export type EventMetadata = 
  | { type: 'tour'; data: TourEventMetadata }
  | { type: 'lesson'; data: LessonEventMetadata }
  | { type: 'rental'; data: RentalEventMetadata }
  | { type: 'ticket'; data: TicketEventMetadata };
export interface CalendarViewProps {
  events: CalendarEvent[];
  initialView?: CalendarView;
  initialDate?: Date;
  onEventClick?: (event: CalendarEvent) => void;
  onDateClick?: (date: Date) => void;
  height?: string | number;
}
export interface DateRange {
  start: Date;
  end: Date;
  days: Date[];
}
export interface EventPopoverData {
  event: CalendarEvent;
  element: HTMLElement;
}
----------------------------------------

// ./src/components/calendar/utils/eventUtils.ts
----------------------------------------
import { parseISO, format } from 'date-fns';
import type { CalendarEvent } from '../types';
export const EVENT_COLORS = {
  tour: 'primary.main',
  lesson: 'success.main',
  rental: 'warning.main',
  ticket: 'info.main'
} as const;
export function formatEventDate(date: string | Date): string {
  const dateObj = typeof date === 'string' ? parseISO(date) : date;
  return format(dateObj, 'MMM d, h:mm a');
}
export function getEventsByDay(events: CalendarEvent[], days: Date[]): Map<string, CalendarEvent[]> {
  const grouped = new Map<string, CalendarEvent[]>();
  
  days.forEach(day => {
    grouped.set(format(day, 'yyyy-MM-dd'), []);
  });
  events.forEach(event => {
    const eventDate = typeof event.start === 'string' ? 
      parseISO(event.start) : event.start;
    const dateKey = format(eventDate, 'yyyy-MM-dd');
    
    if (grouped.has(dateKey)) {
      grouped.get(dateKey)?.push(event);
    }
  });
  return grouped;
}
export function getEventStatusColor(status: CalendarEvent['status']): 'success' | 'primary' | 'warning' {
  switch (status) {
    case 'available':
      return 'success';
    case 'booked':
      return 'primary';
    default:
      return 'warning';
  }
}
----------------------------------------

// ./src/components/confirm-dialog/confirm-dialog-context.ts
----------------------------------------
"use client";
import { createContext } from "react";
export type ConfirmDialogOptions = {
  title: string;
  message: string;
  successButtonText: string;
  cancelButtonText: string;
};
export const ConfirmDialogActionsContext = createContext<{
  confirmDialog: ({
    title,
    message,
    successButtonText,
    cancelButtonText,
  }?: Partial<ConfirmDialogOptions>) => Promise<boolean>;
}>({
  confirmDialog: () => Promise.resolve(false),
});
----------------------------------------

// ./src/components/confirm-dialog/use-confirm-dialog.ts
----------------------------------------
"use client";
import { useContext } from "react";
import { ConfirmDialogActionsContext } from "./confirm-dialog-context";
const useConfirmDialog = () => {
  return useContext(ConfirmDialogActionsContext);
};
export default useConfirmDialog;
----------------------------------------

// ./src/components/form/date-pickers/helper.ts
----------------------------------------
import { enUS } from "date-fns/locale/en-US";
export const getValueByKey = (language: string) => {
  switch (language) {
    case "en":
      return enUS;
    default:
      return enUS;
  }
};
----------------------------------------

// ./src/components/calendar/calendar-types.tsx
----------------------------------------
  
  
  
  
  
  
  
----------------------------------------

// ./src/components/calendar/calendar.tsx
----------------------------------------
import { useState, useCallback } from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import { addMonths, subMonths, addWeeks, subWeeks, addDays, subDays } from 'date-fns';
import { CalendarHeader } from './components/CalendarHeader';
import { CalendarGrid } from './components/CalendarGrid';
import { CalendarEvent } from './components/CalendarEvent';
import { EventPopover } from './components/EventPopover';
import { useCalendarRange, useVisibleEvents } from './hooks/useCalendarRange';
import { getEventsByDay } from './utils/eventUtils';
import type { CalendarViewProps, CalendarView, EventPopoverData, CalendarEvent as CalendarEventType } from './types';
export default function Calendar({
  events,
  initialView = 'week',
  initialDate = new Date(),
  onEventClick,
  onDateClick,
  height = '800px'
}: CalendarViewProps) {
  const [currentDate, setCurrentDate] = useState(initialDate);
  const [view, setView] = useState<CalendarView>(initialView);
  const [eventPopover, setEventPopover] = useState<EventPopoverData | null>(null);
  
  const dateRange = useCalendarRange(currentDate, view);
  const visibleEvents = useVisibleEvents(events, dateRange);
  const eventsByDay = getEventsByDay(visibleEvents, dateRange.days);
  const navigate = useCallback((direction: 'prev' | 'next') => {
    setCurrentDate(prev => {
      switch (view) {
        case 'day':
          return direction === 'next' ? addDays(prev, 1) : subDays(prev, 1);
        case 'week':
          return direction === 'next' ? addWeeks(prev, 1) : subWeeks(prev, 1);
        case 'month':
          return direction === 'next' ? addMonths(prev, 1) : subMonths(prev, 1);
      }
    });
  }, [view]);
  const handleEventClick = useCallback((event: CalendarEventType, element: HTMLElement) => {
    if (onEventClick) {
      onEventClick(event);
    } else {
      setEventPopover({ event, element });
    }
  }, [onEventClick]);
  return (
    <Card sx={{ height }}>
      <CardContent sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
        <CalendarHeader
          currentDate={currentDate}
          view={view}
          onNavigate={navigate}
          onViewChange={setView}
        />
        <CalendarGrid
          view={view}
          currentDate={currentDate}
          days={dateRange.days}
          eventsByDay={eventsByDay}
          onDateClick={onDateClick || (() => {})}
          renderEvent={(event) => (
            <CalendarEvent
              key={event.id}
              event={event}
              onClick={handleEventClick}
            />
          )}
        />
        <EventPopover
          popoverData={eventPopover}
          onClose={() => setEventPopover(null)}
        />
      </CardContent>
    </Card>
  );
}
----------------------------------------

// ./src/components/calendar/components/CalendarDay.tsx
----------------------------------------
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import { format, isSameDay, isSameMonth } from 'date-fns';
import type { CalendarView, CalendarEvent } from '../types';
interface CalendarDayProps {
  date: Date;
  view: CalendarView;
  currentDate: Date;
  events: CalendarEvent[];
  onClick: (date: Date) => void;
  renderEvent: (event: CalendarEvent) => React.ReactNode;
}
export function CalendarDay({
  date,
  view,
  currentDate,
  events,
  onClick,
  renderEvent
}: CalendarDayProps) {
  const isToday = isSameDay(date, new Date());
  const isCurrentMonth = isSameMonth(date, currentDate);
  return (
    <Box
      sx={{
        height: view === 'month' ? 120 : '100%',
        p: 1,
        backgroundColor: isToday ? 'action.hover' : 'background.paper',
        opacity: isCurrentMonth ? 1 : 0.5,
        border: '1px solid',
        borderColor: 'divider',
        overflow: 'hidden',
        cursor: 'pointer',
        '&:hover': {
          backgroundColor: 'action.hover',
        },
      }}
      onClick={() => onClick(date)}
    >
      <Typography
        variant="caption"
        sx={{
          fontWeight: isToday ? 'bold' : 'regular',
          color: isToday ? 'primary.main' : 'text.primary',
        }}
      >
        {format(date, view === 'month' ? 'd' : 'MMM d')}
      </Typography>
      <Box sx={{ mt: 1 }}>
        {events.map(renderEvent)}
      </Box>
    </Box>
  );
}
----------------------------------------

// ./src/components/calendar/components/CalendarEvent.tsx
----------------------------------------
import  Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import { EVENT_COLORS } from '../utils/eventUtils';
import type { CalendarEvent } from '../types';
interface CalendarEventProps {
  event: CalendarEvent;
  onClick: (event: CalendarEvent, element: HTMLElement) => void;
}
export function CalendarEvent({ event, onClick }: CalendarEventProps) {
  return (
    <Box
      sx={{
        backgroundColor: EVENT_COLORS[event.type],
        color: 'white',
        p: 0.5,
        borderRadius: 1,
        mb: 0.5,
        cursor: 'pointer',
        '&:hover': {
          opacity: 0.9,
        },
      }}
      onClick={(e) => onClick(event, e.currentTarget)}
    >
      <Typography variant="caption" noWrap>
        {event.title}
      </Typography>
    </Box>
  );
}
----------------------------------------

// ./src/components/calendar/components/CalendarGrid.tsx
----------------------------------------
import  Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import { format} from 'date-fns';
import type { CalendarView, CalendarEvent } from '../types';
import { CalendarDay } from './CalendarDay';
import { TimeGrid } from './TimeGrid';
interface CalendarGridProps {
  view: CalendarView;
  currentDate: Date;
  days: Date[];
  eventsByDay: Map<string, CalendarEvent[]>;
  onDateClick: (date: Date) => void;
  renderEvent: (event: CalendarEvent) => React.ReactNode;
}
export function CalendarGrid({
  view,
  currentDate,
  days,
  eventsByDay,
  onDateClick,
  renderEvent
}: CalendarGridProps) {
  return view === 'month' ? (
    <Box
      sx={{
        display: 'grid',
        gridTemplateColumns: 'repeat(7, 1fr)',
        gap: 0,
        height: '100%',
      }}
    >
      {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map(day => (
        <Box
          key={day}
          sx={{
            p: 1,
            textAlign: 'center',
            borderBottom: 1,
            borderColor: 'divider',
          }}
        >
          <Typography variant="caption">{day}</Typography>
        </Box>
      ))}
      {days.map(date => (
        <CalendarDay
          key={date.toISOString()}
          date={date}
          view={view}
          currentDate={currentDate}
          events={eventsByDay.get(format(date, 'yyyy-MM-dd')) || []}
          onClick={onDateClick}
          renderEvent={renderEvent}
        />
      ))}
    </Box>
  ) : (
    <TimeGrid
      days={days}
      events={eventsByDay}
      onDateClick={onDateClick}
      renderEvent={renderEvent}
    />
  );
}
----------------------------------------

// ./src/components/calendar/components/CalendarHeader.tsx
----------------------------------------
import Box from "@mui/material/Box";
import Typography  from "@mui/material/Typography";
import IconButton  from "@mui/material/IconButton";
import ButtonGroup  from "@mui/material/ButtonGroup";
import Button  from "@mui/material/Button";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { format } from "date-fns";
import type { CalendarView } from "../types";
interface CalendarHeaderProps {
  currentDate: Date;
  view: CalendarView;
  onNavigate: (direction: "prev" | "next") => void;
  onViewChange: (view: CalendarView) => void;
}
export function CalendarHeader({
  currentDate,
  view,
  onNavigate,
  onViewChange,
}: CalendarHeaderProps) {
  return (
    <Box sx={{ display: "flex", justifyContent: "space-between", mb: 2 }}>
      <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
        <IconButton onClick={() => onNavigate("prev")}>
          <ChevronLeft />
        </IconButton>
        <Typography variant="h6">
          {format(
            currentDate,
            view === "day"
              ? "MMM d, yyyy"
              : view === "week"
              ? "'Week of' MMM d, yyyy"
              : "MMMM yyyy"
          )}
        </Typography>
        <IconButton onClick={() => onNavigate("next")}>
          <ChevronRight />
        </IconButton>
      </Box>
      <ButtonGroup>
        {(["day", "week", "month"] as const).map((viewOption) => (
          <Button
            key={viewOption}
            variant={view === viewOption ? "contained" : "outlined"}
            onClick={() => onViewChange(viewOption)}
          >
            {viewOption.charAt(0).toUpperCase() + viewOption.slice(1)}
          </Button>
        ))}
      </ButtonGroup>
    </Box>
  );
}
----------------------------------------

// ./src/components/calendar/components/EventDetails.tsx
----------------------------------------
import Chip from '@mui/material/Chip';
import  Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import { Clock, Users, DollarSign, GraduationCap, MapPin, Globe, Tag } from 'lucide-react';
import { format, parseISO } from 'date-fns';
import type { CalendarEvent } from '../types';
interface EventDetailsProps {
  event: CalendarEvent;
}
export function EventDetails({ event }: EventDetailsProps) {
  const renderMetadataItems = () => {
    if (!event.metadata) return null;
    switch (event.metadata.type) {
      case 'tour':
        return (
          <>
            <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
              <Users size={16} />
              <Typography variant="body2">
                {`${event.metadata.data.current || 0} / ${event.metadata.data.capacity || 0} Participants`}
              </Typography>
            </Box>
            {event.metadata.data.guide && (
              <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
                <GraduationCap size={16} />
                <Typography variant="body2">
                  Guide: {event.metadata.data.guide}
                </Typography>
              </Box>
            )}
          </>
        );
      case 'lesson':
        return (
          <>
            <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
              <GraduationCap size={16} />
              <Typography variant="body2">
                {`Instructor: ${event.metadata.data.instructor}`}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
              <Users size={16} />
              <Typography variant="body2">
                {`${event.metadata.data.currentStudents || 0} / ${event.metadata.data.maxStudents} Students`}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
              <Globe size={16} />
              <Typography variant="body2">
                {event.metadata.data.languages.join(', ')}
              </Typography>
            </Box>
          </>
        );
      case 'rental':
        return (
          <>
            <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
              <Tag size={16} />
              <Typography variant="body2">
                {event.metadata.data.itemName}
              </Typography>
            </Box>
            {event.metadata.data.pickupLocation && (
              <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
                <MapPin size={16} />
                <Typography variant="body2">
                  {`Pickup: ${event.metadata.data.pickupLocation}`}
                </Typography>
              </Box>
            )}
          </>
        );
      case 'ticket':
        return (
          <>
            <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
              <Clock size={16} />
              <Typography variant="body2">
                {`Valid: ${format(parseISO(event.metadata.data.validity.start), 'MMM d')} - ${format(parseISO(event.metadata.data.validity.end), 'MMM d')}`}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
              <Tag size={16} />
              <Typography variant="body2">
                {`Type: ${event.metadata.data.type}`}
              </Typography>
            </Box>
          </>
        );
    }
  };
  return (
    <Box sx={{ p: 2, maxWidth: 300 }}>
      <Typography variant="h6" gutterBottom>
        {event.title}
      </Typography>
      
      <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
        <Clock size={16} />
        <Typography variant="body2">
          {format(
            typeof event.start === 'string' ? parseISO(event.start) : event.start,
            'MMM d, h:mm a'
          )}
        </Typography>
      </Box>
      {event.metadata?.data.price && (
        <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
          <DollarSign size={16} />
          <Typography variant="body2">
            ${event.metadata.data.price}
          </Typography>
        </Box>
      )}
      {renderMetadataItems()}
      {event.metadata?.data.location && (
        <Box sx={{ display: 'flex', gap: 2, mb: 1 }}>
          <MapPin size={16} />
          <Typography variant="body2">
            {event.metadata.data.location}
          </Typography>
        </Box>
      )}
      <Box sx={{ mt: 1 }}>
        <Chip
          label={event.status}
          color={
            event.status === 'available' ? 'success' :
            event.status === 'booked' ? 'primary' : 'warning'
          }
          size="small"
        />
      </Box>
    </Box>
  );
}
----------------------------------------

// ./src/components/calendar/components/EventPopover.tsx
----------------------------------------
import Popover  from '@mui/material/Popover';
import type { EventPopoverData } from '../types';
import { EventDetails } from './EventDetails';
interface EventPopoverProps {
  popoverData: EventPopoverData | null;
  onClose: () => void;
}
export function EventPopover({ popoverData, onClose }: EventPopoverProps) {
  if (!popoverData) return null;
  const { event, element } = popoverData;
  return (
    <Popover
      open={true}
      anchorEl={element}
      onClose={onClose}
      anchorOrigin={{
        vertical: 'bottom',
        horizontal: 'left',
      }}
    >
      <EventDetails event={event} />
    </Popover>
  );
}
----------------------------------------

// ./src/components/calendar/components/TimeGrid.tsx
----------------------------------------
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import { format } from 'date-fns';
import type { CalendarEvent } from '../types';
import { CalendarDay } from './CalendarDay';
interface TimeGridProps {
  days: Date[];
  events: Map<string, CalendarEvent[]>;
  onDateClick: (date: Date) => void;
  renderEvent: (event: CalendarEvent) => React.ReactNode;
}
export function TimeGrid({
  days,
  events,
  onDateClick,
  renderEvent
}: TimeGridProps) {
  const hours = Array.from({ length: 24 }, (_, i) => i);
  
  return (
    <Box sx={{ display: 'flex', height: '100%' }}>
      <Box sx={{ width: 60, borderRight: 1, borderColor: 'divider' }}>
        {hours.map(hour => (
          <Typography
            key={hour}
            variant="caption"
            sx={{ height: 60, display: 'block', p: 1 }}
          >
            {format(new Date().setHours(hour), 'ha')}
          </Typography>
        ))}
      </Box>
      <Box sx={{ flex: 1, display: 'flex' }}>
        {days.map(date => (
          <Box
            key={date.toISOString()}
            sx={{
              flex: 1,
              borderRight: 1,
              borderColor: 'divider',
              position: 'relative'
            }}
          >
            <CalendarDay
              date={date}
              view="day"
              currentDate={date}
              events={events.get(format(date, 'yyyy-MM-dd')) || []}
              onClick={onDateClick}
              renderEvent={renderEvent}
            />
          </Box>
        ))}
      </Box>
    </Box>
  );
}
----------------------------------------

// ./src/components/confirm-dialog/confirm-dialog-provider.tsx
----------------------------------------
"use client";
import Button from "@mui/material/Button";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import {
  ConfirmDialogActionsContext,
  ConfirmDialogOptions,
} from "./confirm-dialog-context";
import React, { useCallback, useMemo, useRef, useState } from "react";
import { useTranslation } from "@/services/i18n/client";
function ConfirmDialogProvider({ children }: { children: React.ReactNode }) {
  const [isOpen, setIsOpen] = useState(false);
  const { t } = useTranslation("confirm-dialog");
  const defaultConfirmDialogInfo = useMemo<ConfirmDialogOptions>(
    () => ({
      title: t("title"),
      message: t("message"),
      successButtonText: t("actions.yes"),
      cancelButtonText: t("actions.no"),
    }),
    [t]
  );
  const [confirmDialogInfo, setConfirmDialogInfo] =
    useState<ConfirmDialogOptions>(defaultConfirmDialogInfo);
  const resolveRef = useRef<(value: boolean) => void>(undefined);
  const handleClose = () => {
    setIsOpen(false);
  };
  const onCancel = () => {
    setIsOpen(false);
    resolveRef.current?.(false);
  };
  const onSuccess = () => {
    setIsOpen(false);
    resolveRef.current?.(true);
  };
  const confirmDialog = useCallback(
    (options: Partial<ConfirmDialogOptions> = {}) => {
      return new Promise<boolean>((resolve) => {
        setConfirmDialogInfo({
          ...defaultConfirmDialogInfo,
          ...options,
        });
        setIsOpen(true);
        resolveRef.current = resolve;
      });
    },
    [defaultConfirmDialogInfo]
  );
  const contextActions = useMemo(
    () => ({
      confirmDialog,
    }),
    [confirmDialog]
  );
  return (
    <>
      <ConfirmDialogActionsContext.Provider value={contextActions}>
        {children}
      </ConfirmDialogActionsContext.Provider>
      <Dialog
        open={isOpen}
        onClose={handleClose}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
      >
        <DialogTitle id="alert-dialog-title">
          {confirmDialogInfo.title}
        </DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-description">
            {confirmDialogInfo.message}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={onCancel}>
            {confirmDialogInfo.cancelButtonText}
          </Button>
          <Button onClick={onSuccess} autoFocus>
            {confirmDialogInfo.successButtonText}
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
}
export default ConfirmDialogProvider;
----------------------------------------

// ./src/components/form/avatar-input/form-avatar-input.tsx
----------------------------------------
import { useFileUploadService } from "@/services/api/services/files";
import { FileEntity } from "@/services/api/types/file-entity";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import Avatar from "@mui/material/Avatar";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import Typography from "@mui/material/Typography";
import { styled } from "@mui/material/styles";
import React, { useCallback, useState } from "react";
import { useDropzone } from "react-dropzone";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import { useTranslation } from "react-i18next";
import IconButton from "@mui/material/IconButton";
import ClearOutlinedIcon from "@mui/icons-material/ClearOutlined";
type AvatarInputProps = {
  error?: string;
  onChange: (value: FileEntity | null) => void;
  onBlur: () => void;
  value?: FileEntity;
  disabled?: boolean;
  testId?: string;
};
const AvatarInputContainer = styled("div")(({ theme }) => ({
  display: "flex",
  position: "relative",
  flexDirection: "column",
  alignItems: "center",
  padding: theme.spacing(2),
  marginTop: theme.spacing(2),
  border: "1px dashed",
  borderColor: theme.palette.divider,
  borderRadius: theme.shape.borderRadius,
  cursor: "pointer",
  "&:hover": {
    borderColor: theme.palette.text.primary,
  },
}));
const StyledWrapperAvatar = styled("div")(() => ({
  position: "relative",
  width: 100,
  height: 100,
}));
const StyledOverlay = styled("div")(() => {
  return {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: "50%",
    position: "absolute",
    top: 0,
    right: 0,
    left: 0,
    bottom: 0,
    background: "rgba(0, 0, 0, 0.7)",
    transition: ".5s ease",
    opacity: 0,
    "&:hover": {
      opacity: 1,
    },
  };
});
const StyledAvatar = styled(Avatar)(({}) => ({
  width: 100,
  height: 100,
}));
function AvatarInput(props: AvatarInputProps) {
  const { onChange } = props;
  const { t } = useTranslation();
  const [isLoading, setIsLoading] = useState(false);
  const fetchFileUpload = useFileUploadService();
  const onDrop = useCallback(
    async (acceptedFiles: File[]) => {
      setIsLoading(true);
      const { status, data } = await fetchFileUpload(acceptedFiles[0]);
      if (status === HTTP_CODES_ENUM.CREATED) {
        onChange(data.file);
      }
      setIsLoading(false);
    },
    [fetchFileUpload, onChange]
  );
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "image/jpeg": [],
      "image/png": [],
    },
    maxFiles: 1,
    maxSize: 1024 * 1024 * 2, // 2MB
    disabled: isLoading || props.disabled,
  });
  const removeAvatarHandle = (
    event: React.MouseEvent<HTMLButtonElement, MouseEvent>
  ) => {
    event.stopPropagation();
    onChange(null);
  };
  return (
    <AvatarInputContainer {...getRootProps()}>
      {isDragActive && (
        <Box
          sx={{
            position: "absolute",
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            backgroundColor: "rgba(0, 0, 0, 0.5)",
            zIndex: 1,
          }}
        >
          <Typography
            sx={{
              color: "white",
              fontWeight: "bold",
              textAlign: "center",
              mt: 10,
            }}
            variant="h5"
          >
            {t("common:formInputs.avatarInput.dropzoneText")}
          </Typography>
        </Box>
      )}
      {props?.value ? (
        <StyledWrapperAvatar>
          <StyledAvatar src={props.value?.path} />
          <StyledOverlay>
            <IconButton
              disableRipple
              onClick={removeAvatarHandle}
              color="inherit"
            >
              <ClearOutlinedIcon
                sx={{ width: 50, height: 50, color: "white" }}
              />
            </IconButton>
          </StyledOverlay>
        </StyledWrapperAvatar>
      ) : (
        <StyledAvatar src={props.value?.path} />
      )}
      <Box sx={{ mt: 2 }}>
        <Button
          variant="contained"
          component="label"
          disabled={isLoading}
          data-testid={props.testId}
        >
          {isLoading
            ? t("common:loading")
            : t("common:formInputs.avatarInput.selectFile")}
          <input {...getInputProps()} />
        </Button>
      </Box>
      <Box sx={{ mt: 1 }}>
        <Typography>
          {t("common:formInputs.avatarInput.dragAndDrop")}
        </Typography>
      </Box>
      {props.error && (
        <Box sx={{ mt: 1 }}>
          <Typography sx={{ color: "red" }}>{props.error}</Typography>
        </Box>
      )}
    </AvatarInputContainer>
  );
}
function FormAvatarInput<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue"> & {
    disabled?: boolean;
    testId?: string;
  }
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => (
        <AvatarInput
          onChange={field.onChange}
          onBlur={field.onBlur}
          value={field.value}
          error={fieldState.error?.message}
          disabled={props.disabled}
          testId={props.testId}
        />
      )}
    />
  );
}
export default FormAvatarInput;
----------------------------------------

// ./src/components/form/checkbox/form-checkbox.stories.tsx
----------------------------------------
import React from "react";
import { Meta, StoryFn } from "@storybook/react";
import { useForm, FormProvider } from "react-hook-form";
import FormCheckboxInput, { CheckboxInputProps } from "./form-checkbox";
interface Option {
  id: number;
  name: string;
}
export default {
  title: "Components/Form/CheckboxInput",
  component: FormCheckboxInput,
} as Meta;
const Template: StoryFn<CheckboxInputProps<Option> & { name: string }> = (
  args
) => {
  const methods = useForm({
    defaultValues: {
      sampleCheckbox: [],
    },
  });
  return (
    <FormProvider {...methods}>
      <form>
        <FormCheckboxInput {...args} />
      </form>
    </FormProvider>
  );
};
export const Default = Template.bind({});
Default.args = {
  label: "Sample Form Checkbox",
  name: "sampleCheckbox",
  options: [
    { id: 1, name: "Option 1" },
    { id: 2, name: "Option 2" },
    { id: 3, name: "Option 3" },
  ],
  keyValue: "id",
  keyExtractor: (option: Option) => option.id.toString(),
  renderOption: (option: Option) => option.name,
  error: "",
  testId: "sampleCheckbox",
};
----------------------------------------

// ./src/components/form/checkbox/form-checkbox.tsx
----------------------------------------
"use client";
import { ForwardedRef, forwardRef } from "react";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import FormControl from "@mui/material/FormControl";
import FormHelperText from "@mui/material/FormHelperText";
import FormLabel from "@mui/material/FormLabel";
import FormControlLabel from "@mui/material/FormControlLabel";
import Checkbox from "@mui/material/Checkbox";
import FormGroup from "@mui/material/FormGroup";
export type CheckboxInputProps<T> = {
  label: string;
  type?: string;
  autoFocus?: boolean;
  disabled?: boolean;
  readOnly?: boolean;
  error?: string;
  testId?: string;
  keyValue: keyof T;
  options: T[];
  keyExtractor: (option: T) => string;
  renderOption: (option: T) => React.ReactNode;
};
function CheckboxInputRaw<T>(
  props: CheckboxInputProps<T> & {
    name: string;
    value: T[] | undefined | null;
    onChange: (value: T[]) => void;
    onBlur: () => void;
  },
  ref?: ForwardedRef<HTMLDivElement | null>
) {
  const value = props.value ?? [];
  const onChange = (checkboxValue: T) => () => {
    const isExist = value
      .map((option) => option[props.keyValue])
      .includes(checkboxValue[props.keyValue]);
    const newValue = isExist
      ? value.filter(
          (option) => option[props.keyValue] !== checkboxValue[props.keyValue]
        )
      : [...value, checkboxValue];
    props.onChange(newValue);
  };
  return (
    <FormControl
      data-testid={props.testId}
      component="fieldset"
      variant="standard"
      error={!!props.error}
    >
      <FormLabel component="legend" data-testid={`${props.testId}-label`}>
        {props.label}
      </FormLabel>
      <FormGroup ref={ref}>
        {props.options.map((option) => (
          <FormControlLabel
            key={props.keyExtractor(option)}
            control={
              <Checkbox
                checked={value
                  .map((valueOption) => valueOption[props.keyValue])
                  .includes(option[props.keyValue])}
                onChange={onChange(option)}
                name={props.name}
                data-testid={`${props.testId}-${props.keyExtractor(option)}`}
              />
            }
            label={props.renderOption(option)}
          />
        ))}
      </FormGroup>
      {!!props.error && (
        <FormHelperText data-testid={`${props.testId}-error`}>
          {props.error}
        </FormHelperText>
      )}
    </FormControl>
  );
}
const CheckboxInput = forwardRef(CheckboxInputRaw) as never as <T>(
  props: CheckboxInputProps<T> & {
    name: string;
    value: T[] | undefined | null;
    onChange: (value: T[]) => void;
    onBlur: () => void;
  } & { ref?: ForwardedRef<HTMLDivElement | null> }
) => ReturnType<typeof CheckboxInputRaw>;
function FormCheckboxInput<
  TFieldValues extends FieldValues = FieldValues,
  T = unknown,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: CheckboxInputProps<T> &
    Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue">
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => (
        <CheckboxInput<T>
          {...field}
          label={props.label}
          autoFocus={props.autoFocus}
          type={props.type}
          error={fieldState.error?.message}
          disabled={props.disabled}
          readOnly={props.readOnly}
          testId={props.testId}
          options={props.options}
          keyValue={props.keyValue}
          keyExtractor={props.keyExtractor}
          renderOption={props.renderOption}
        />
      )}
    />
  );
}
export default FormCheckboxInput;
----------------------------------------

// ./src/components/form/date-pickers/date-picker.tsx
----------------------------------------
import * as React from "react";
import {
  DatePicker,
  DateView,
  LocalizationProvider,
} from "@mui/x-date-pickers";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import { ForwardedRef, forwardRef } from "react";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFnsV3";
import useLanguage from "@/services/i18n/use-language";
import { getValueByKey } from "@/components/form/date-pickers/helper";
type ValueDateType = Date | null | undefined;
type DatePickerFieldProps = {
  disabled?: boolean;
  className?: string;
  views?: readonly DateView[] | undefined;
  minDate?: Date;
  maxDate?: Date;
  autoFocus?: boolean;
  readOnly?: boolean;
  label: string;
  testId?: string;
  error?: string;
  defaultValue?: ValueDateType;
};
const DatePickerInput = forwardRef(DatePickerInputRaw) as never as (
  props: DatePickerFieldProps & {
    name: string;
    value: ValueDateType;
    onChange: (value: ValueDateType) => void;
    onBlur: () => void;
  } & { ref?: ForwardedRef<HTMLDivElement | null> }
) => ReturnType<typeof DatePickerInputRaw>;
function DatePickerInputRaw(
  props: DatePickerFieldProps & {
    name: string;
    value: ValueDateType;
    onChange: (value: ValueDateType) => void;
    onBlur: () => void;
  },
  ref?: ForwardedRef<HTMLDivElement | null>
) {
  const language = useLanguage();
  return (
    <LocalizationProvider
      dateAdapter={AdapterDateFns}
      adapterLocale={getValueByKey(language)}
    >
      <DatePicker
        ref={ref}
        name={props.name}
        label={props.label}
        value={props.value}
        onClose={props.onBlur}
        disabled={props.disabled}
        autoFocus={props.autoFocus}
        defaultValue={props.defaultValue}
        slotProps={{
          textField: {
            helperText: props.error,
            error: !!props.error,
            InputProps: {
              readOnly: props.readOnly,
            },
          },
        }}
        onAccept={props.onChange}
        minDate={props.minDate}
        maxDate={props.maxDate}
        views={props.views}
        data-testid={props.testId}
      />
    </LocalizationProvider>
  );
}
function FormDatePickerInput<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: DatePickerFieldProps &
    Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue">
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => {
        return (
          <DatePickerInput
            {...field}
            defaultValue={props.defaultValue}
            autoFocus={props.autoFocus}
            label={props.label}
            disabled={props.disabled}
            readOnly={props.readOnly}
            views={props.views}
            testId={props.testId}
            minDate={props.minDate}
            maxDate={props.maxDate}
            error={fieldState.error?.message}
          />
        );
      }}
    />
  );
}
export default FormDatePickerInput;
----------------------------------------

// ./src/components/form/date-pickers/date-time-picker.tsx
----------------------------------------
import * as React from "react";
import {
  DateTimePicker,
  DateOrTimeView,
  LocalizationProvider,
} from "@mui/x-date-pickers";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import { ForwardedRef, forwardRef } from "react";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFnsV3";
import useLanguage from "@/services/i18n/use-language";
import { getValueByKey } from "@/components/form/date-pickers/helper";
type ValueDateType = Date | null | undefined;
type DateTimePickerFieldProps = {
  disabled?: boolean;
  className?: string;
  views?: readonly DateOrTimeView[];
  minDate?: Date;
  maxDate?: Date;
  autoFocus?: boolean;
  readOnly?: boolean;
  label: string;
  testId?: string;
  error?: string;
  defaultValue?: ValueDateType;
};
const DateTimePickerInput = forwardRef(DateTimePickerInputRaw) as never as (
  props: DateTimePickerFieldProps & {
    name: string;
    value: ValueDateType;
    onChange: (value: ValueDateType) => void;
    onBlur: () => void;
  } & { ref?: ForwardedRef<HTMLDivElement | null> }
) => ReturnType<typeof DateTimePickerInputRaw>;
function DateTimePickerInputRaw(
  props: DateTimePickerFieldProps & {
    name: string;
    value: ValueDateType;
    onChange: (value: ValueDateType) => void;
    onBlur: () => void;
  },
  ref?: ForwardedRef<HTMLDivElement | null>
) {
  const language = useLanguage();
  return (
    <LocalizationProvider
      dateAdapter={AdapterDateFns}
      adapterLocale={getValueByKey(language)}
    >
      <DateTimePicker
        ref={ref}
        name={props.name}
        label={props.label}
        value={props.value}
        onClose={props.onBlur}
        disabled={props.disabled}
        autoFocus={props.autoFocus}
        defaultValue={props.defaultValue}
        slotProps={{
          textField: {
            helperText: props.error,
            error: !!props.error,
            InputProps: {
              readOnly: props.readOnly,
            },
          },
        }}
        onAccept={props.onChange}
        minDate={props.minDate}
        maxDate={props.maxDate}
        views={props.views}
        data-testid={props.testId}
      />
    </LocalizationProvider>
  );
}
function FormDateTimePickerInput<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: DateTimePickerFieldProps &
    Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue">
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => {
        return (
          <DateTimePickerInput
            {...field}
            defaultValue={props.defaultValue}
            autoFocus={props.autoFocus}
            label={props.label}
            disabled={props.disabled}
            readOnly={props.readOnly}
            views={props.views}
            testId={props.testId}
            minDate={props.minDate}
            maxDate={props.maxDate}
            error={fieldState.error?.message}
          />
        );
      }}
    />
  );
}
export default FormDateTimePickerInput;
----------------------------------------

// ./src/components/form/date-pickers/time-picker.tsx
----------------------------------------
import * as React from "react";
import {
  LocalizationProvider,
  TimePicker,
  TimeStepOptions,
  TimeView,
} from "@mui/x-date-pickers";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import { ForwardedRef, forwardRef } from "react";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFnsV3";
import useLanguage from "@/services/i18n/use-language";
import { getValueByKey } from "@/components/form/date-pickers/helper";
type ValueDateType = Date | null | undefined;
type TimePickerFieldProps = {
  disabled?: boolean;
  className?: string;
  views?: readonly TimeView[] | undefined;
  autoFocus?: boolean;
  readOnly?: boolean;
  label: string;
  testId?: string;
  error?: string;
  defaultValue?: ValueDateType;
  format?: string;
  minTime?: Date | undefined;
  maxTime?: Date | undefined;
  timeSteps?: TimeStepOptions | undefined;
};
const TimePickerInput = forwardRef(TimePickerInputRaw) as never as (
  props: TimePickerFieldProps & {
    name: string;
    value: ValueDateType;
    onChange: (value: ValueDateType) => void;
    onBlur: () => void;
  } & { ref?: ForwardedRef<HTMLDivElement | null> }
) => ReturnType<typeof TimePickerInputRaw>;
function TimePickerInputRaw(
  props: TimePickerFieldProps & {
    name: string;
    value: ValueDateType;
    onChange: (value: ValueDateType) => void;
    onBlur: () => void;
  },
  ref?: ForwardedRef<HTMLDivElement | null>
) {
  const language = useLanguage();
  return (
    <LocalizationProvider
      dateAdapter={AdapterDateFns}
      adapterLocale={getValueByKey(language)}
    >
      <TimePicker
        ref={ref}
        name={props.name}
        label={props.label}
        value={props.value}
        disabled={props.disabled}
        autoFocus={props.autoFocus}
        defaultValue={props.defaultValue}
        onClose={props.onBlur}
        slotProps={{
          textField: {
            helperText: props.error,
            error: !!props.error,
            InputProps: {
              readOnly: props.readOnly,
            },
          },
        }}
        onAccept={props.onChange}
        views={props.views}
        format={props.format}
        data-testid={props.testId}
        minTime={props.minTime}
        maxTime={props.maxTime}
        timeSteps={props.timeSteps}
      />
    </LocalizationProvider>
  );
}
function FormTimePickerInput<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: TimePickerFieldProps &
    Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue">
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => {
        return (
          <TimePickerInput
            {...field}
            defaultValue={props.defaultValue}
            autoFocus={props.autoFocus}
            label={props.label}
            disabled={props.disabled}
            readOnly={props.readOnly}
            views={props.views}
            testId={props.testId}
            format={props.format}
            error={fieldState.error?.message}
            minTime={props.minTime}
            maxTime={props.maxTime}
            timeSteps={props.timeSteps}
          />
        );
      }}
    />
  );
}
export default FormTimePickerInput;
----------------------------------------

// ./src/components/form/image-picker/image-picker.tsx
----------------------------------------
"use client";
import { useFileUploadService } from "@/services/api/services/files";
import { FileEntity } from "@/services/api/types/file-entity";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import Typography from "@mui/material/Typography";
import { styled } from "@mui/material/styles";
import React, { useCallback, useState } from "react";
import { useDropzone } from "react-dropzone";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import { useTranslation } from "react-i18next";
import IconButton from "@mui/material/IconButton";
import ClearOutlinedIcon from "@mui/icons-material/ClearOutlined";
import ImageListItem from "@mui/material/ImageListItem";
import ImageList from "@mui/material/ImageList";
import Image from "next/image";
type ImagePickerProps = {
  error?: string;
  onChange: (value: FileEntity | null) => void;
  onBlur: () => void;
  value?: FileEntity;
  disabled?: boolean;
  testId?: string;
};
const ImagePickerContainer = styled("div")(({ theme }) => ({
  display: "flex",
  position: "relative",
  flexDirection: "column",
  alignItems: "center",
  padding: theme.spacing(2),
  marginTop: theme.spacing(2),
  border: "1px dashed",
  borderColor: theme.palette.divider,
  borderRadius: theme.shape.borderRadius,
  cursor: "pointer",
  "&:hover": {
    borderColor: theme.palette.text.primary,
  },
}));
const StyledOverlay = styled("div")(() => {
  return {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    position: "absolute",
    top: 0,
    right: 0,
    left: 0,
    bottom: 0,
    background: "rgba(0, 0, 0, 0.7)",
    transition: ".5s ease",
    opacity: 0,
    "&:hover": {
      opacity: 1,
    },
  };
});
function ImagePicker(props: ImagePickerProps) {
  const { onChange } = props;
  const { t } = useTranslation();
  const [isLoading, setIsLoading] = useState(false);
  const fetchFileUpload = useFileUploadService();
  const onDrop = useCallback(
    async (acceptedFiles: File[]) => {
      setIsLoading(true);
      const { status, data } = await fetchFileUpload(acceptedFiles[0]);
      if (status === HTTP_CODES_ENUM.CREATED) {
        onChange(data.file);
      }
      setIsLoading(false);
    },
    [fetchFileUpload, onChange]
  );
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "image/jpeg": [],
      "image/png": [],
    },
    maxFiles: 1,
    maxSize: 1024 * 1024 * 2, // 2MB
    disabled: isLoading || props.disabled,
  });
  const removeImageHandle = (
    event: React.MouseEvent<HTMLButtonElement, MouseEvent>
  ) => {
    event.stopPropagation();
    onChange(null);
  };
  return (
    <ImagePickerContainer {...getRootProps()}>
      {isDragActive && (
        <Box
          sx={{
            position: "absolute",
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            backgroundColor: "rgba(0, 0, 0, 0.5)",
            zIndex: 1,
          }}
        >
          <Typography
            sx={{
              color: "white",
              fontWeight: "bold",
              textAlign: "center",
              mt: 10,
            }}
            variant="h5"
          >
            {t("common:formInputs.multipleImageInput.dropzoneText")}
          </Typography>
        </Box>
      )}
      {props?.value ? (
        <>
          <ImageList sx={{ width: `100%` }} cols={3} rowHeight={250}>
            <ImageListItem style={{ overflow: "hidden" }}>
              <StyledOverlay>
                <IconButton
                  disableRipple
                  onClick={removeImageHandle}
                  color="inherit"
                >
                  <ClearOutlinedIcon
                    sx={{ width: 50, height: 50, color: "white" }}
                  />
                </IconButton>
              </StyledOverlay>
              <Image
                src={props.value.path}
                alt={`Uploaded image ${props.value.id}`}
                width={300}
                height={300}
                style={{ objectFit: "cover" }}
                priority={false}
              />
            </ImageListItem>
          </ImageList>
        </>
      ) : (
        <></>
      )}
      <Box sx={{ mt: 2 }}>
        <Button
          variant="contained"
          component="label"
          disabled={isLoading}
          data-testid={props.testId}
        >
          {isLoading
            ? t("common:loading")
            : t("common:formInputs.multipleImageInput.selectFile")}
          <input {...getInputProps()} />
        </Button>
      </Box>
      <Box sx={{ mt: 1 }}>
        <Typography>
          {t("common:formInputs.multipleImageInput.dragAndDrop")}
        </Typography>
      </Box>
      {props.error && (
        <Box sx={{ mt: 1 }}>
          <Typography sx={{ color: "red" }}>{props.error}</Typography>
        </Box>
      )}
    </ImagePickerContainer>
  );
}
function FormImagePicker<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>(
  props: Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue"> & {
    disabled?: boolean;
    testId?: string;
  }
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => (
        <ImagePicker
          onChange={field.onChange}
          onBlur={field.onBlur}
          value={field.value}
          error={fieldState.error?.message}
          disabled={props.disabled}
          testId={props.testId}
        />
      )}
    />
  );
}
export default FormImagePicker;
----------------------------------------

// ./src/components/form/multiple-image-picker/multiple-image-picker.tsx
----------------------------------------
"use client";
import { useFileUploadService } from "@/services/api/services/files";
import { FileEntity } from "@/services/api/types/file-entity";
import HTTP_CODES_ENUM from "@/services/api/types/http-codes";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import Typography from "@mui/material/Typography";
import { styled } from "@mui/material/styles";
import React, { useCallback, useState } from "react";
import { useDropzone } from "react-dropzone";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import { useTranslation } from "react-i18next";
import IconButton from "@mui/material/IconButton";
import ClearOutlinedIcon from "@mui/icons-material/ClearOutlined";
import ImageListItem from "@mui/material/ImageListItem";
import ImageList from "@mui/material/ImageList";
type MultipleImagePickerProps = {
  error?: string;
  onChange: (value: FileEntity[] | null) => void;
  onBlur: () => void;
  value?: FileEntity[];
  disabled?: boolean;
  testId?: string;
};
const MultipleImagePickerContainer = styled("div")(({ theme }) => ({
  display: "flex",
  position: "relative",
  flexDirection: "column",
  alignItems: "center",
  padding: theme.spacing(2),
  marginTop: theme.spacing(2),
  border: "1px dashed",
  borderColor: theme.palette.divider,
  borderRadius: theme.shape.borderRadius,
  cursor: "pointer",
  "&:hover": {
    borderColor: theme.palette.text.primary,
  },
}));
const StyledOverlay = styled("div")(() => {
  return {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    position: "absolute",
    top: 0,
    right: 0,
    left: 0,
    bottom: 0,
    background: "rgba(0, 0, 0, 0.7)",
    transition: ".5s ease",
    opacity: 0,
    "&:hover": {
      opacity: 1,
    },
  };
});
function MultipleImagePicker(props: MultipleImagePickerProps) {
  const { onChange, value } = props;
  const { t } = useTranslation();
  const [isLoading, setIsLoading] = useState(false);
  const fetchFileUpload = useFileUploadService();
  const onDrop = useCallback(
    async (acceptedFiles: File[]) => {
      setIsLoading(true);
      const { status, data } = await fetchFileUpload(acceptedFiles[0]);
      if (status === HTTP_CODES_ENUM.CREATED) {
        onChange([...(value ?? []), data.file]);
      }
      setIsLoading(false);
    },
    [fetchFileUpload, onChange, value]
  );
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "image/jpeg": [],
      "image/png": [],
    },
    maxFiles: 1,
    maxSize: 1024 * 1024 * 2, // 2MB
    disabled: isLoading || props.disabled,
  });
  const removeImageHandle =
    (id: FileEntity["id"]) =>
    (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
      event.stopPropagation();
      onChange(value?.filter((item) => item.id !== id) ?? []);
    };
  return (
    <MultipleImagePickerContainer {...getRootProps()}>
      {isDragActive && (
        <Box
          sx={{
            position: "absolute",
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            backgroundColor: "rgba(0, 0, 0, 0.5)",
            zIndex: 1,
          }}
        >
          <Typography
            sx={{
              color: "white",
              fontWeight: "bold",
              textAlign: "center",
              mt: 10,
            }}
            variant="h5"
          >
            {t("common:formInputs.multipleImageInput.dropzoneText")}
          </Typography>
        </Box>
      )}
      {props?.value?.length ? (
        <>
          <ImageList sx={{ width: `100%` }} cols={3} rowHeight={250}>
            {props.value.map((item) => (
              <ImageListItem key={item.id} style={{ overflow: "hidden" }}>
                <StyledOverlay>
                  <IconButton
                    disableRipple
                    onClick={removeImageHandle(item.id)}
                    color="inherit"
                  >
                    <ClearOutlinedIcon
                      sx={{ width: 50, height: 50, color: "white" }}
                    />
                  </IconButton>
                </StyledOverlay>
                <img src={item.path} loading="lazy" />
              </ImageListItem>
            ))}
          </ImageList>
        </>
      ) : (
        <></>
      )}
      <Box sx={{ mt: 2 }}>
        <Button
          variant="contained"
          component="label"
          disabled={isLoading}
          data-testid={props.testId}
        >
          {isLoading
            ? t("common:loading")
            : t("common:formInputs.multipleImageInput.selectFile")}
          <input {...getInputProps()} />
        </Button>
      </Box>
      <Box sx={{ mt: 1 }}>
        <Typography>
          {t("common:formInputs.multipleImageInput.dragAndDrop")}
        </Typography>
      </Box>
      {props.error && (
        <Box sx={{ mt: 1 }}>
          <Typography sx={{ color: "red" }}>{props.error}</Typography>
        </Box>
      )}
    </MultipleImagePickerContainer>
  );
}
function FormMultipleImagePicker<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue"> & {
    disabled?: boolean;
    testId?: string;
  }
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => (
        <MultipleImagePicker
          onChange={field.onChange}
          onBlur={field.onBlur}
          value={field.value}
          error={fieldState.error?.message}
          disabled={props.disabled}
          testId={props.testId}
        />
      )}
    />
  );
}
export default FormMultipleImagePicker;
----------------------------------------

// ./src/components/form/multiple-select/form-multiple-select.tsx
----------------------------------------
"use client";
import { ForwardedRef, forwardRef } from "react";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import Select from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import FormHelperText from "@mui/material/FormHelperText";
import OutlinedInput from "@mui/material/OutlinedInput";
type MultipleSelectInputProps<T extends object> = {
  label: string;
  type?: string;
  autoFocus?: boolean;
  disabled?: boolean;
  readOnly?: boolean;
  error?: string;
  testId?: string;
  keyValue: keyof T;
  options: T[];
  renderValue: (option: T[]) => React.ReactNode;
  renderOption: (option: T) => React.ReactNode;
};
function MultipleSelectInputRaw<T extends object>(
  props: MultipleSelectInputProps<T> & {
    name: string;
    value: T[] | undefined | null;
    onChange: (value: T[]) => void;
    onBlur: () => void;
  },
  ref?: ForwardedRef<HTMLDivElement | null>
) {
  return (
    <FormControl fullWidth error={!!props.error} disabled={props.disabled}>
      <InputLabel id={`select-label-${props.name}`}>{props.label}</InputLabel>
      <Select
        ref={ref}
        labelId={`select-label-${props.name}`}
        id={`select-${props.name}`}
        value={props.value?.map(
          (value) => value?.[props.keyValue]?.toString() ?? ""
        )}
        input={<OutlinedInput label={props.label} />}
        multiple
        inputProps={{
          readOnly: props.readOnly,
        }}
        onChange={(event) => {
          const value = event.target.value;
          const selectedStrings =
            typeof value === "string" ? value.split(",") : value;
          const newValue = selectedStrings
            .map((selectedString) => {
              const option = props.options.find(
                (option) =>
                  option[props.keyValue]?.toString() === selectedString
              );
              if (!option) return undefined;
              return option;
            })
            .filter((option) => option !== undefined) as T[];
          props.onChange(newValue);
        }}
        onBlur={props.onBlur}
        data-testid={props.testId}
        renderValue={() => {
          return props.value ? props.renderValue(props.value) : undefined;
        }}
      >
        {props.options.map((option) => (
          <MenuItem
            key={option[props.keyValue]?.toString()}
            value={option[props.keyValue]?.toString()}
          >
            {props.renderOption(option)}
          </MenuItem>
        ))}
      </Select>
      {!!props.error && (
        <FormHelperText data-testid={`${props.testId}-error`}>
          {props.error}
        </FormHelperText>
      )}
    </FormControl>
  );
}
const MultipleSelectInput = forwardRef(MultipleSelectInputRaw) as never as <
  T extends object,
>(
  props: MultipleSelectInputProps<T> & {
    name: string;
    value: T | undefined | null;
    onChange: (value: T) => void;
    onBlur: () => void;
  } & { ref?: ForwardedRef<HTMLDivElement | null> }
) => ReturnType<typeof MultipleSelectInputRaw>;
function FormMultipleSelectInput<
  TFieldValues extends FieldValues = FieldValues,
  T extends object = object,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: MultipleSelectInputProps<T> &
    Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue">
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => (
        <MultipleSelectInput<T>
          {...field}
          label={props.label}
          autoFocus={props.autoFocus}
          type={props.type}
          error={fieldState.error?.message}
          disabled={props.disabled}
          readOnly={props.readOnly}
          testId={props.testId}
          options={props.options}
          renderOption={props.renderOption}
          renderValue={props.renderValue}
          keyValue={props.keyValue}
        />
      )}
    />
  );
}
export default FormMultipleSelectInput;
----------------------------------------

// ./src/components/form/multiple-select-extended/form-multiple-select-extended.tsx
----------------------------------------
"use client";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import TextField from "@mui/material/TextField";
import ClickAwayListener from "@mui/material/ClickAwayListener";
import React, {
  ForwardedRef,
  forwardRef,
  useState,
  useRef,
  useEffect,
} from "react";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import { ItemProps, ListProps, Virtuoso } from "react-virtuoso";
import ListItemText from "@mui/material/ListItemText";
import Box from "@mui/material/Box";
type MultipleSelectExtendedInputProps<T extends object> = {
  label: string;
  error?: string;
  testId?: string;
  disabled?: boolean;
  options: T[];
  renderSelected: (option: T[]) => React.ReactNode;
  renderOption: (option: T) => React.ReactNode;
  keyExtractor: (option: T) => string;
  onEndReached?: () => void;
} & (
  | {
      isSearchable: true;
      searchLabel: string;
      searchPlaceholder: string;
      search: string;
      onSearchChange: (search: string) => void;
    }
  | {
      isSearchable?: false;
    }
);
const MUIComponents = {
  List: forwardRef<HTMLDivElement, ListProps>(function MuiList(
    { style, children },
    listRef
  ) {
    return (
      <List
        style={{ padding: 0, ...style, margin: 0 }}
        component="div"
        ref={listRef}
      >
        {children}
      </List>
    );
  }),
  Item: ({ children, ...props }: ItemProps<unknown>) => {
    return (
      <ListItem component="div" {...props} style={{ margin: 0 }} disablePadding>
        {children}
      </ListItem>
    );
  },
};
function MultipleSelectExtendedInputRaw<T extends object>(
  props: MultipleSelectExtendedInputProps<T> & {
    name: string;
    value: T[] | null;
    onChange: (value: T[]) => void;
    onBlur: () => void;
  },
  ref?: ForwardedRef<HTMLDivElement | null>
) {
  const [isOpen, setIsOpen] = useState(false);
  const boxRef = useRef<HTMLInputElement | null>(null);
  const valueKeys = props.value?.map(props.keyExtractor) ?? [];
  useEffect(() => {
    if (isOpen) {
      boxRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [isOpen]);
  return (
    <ClickAwayListener onClickAway={() => setIsOpen(false)}>
      <div>
        <Box mb={0.5} ref={boxRef}>
          <TextField
            ref={ref}
            name={props.name}
            value={props.value ? props.renderSelected(props.value) : ""}
            onBlur={props.onBlur}
            label={props.label}
            variant="outlined"
            onClick={() => {
              if (props.disabled) return;
              setIsOpen((prev) => !prev);
            }}
            fullWidth
            error={!!props.error}
            data-testid={props.testId}
            helperText={props.error}
            disabled={props.disabled}
            slotProps={{
              input: {
                readOnly: true,
              },
              formHelperText: {
                ["data-testid" as string]: `${props.testId}-error`,
              },
            }}
          />
        </Box>
        {isOpen && (
          <Card>
            <CardContent
              sx={{
                p: 0,
                "&:last-child": {
                  pb: 0,
                },
              }}
            >
              {props.isSearchable && (
                <Box p={2}>
                  <TextField
                    placeholder={props.searchPlaceholder}
                    value={props.search}
                    onChange={(e) => props.onSearchChange?.(e.target.value)}
                    label={props.searchLabel}
                    variant="outlined"
                    autoFocus
                    fullWidth
                    data-testid={`${props.testId}-search`}
                  />
                </Box>
              )}
              <Virtuoso
                style={{
                  height:
                    props.options.length <= 6 ? props.options.length * 48 : 320,
                }}
                data={props.options}
                endReached={props.onEndReached}
                components={MUIComponents}
                itemContent={(index, item) => (
                  <ListItemButton
                    selected={valueKeys.includes(props.keyExtractor(item))}
                    onClick={() => {
                      const newValue = props.value
                        ? valueKeys.includes(props.keyExtractor(item))
                          ? props.value.filter(
                              (selectedItem) =>
                                props.keyExtractor(selectedItem) !==
                                props.keyExtractor(item)
                            )
                          : [...props.value, item]
                        : [item];
                      props.onChange(newValue);
                    }}
                  >
                    {item ? (
                      <ListItemText primary={props.renderOption(item)} />
                    ) : (
                      <></>
                    )}
                  </ListItemButton>
                )}
              />
            </CardContent>
          </Card>
        )}
      </div>
    </ClickAwayListener>
  );
}
const MultipleSelectExtendedInput = forwardRef(
  MultipleSelectExtendedInputRaw
) as never as <T extends object>(
  props: MultipleSelectExtendedInputProps<T> & {
    name: string;
    value: T[] | null;
    onChange: (value: T[]) => void;
    onBlur: () => void;
  } & { ref?: ForwardedRef<HTMLDivElement | null> }
) => ReturnType<typeof MultipleSelectExtendedInputRaw>;
function FormMultipleSelectExtendedInput<
  TFieldValues extends FieldValues = FieldValues,
  T extends object = object,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue"> &
    MultipleSelectExtendedInputProps<T>
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => (
        <MultipleSelectExtendedInput<T>
          {...field}
          isSearchable={props.isSearchable}
          label={props.label}
          error={fieldState.error?.message}
          disabled={props.disabled}
          testId={props.testId}
          options={props.options}
          renderOption={props.renderOption}
          renderSelected={props.renderSelected}
          keyExtractor={props.keyExtractor}
          search={props.isSearchable ? props.search : ""}
          onSearchChange={
            props.isSearchable ? props.onSearchChange : () => undefined
          }
          onEndReached={props.isSearchable ? props.onEndReached : undefined}
          searchLabel={props.isSearchable ? props.searchLabel : ""}
          searchPlaceholder={props.isSearchable ? props.searchPlaceholder : ""}
        />
      )}
    />
  );
}
export default FormMultipleSelectExtendedInput;
----------------------------------------

// ./src/components/form/select/form-select.tsx
----------------------------------------
"use client";
import { ForwardedRef, forwardRef } from "react";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import Select from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import FormHelperText from "@mui/material/FormHelperText";
type SelectInputProps<T extends object> = {
  label: string;
  type?: string;
  autoFocus?: boolean;
  disabled?: boolean;
  readOnly?: boolean;
  error?: string;
  testId?: string;
  keyValue: keyof T;
  options: T[];
  size?: "small" | "medium";
  renderOption: (option: T) => React.ReactNode;
};
function SelectInputRaw<T extends object>(
  props: SelectInputProps<T> & {
    name: string;
    value: T | undefined | null;
    onChange: (value: T) => void;
    onBlur: () => void;
  },
  ref?: ForwardedRef<HTMLDivElement | null>
) {
  return (
    <FormControl fullWidth error={!!props.error} disabled={props.disabled}>
      <InputLabel id={`select-label-${props.name}`}>{props.label}</InputLabel>
      <Select
        ref={ref}
        labelId={`select-label-${props.name}`}
        id={`select-${props.name}`}
        size={props.size}
        value={props.value?.[props.keyValue]?.toString() ?? ""}
        label={props.label}
        inputProps={{
          readOnly: props.readOnly,
        }}
        onChange={(event) => {
          const newValue = props.options.find(
            (option) =>
              option[props.keyValue]?.toString() === event.target.value
          );
          if (!newValue) return;
          props.onChange(newValue);
        }}
        onBlur={props.onBlur}
        data-testid={props.testId}
        renderValue={() => {
          return props.value ? props.renderOption(props.value) : undefined;
        }}
      >
        {props.options.map((option) => (
          <MenuItem
            key={option[props.keyValue]?.toString()}
            value={option[props.keyValue]?.toString()}
          >
            {props.renderOption(option)}
          </MenuItem>
        ))}
      </Select>
      {!!props.error && (
        <FormHelperText data-testid={`${props.testId}-error`}>
          {props.error}
        </FormHelperText>
      )}
    </FormControl>
  );
}
const SelectInput = forwardRef(SelectInputRaw) as never as <T extends object>(
  props: SelectInputProps<T> & {
    name: string;
    value: T | undefined | null;
    onChange: (value: T) => void;
    onBlur: () => void;
  } & { ref?: ForwardedRef<HTMLDivElement | null> }
) => ReturnType<typeof SelectInputRaw>;
function FormSelectInput<
  TFieldValues extends FieldValues = FieldValues,
  T extends object = object,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: SelectInputProps<T> &
    Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue">
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => (
        <SelectInput<T>
          {...field}
          label={props.label}
          autoFocus={props.autoFocus}
          type={props.type}
          error={fieldState.error?.message}
          disabled={props.disabled}
          readOnly={props.readOnly}
          testId={props.testId}
          options={props.options}
          renderOption={props.renderOption}
          keyValue={props.keyValue}
          size={props.size}
        />
      )}
    />
  );
}
export default FormSelectInput;
----------------------------------------

// ./src/components/form/select-extended/form-select-extended.tsx
----------------------------------------
"use client";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import TextField from "@mui/material/TextField";
import React, {
  ForwardedRef,
  forwardRef,
  useState,
  useRef,
  useEffect,
} from "react";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import { ItemProps, ListProps, Virtuoso } from "react-virtuoso";
import ListItemText from "@mui/material/ListItemText";
import Box from "@mui/material/Box";
import ClickAwayListener from "@mui/material/ClickAwayListener";
type SelectExtendedInputProps<T extends object> = {
  label: string;
  error?: string;
  testId?: string;
  disabled?: boolean;
  options: T[];
  renderSelected: (option: T) => React.ReactNode;
  renderOption: (option: T) => React.ReactNode;
  keyExtractor: (option: T) => string;
  onEndReached?: () => void;
} & (
  | {
      isSearchable: true;
      searchLabel: string;
      searchPlaceholder: string;
      search: string;
      onSearchChange: (search: string) => void;
    }
  | {
      isSearchable?: false;
    }
);
const MUIComponents = {
  List: forwardRef<HTMLDivElement, ListProps>(function MuiList(
    { style, children },
    listRef
  ) {
    return (
      <List
        style={{ padding: 0, ...style, margin: 0 }}
        component="div"
        ref={listRef}
      >
        {children}
      </List>
    );
  }),
  Item: ({ children, ...props }: ItemProps<unknown>) => {
    return (
      <ListItem component="div" {...props} style={{ margin: 0 }} disablePadding>
        {children}
      </ListItem>
    );
  },
};
function SelectExtendedInputRaw<T extends object>(
  props: SelectExtendedInputProps<T> & {
    name: string;
    value: T | undefined | null;
    onChange: (value: T) => void;
    onBlur: () => void;
  },
  ref?: ForwardedRef<HTMLDivElement | null>
) {
  const [isOpen, setIsOpen] = useState(false);
  const boxRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    if (isOpen) {
      boxRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [isOpen]);
  return (
    <ClickAwayListener onClickAway={() => setIsOpen(false)}>
      <div>
        <Box mb={0.5} ref={boxRef}>
          <TextField
            ref={ref}
            name={props.name}
            value={props.value ? props.renderOption(props.value) : ""}
            onBlur={props.onBlur}
            label={props.label}
            variant="outlined"
            onClick={() => {
              if (props.disabled) return;
              setIsOpen((prev) => !prev);
            }}
            fullWidth
            error={!!props.error}
            data-testid={props.testId}
            helperText={props.error}
            disabled={props.disabled}
            slotProps={{
              input: {
                readOnly: true,
              },
              formHelperText: {
                ["data-testid" as string]: `${props.testId}-error`,
              },
            }}
          />
        </Box>
        {isOpen && (
          <Card>
            <CardContent
              sx={{
                p: 0,
                "&:last-child": {
                  pb: 0,
                },
              }}
            >
              {props.isSearchable && (
                <Box p={2}>
                  <TextField
                    placeholder={props.searchPlaceholder}
                    value={props.search}
                    onChange={(e) => props.onSearchChange?.(e.target.value)}
                    label={props.searchLabel}
                    variant="outlined"
                    autoFocus
                    fullWidth
                    data-testid={`${props.testId}-search`}
                  />
                </Box>
              )}
              <Virtuoso
                style={{
                  height:
                    props.options.length <= 6 ? props.options.length * 48 : 320,
                }}
                data={props.options}
                endReached={props.onEndReached}
                components={MUIComponents}
                itemContent={(index, item) => (
                  <ListItemButton
                    selected={
                      props.value
                        ? props.keyExtractor(item) ===
                          props.keyExtractor(props.value)
                        : false
                    }
                    onClick={() => {
                      props.onChange(item);
                      setIsOpen(false);
                    }}
                  >
                    {item ? (
                      <ListItemText primary={props.renderOption(item)} />
                    ) : (
                      <></>
                    )}
                  </ListItemButton>
                )}
              />
            </CardContent>
          </Card>
        )}
      </div>
    </ClickAwayListener>
  );
}
const SelectExtendedInput = forwardRef(SelectExtendedInputRaw) as never as <
  T extends object,
>(
  props: SelectExtendedInputProps<T> & {
    name: string;
    value: T | undefined | null;
    onChange: (value: T) => void;
    onBlur: () => void;
  } & { ref?: ForwardedRef<HTMLDivElement | null> }
) => ReturnType<typeof SelectExtendedInputRaw>;
function FormSelectExtendedInput<
  TFieldValues extends FieldValues = FieldValues,
  T extends object = object,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue"> &
    SelectExtendedInputProps<T>
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => (
        <SelectExtendedInput<T>
          {...field}
          isSearchable={props.isSearchable}
          label={props.label}
          error={fieldState.error?.message}
          disabled={props.disabled}
          testId={props.testId}
          options={props.options}
          renderSelected={props.renderSelected}
          renderOption={props.renderOption}
          keyExtractor={props.keyExtractor}
          search={props.isSearchable ? props.search : ""}
          onSearchChange={
            props.isSearchable ? props.onSearchChange : () => undefined
          }
          onEndReached={props.isSearchable ? props.onEndReached : undefined}
          searchLabel={props.isSearchable ? props.searchLabel : ""}
          searchPlaceholder={props.isSearchable ? props.searchPlaceholder : ""}
        />
      )}
    />
  );
}
export default FormSelectExtendedInput;
----------------------------------------

// ./src/components/form/text-input/form-text-input.tsx
----------------------------------------
"use client";
import VisibilityOff from "@mui/icons-material/VisibilityOff";
import Visibility from "@mui/icons-material/Visibility";
import IconButton from "@mui/material/IconButton";
import InputAdornment from "@mui/material/InputAdornment";
import TextField from "@mui/material/TextField";
import React, { ChangeEvent, forwardRef, useState } from "react";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import { InputBaseComponentProps } from "@mui/material/InputBase/InputBase";
type TextInputProps = {
  label: string;
  type?: string;
  autoFocus?: boolean;
  disabled?: boolean;
  readOnly?: boolean;
  error?: string;
  testId?: string;
  autoComplete?: string;
  inputComponent?: React.ElementType<InputBaseComponentProps>;
  multiline?: boolean;
  minRows?: number;
  maxRows?: number;
  size?: "small" | "medium";
};
const TextInput = forwardRef<
  HTMLDivElement | null,
  TextInputProps & {
    name: string;
    value: string;
    onChange: (
      value: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => void;
    onBlur: () => void;
  }
>(function TextInput(props, ref) {
  const [isShowPassword, setIsShowPassword] = useState(false);
  const handleClickShowPassword = () => setIsShowPassword((show) => !show);
  const handleMouseDownPassword = (
    event: React.MouseEvent<HTMLButtonElement>
  ) => {
    event.preventDefault();
  };
  return (
    <TextField
      ref={ref}
      name={props.name}
      size={props.size}
      value={props.value}
      onChange={props.onChange}
      onBlur={props.onBlur}
      label={props.label}
      autoFocus={props.autoFocus}
      type={props.type === "password" && isShowPassword ? "text" : props.type}
      variant="outlined"
      fullWidth
      error={!!props.error}
      data-testid={props.testId}
      helperText={props.error}
      disabled={props.disabled}
      autoComplete={props.autoComplete}
      multiline={props.multiline}
      minRows={props.minRows}
      maxRows={props.maxRows}
      slotProps={{
        formHelperText: {
          ["data-testid" as string]: `${props.testId}-error`,
        },
        input: {
          readOnly: props.readOnly,
          inputComponent: props.inputComponent,
          endAdornment:
            props.type === "password" ? (
              <InputAdornment position="end">
                <IconButton
                  aria-label="toggle password visibility"
                  onClick={handleClickShowPassword}
                  onMouseDown={handleMouseDownPassword}
                  edge="end"
                >
                  {isShowPassword ? <VisibilityOff /> : <Visibility />}
                </IconButton>
              </InputAdornment>
            ) : undefined,
        },
      }}
    />
  );
});
function FormTextInput<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue"> &
    TextInputProps
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => (
        <TextInput
          {...field}
          label={props.label}
          autoFocus={props.autoFocus}
          type={props.type}
          error={fieldState.error?.message}
          disabled={props.disabled}
          readOnly={props.readOnly}
          testId={props.testId}
          multiline={props.multiline}
          minRows={props.minRows}
          maxRows={props.maxRows}
          inputComponent={props.inputComponent}
          size={props.size}
        />
      )}
    />
  );
}
export default FormTextInput;
----------------------------------------

// ./src/components/radio-group/form-radio-group.tsx
----------------------------------------
"use client";
import { ForwardedRef, forwardRef, ReactNode } from "react";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
} from "react-hook-form";
import FormControl from "@mui/material/FormControl";
import FormHelperText from "@mui/material/FormHelperText";
import FormLabel from "@mui/material/FormLabel";
import FormControlLabel from "@mui/material/FormControlLabel";
import Radio from "@mui/material/Radio";
import RadioGroup from "@mui/material/RadioGroup";
type RadioInputProps<T> = {
  label: string;
  type?: string;
  autoFocus?: boolean;
  disabled?: boolean;
  readOnly?: boolean;
  error?: string;
  testId?: string;
  keyValue: keyof T;
  options: T[];
  keyExtractor: (option: T) => string;
  renderOption: (option: T) => ReactNode;
};
function RadioInputRaw<T>(
  props: RadioInputProps<T> & {
    name: string;
    value: T | undefined | null;
    onChange: (value: T) => void;
    onBlur: () => void;
  },
  ref?: ForwardedRef<HTMLDivElement | null>
) {
  const value = props.value;
  const onChange = (radioValue: T) => () => {
    props.onChange(radioValue);
  };
  return (
    <FormControl
      data-testid={props.testId}
      component="fieldset"
      variant="standard"
      error={!!props.error}
    >
      <FormLabel component="legend" data-testid={`${props.testId}-label`}>
        {props.label}
      </FormLabel>
      <RadioGroup ref={ref}>
        {props.options.map((option) => (
          <FormControlLabel
            key={props.keyExtractor(option)}
            control={
              <Radio
                checked={option[props.keyValue] === value?.[props.keyValue]}
                name={props.name}
                onChange={onChange(option)}
                data-testid={`${props.testId}-${props.keyExtractor(option)}`}
              />
            }
            label={props.renderOption(option)}
          />
        ))}
      </RadioGroup>
      {!!props.error && (
        <FormHelperText data-testid={`${props.testId}-error`}>
          {props.error}
        </FormHelperText>
      )}
    </FormControl>
  );
}
const RadioInput = forwardRef(RadioInputRaw) as never as <T>(
  props: RadioInputProps<T> & {
    name: string;
    value: T | undefined | null;
    onChange: (value: T) => void;
    onBlur: () => void;
  } & { ref?: ForwardedRef<HTMLDivElement | null> }
) => ReturnType<typeof RadioInputRaw>;
function FormRadioInput<
  TFieldValues extends FieldValues = FieldValues,
  T = unknown,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>(
  props: RadioInputProps<T> &
    Pick<ControllerProps<TFieldValues, TName>, "name" | "defaultValue">
) {
  return (
    <Controller
      name={props.name}
      defaultValue={props.defaultValue}
      render={({ field, fieldState }) => (
        <RadioInput<T>
          {...field}
          label={props.label}
          autoFocus={props.autoFocus}
          type={props.type}
          error={fieldState.error?.message}
          disabled={props.disabled}
          readOnly={props.readOnly}
          testId={props.testId}
          options={props.options}
          keyValue={props.keyValue}
          keyExtractor={props.keyExtractor}
          renderOption={props.renderOption}
        />
      )}
    />
  );
}
export default FormRadioInput;
----------------------------------------

// ./src/components/table/table-components.tsx
----------------------------------------
import { forwardRef } from "react";
import Table, { TableProps } from "@mui/material/Table";
import TableBody, { TableBodyProps } from "@mui/material/TableBody";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableFooter from "@mui/material/TableFooter";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";
import { TableComponents as TableComponentsType } from "react-virtuoso";
const TableComponents = {
  Scroller: forwardRef<HTMLDivElement>(function Scroller(props, ref) {
    return <TableContainer component={Paper} {...props} ref={ref} />;
  }),
  Table: (props: TableProps) => (
    <Table stickyHeader {...props} style={{ borderCollapse: "separate" }} />
  ),
  TableHead: TableHead as unknown as TableComponentsType["TableHead"],
  TableFoot: TableFooter as unknown as TableComponentsType["TableFoot"],
  TableRow: TableRow,
  TableBody: forwardRef<HTMLTableSectionElement, TableBodyProps>(
    function BodyTable(props, ref) {
      return <TableBody {...props} ref={ref} />;
    }
  ),
};
export default TableComponents;
----------------------------------------

// ./src/components/theme/init-color-scheme-script.tsx
----------------------------------------
"use client";
import InitColorSchemeScriptMui from "@mui/material/InitColorSchemeScript";
function InitColorSchemeScript() {
  return <InitColorSchemeScriptMui attribute="class" />;
}
export default InitColorSchemeScript;
----------------------------------------

// ./src/components/theme/theme-provider.tsx
----------------------------------------
"use client";
import { createTheme, ThemeProvider as MuiThemeProvider, Theme } from '@mui/material/styles'; 
import { alpha } from '@mui/material/styles';
import { useMemo, PropsWithChildren } from 'react';
import CssBaseline from '@mui/material/CssBaseline';
declare module '@mui/material/styles' {
 interface Palette {
   customGradients: {
     primary: string;
     secondary: string;
     background: string;
   }
 }
 
 interface PaletteOptions {
   customGradients?: {
     primary?: string;
     secondary?: string;
     background?: string;
   }
 }
}
function ThemeProvider(props: PropsWithChildren<{}>) {
 const theme = useMemo(
   () =>
     createTheme({
       spacing: 8,
       shape: {
         borderRadius: 8,
       },
       palette: {
         mode: 'dark',
         primary: {
           main: '#3B82F6',
           light: '#60A5FA', 
           dark: '#2563EB',
           contrastText: '#FFFFFF',
         },
         secondary: {
           main: '#8B5CF6',
           light: '#A78BFA',
           dark: '#7C3AED', 
           contrastText: '#FFFFFF',
         },
         success: {
           main: '#10B981',
           light: '#34D399',
           dark: '#059669',
           contrastText: '#FFFFFF',
         },
         error: {
           main: '#EF4444',
           light: '#F87171', 
           dark: '#DC2626',
           contrastText: '#FFFFFF',
         },
         warning: {
           main: '#F59E0B',
           light: '#FBBF24',
           dark: '#D97706',
           contrastText: '#FFFFFF',
         },
         info: {
           main: '#3B82F6',
           light: '#60A5FA',
           dark: '#2563EB',
           contrastText: '#FFFFFF',
         },
         grey: {
           50: '#F9FAFB',
           100: '#F3F4F6',
           200: '#E5E7EB',
           300: '#D1D5DB',
           400: '#9CA3AF',
           500: '#6B7280',
           600: '#4B5563',
           700: '#374151',
           800: '#1F2937',
           900: '#111827',
         },
         background: {
           default: '#0F172A',
           paper: 'rgb(28, 40, 58, 0.92)',
         },
         text: {
           primary: '#F8FAFC',
           secondary: '#94A3B8',
         },
         customGradients: {
           primary: 'linear-gradient(to right, #3B82F6, #8B5CF6)',
           secondary: 'linear-gradient(to right, #8B5CF6, #D946EF)',
           background: 'linear-gradient(to bottom, #0F172A, #1E293B)',
         },
       },
       typography: {
         fontFamily: '"Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',
         h1: {
           fontSize: '2.5rem',
           fontWeight: 600,
           lineHeight: 1.2,
           letterSpacing: '-0.02em',
         },
         h2: {
           fontSize: '2rem',
           fontWeight: 600,
           lineHeight: 1.2,
           letterSpacing: '-0.02em',
         },
         h3: {
           fontSize: '1.75rem',
           fontWeight: 600,
           lineHeight: 1.2,
           letterSpacing: '-0.02em',
         },
         h4: {
           fontSize: '1.5rem',
           fontWeight: 500,
           lineHeight: 1.2,
           letterSpacing: '-0.02em', 
         },
         h5: {
           fontSize: '1.25rem',
           fontWeight: 500,
           lineHeight: 1.2,
           letterSpacing: '-0.02em',
         },
         h6: {
           fontSize: '1rem',
           fontWeight: 500,
           lineHeight: 1.2,
           letterSpacing: '-0.02em',
         },
         body1: {
           fontSize: '1rem',
           lineHeight: 1.5,
           letterSpacing: '-0.01em',
         },
         body2: {
           fontSize: '0.875rem', 
           lineHeight: 1.5,
           letterSpacing: '-0.01em',
         },
       },
       components: {
         MuiCssBaseline: {
           styleOverrides: (theme: Theme) => ({
             body: {
               backgroundImage: theme.palette.customGradients.background,
               minHeight: '100vh',
               scrollbarWidth: 'thin',
               scrollbarColor: `${theme.palette.grey[600]} ${theme.palette.grey[800]}`,
               '&::-webkit-scrollbar': {
                 width: theme.spacing(1),
               },
               '&::-webkit-scrollbar-track': {
                 background: theme.palette.grey[800],
               },
               '&::-webkit-scrollbar-thumb': {
                 background: theme.palette.grey[600],
                 borderRadius: theme.spacing(0.5),
                 '&:hover': {
                   background: theme.palette.grey[500],
                 },
               },
             },
           }),
         },
         MuiButton: {
           styleOverrides: {
             root: ({ theme }: { theme: Theme }) => ({
               textTransform: 'none',
               fontWeight: 500,
               borderRadius: theme.spacing(1),
               padding: theme.spacing(1, 2),
               transition: theme.transitions.create(
                 ['transform', 'box-shadow', 'background-color'],
                 {
                   duration: theme.transitions.duration.shorter,
                 }
               ),
               '&:hover': {
                 transform: 'translateY(-1px)',
               },
             }),
             contained: ({ theme }: { theme: Theme }) => ({
               background: theme.palette.customGradients.primary,
               boxShadow: `0 ${theme.spacing(0.25)} ${theme.spacing(1.25)} ${alpha(
                 theme.palette.primary.main,
                 0.1
               )}`,
               '&:hover': {
                 boxShadow: `0 ${theme.spacing(0.5)} ${theme.spacing(2)} ${alpha(
                   theme.palette.primary.main,
                   0.2
                 )}`,
               },
             }),
           },
         },
         MuiCard: {
           styleOverrides: {
             root: ({ theme }: { theme: Theme }) => ({
               backgroundImage: 'linear-gradient(to bottom right, rgba(30, 41, 59, 0.5), rgba(30, 41, 59, 0.2))',
               backdropFilter: 'blur(10px)',
               border: `1px solid ${alpha(theme.palette.common.white, 0.1)}`,
               transition: theme.transitions.create(
                 ['transform', 'box-shadow', 'border-color'],
                 {
                   duration: theme.transitions.duration.shorter,
                 }
               ),
               '&:hover': {
                 transform: 'translateY(-2px)',
                 borderColor: alpha(theme.palette.common.white, 0.2),
                 boxShadow: `0 ${theme.spacing(2.5)} ${theme.spacing(5)} -${theme.spacing(1.25)} rgba(0, 0, 0, 0.2)`,
               },
             }),
           },
         },
         MuiTextField: {
          styleOverrides: {
            root: ({ theme }: { theme: Theme }) => ({
              '& .MuiOutlinedInput-root': {
                borderRadius: theme.spacing(1),
                height: theme.spacing(5.5), // 44px at default spacing of 8px
                backgroundColor: alpha(theme.palette.background.paper, 0.4),
                transition: theme.transitions.create(['background-color', 'box-shadow'], {
                  duration: theme.transitions.duration.shorter,
                }),
                '&:hover': {
                  backgroundColor: alpha(theme.palette.background.paper, 0.6),
                },
                '&.Mui-focused': {
                  backgroundColor: alpha(theme.palette.background.paper, 0.8),
                  boxShadow: `0 0 0 ${theme.spacing(0.25)} ${alpha(theme.palette.primary.main, 0.25)}`,
                },
                '&.MuiInputBase-multiline': {
                  height: 'auto',
                  minHeight: theme.spacing(5.5),
                  padding: theme.spacing(1, 1.75)
                }
              },
              '& .MuiInputLabel-outlined': {
                transform: `translate(${theme.spacing(1.75)}, ${theme.spacing(1.625)}) scale(1)`,
                '&.MuiInputLabel-shrink': {
                  transform: `translate(${theme.spacing(1.75)}, ${theme.spacing(-0.75)}) scale(0.75)`,
                }
              }
            }),
          },
        },
         MuiTableHead: {
           styleOverrides: {
             root: ({ theme }: { theme: Theme }) => ({
               '& .MuiTableCell-head': {
                 backgroundColor: alpha(theme.palette.background.paper, 0.6),
                 color: theme.palette.text.primary,
                 fontWeight: 600,
                 padding: theme.spacing(2),
                 borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
               },
             }),
           },
         },
         MuiTableBody: {
           styleOverrides: {
             root: ({ theme }: { theme: Theme }) => ({
               '& .MuiTableRow-root': {
                 transition: theme.transitions.create('background-color', {
                   duration: theme.transitions.duration.shorter,
                 }),
                 '& .MuiTableCell-body': {
                   padding: theme.spacing(2),
                   color: theme.palette.text.secondary,
                   borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
                 },
                 '&:hover': {
                   backgroundColor: alpha(theme.palette.action.hover, 0.1),
                 },
               },
             }),
           },
         },
         MuiChip: {
           styleOverrides: {
             root: ({ theme }: { theme: Theme }) => ({
               borderRadius: theme.spacing(0.75),
               fontWeight: 500,
               '&.MuiChip-filled': {
                 backgroundColor: alpha(theme.palette.primary.main, 0.2),
                 '&:hover': {
                   backgroundColor: alpha(theme.palette.primary.main, 0.3),
                 },
               },
             }),
           },
         },
         MuiTooltip: {
           styleOverrides: {
             tooltip: ({ theme }: { theme: Theme }) => ({
               backgroundColor: alpha(theme.palette.grey[900], 0.95),
               backdropFilter: 'blur(4px)',
               padding: theme.spacing(1, 1.5),
               fontSize: '0.875rem',
               borderRadius: theme.spacing(0.75),
               boxShadow: theme.shadows[6],
             }),
           },
         },
         MuiDialog: {
           styleOverrides: {
             paper: ({ theme }: { theme: Theme }) => ({
               backgroundImage: 'linear-gradient(to bottom right, rgba(30, 41, 59, 0.95), rgba(30, 41, 59, 0.85))',
               backdropFilter: 'blur(10px)', 
               border: `1px solid ${alpha(theme.palette.common.white, 0.1)}`,
               borderRadius: theme.spacing(1.5),
               padding: theme.spacing(2),
               boxShadow: theme.shadows[24],
             }),
           },
         },
       },
     }),
   []
 );
 return (
   <MuiThemeProvider theme={theme}>
     <CssBaseline />
     {props.children}
   </MuiThemeProvider>
 );
}
export default ThemeProvider;
----------------------------------------
